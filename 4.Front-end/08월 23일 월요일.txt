08월 23일 오전수업

[ 함수 ]

▶ 자바스크립트에서 함수를 선언하는 방법 2 : 함수 표현식(Function expression)

자바스크립트에서는 함수도 변수에 넣을 수 있다.
==> 어떠한 값만 변수에 넣을 수 있는 게 아니다.

var minus = function(){
			
};
==> 이렇게 쓰면 함수명이 없는데 minus가 변수명이자 함수명이다.

호출은 다음과 같이 한다.
==> minus(val25_1, val25_2);

함수를 담은 변수는 type이 function으로 나온다.

★ 자바스크립트는 함수 또한 변수에 담겨질 수 있다.

=======================================================================

[ 화살표 함수 ]

▶ 자바스크립트에서 함수를 선언하는 방법3 : 람다 표현식(lambda expression) 다른말로 화살표 함수

자바에서 람다식처럼 자바스크립트에도 화살표 함수가 있다.

자바스크립트에서 소괄호가 있는 것은 함수밖에 없다.
(※ 자바는 소괄호가 있는게 생성자 아니면 메소드이다.)

let plus = (num1, num2) => {
			
if( typeof(num1) == "string" ) {
num1 = Number(num1);
}
			
if( typeof(num2) == "string" ) {
num2 = Number(num2);
}
			
return `${num1 + num2}`;
			
};



▶ 자바스크립트의 데이터타입은 string, number, boolean, undefined, function, object 가 있다.
==> NaN도 있다.

=======================================================================

[ 자바스크립트 선택자 ]

▶ 1. 자바스크립트에서 태그를 가지고 선택자를 잡는 방법

document.getElementsByTagName("태그명");

★ 자바스크립트에서 HTML5의 모든 태그들은 데이터타입이 object 타입이다.

document.getElementsByTagName("태그명"); 을 실행하면 리턴타입은 객체(object)배열 타입이다.

** 배열의 길이를 구하는 법은? ==> 배열명.length

** 자바스크립트에서 css 주는 법 
==> arrDiv[i].style.border = "solid 1px gray";
★ 배경색은 다음과 같이 준다. 
==> arrDiv[i].style.backgroundColor = "";
==> '-'를 쓰지 않고 대문자로 쓴다.

-------------------------------------------------------------------------------------------------------------------------------------

▶ 2. 자바스크립트에서 클래스명을 가지고 선택자를 잡는 방법

document.getElementsByClassName("태그명");

document.getElementsByClassName("태그명"); 을 실행하면 리턴타입은 객체(object)배열 타입이다.

-------------------------------------------------------------------------------------------------------------------------------------

▶ 3. 자바스크립트에서 name 속성을 가지고 선택자를 잡는 방법

document.getElementsByName("name값");

document.getElementsByName("name값"); 을 실행하면 리턴타입은 객체(object)배열 타입이다.

★ 체크박스가 나오면 네임이 같아야 하고, value에 실제 데이터베이스에 insert 해줄 값을 적어줘야 한다.

ex)
<li><label for="hobby1">게임</label><input type="checkbox" id="hobby1" name="hobby" value="game" /></li>
<li><label for="hobby2">영화감상</label><input type="checkbox" id="hobby2" name="hobby" value="movie" /></li>

※ value => 실제 DB에 insert 해줄 값이다.

------------------------------------------------------------------------------------------------------------------------------------- 

▶ 4. 자바스크립트에서 id 속성을 가지고 선택자를 잡는 방법

document.getElementById("id값"); 이다.

document.getElementById("id값"); 을 실행하면 리턴타입은 객체(object) 타입이다.
==> 배열이 아니다.

※ 자바스크립트에서 에러가 나오면 이클립스에서는 표시가 되질 않지만, F12 콘솔창에서 어디서 에러가 났는지 표시해준다.

[ 이벤트 처리 ]

※ id가 "btnOK"이라는 버튼을 클릭하면 alert("확인(클릭) 버튼을 클릭하셨군요"); 를 띄우고자 한다.

1. id가 "btnOK" 이라는 버튼을 "이벤트소스" 라고 부른다.
2. 클릭 ==> click 을 "이벤트" 라고 부른다.
3. 클릭했을때 발생되어지는 것을 핸들러(처리) 라고 부른다.

var btnOK = document.getElementById("btnOk"); ==> "이벤트소스"

btnOK.onclick = function() {
// btnOk 를 "이벤트소스"라고 부른다.
// onclick 를 "이벤트"라고 부른다. 지금은 클릭 이벤트이다.
// function() {} 부분을 핸들러(처리) 라고 부른다.

alert("확인(클릭) 버튼을 클릭하셨군요");

};s

** var nCnt = 0; // 관습상 이 변수는 number만 쓰겠다는 것을 표현한다. 
==> string만 쓸거라면 var sCnt로 표현한다.

=======================================================================

[ 자바스크립트 표준객체 ]
** 객체 == 개체

▶ 1. 배열

var arrFruit1 = new Array();	// 배열도 객체이다.
arrFruit1.push("사과"); // 배열명.push("값") : 배열의 마지막에 새로운 요소를 추가한 후, 변경된 배열의 길이를 반환해줌.

--> 자바스크립트에서 사용되는 배열 처리 1: 일반 for문

		for(var i=0; i<arrFruit1.length; i++) {
			html += "<li>"+arrFruit1[i]+"</li>";
		}// end of for--------------------------

--> 자바스크립트에서 사용되는 배열 처리 2

 		for(var i=0; i<arrFruit1.length; i+=1) { // i+=2 	2씩 증가
			html += "<li>"+arrFruit1[i]+"</li>";
		}// end of for-------------------------- 

--> 자바스크립트에서 사용되는 배열 처리 3

		for(var item of arrFruit1) {
			html += "<li>"+ item +"</li>";
		}// end of for----------------------------------

--> 자바스크립트에서 사용되는 배열 처리 4
==> 배열명.forEach(function(item, index, array){})
			item  - 현재 처리중인 배열의 각 요소
			index - (선택사항으로 생략가능) 처리중인 요소의 인덱스 
			array - (선택사항으로 생략가능) forEach()가 적용되고 있는 배열

		arrFruit1.forEach(function(item){
			html += "<li>"+ item +"</li>";
		});


▶ 1-1. 또 다른 배열표현

var arrFruit2 = ["사과","딸기","메론","참외","수박"];
※ 자바라면 {"사과","딸기","메론","참외","수박"}; 로 쓴다. // 중괄호 사용

// "문자열".trim(); 은 문자열의 좌,우의 공백이 있으면 좌,우 공백을 모두 제거해주는 것이다.
// 배열명.push() : 배열의 마지막에 새로운 요소를 추가한 후, 변경된 배열의 길이를 반환해줌.


=======================================================================

08월 23일 오후수업 

[이벤트 처리]
1. 이벤트 소스.on이벤트 = function(){}
2. 이벤트 소스.addEventListener("이벤트", function(){});
3. 직접 태그에 onlclick=""을 넣는다.

새로고침
<button type="button" onclick="javascript:history.go(0)"></button>
<button type="button" onclick="javascript:location.reload()"></button>

▶ 배열명.push()은 맨 마지막부터 추가
▶ 배열명.pop()은 맨 마지막에 들어온 배열값을 삭제한다.

▶ 배열명.unshift()는 배열 맨 처음에 값을 추가한다.
▶ 배열명.shift()는 배열 맨 처음 값을 삭제한다.

▶ 배열명.splice()는 중간에 추가와 삭제가 모두 가능하다.
==> 인수 가운데에 0이 들어오면 추가할 때이고,
==> 인수중에 요소가 없고 0이 아닌 다른 숫자가 들어오면 삭제할 때이다.

==> 딸기 다음에 넣어야하기 때문에 인덱스는 2번이다. (0 - 사과, 1- 딸기, 2 - 메론)

★ 자바와 자바스크립트는 인덱스가 0부터 시작하고, 오라클은 인덱스가 1부터 시작한다.

▶ 배열명.reverse() : 배열의 요소를 뒤집어 역순으로 만들어 버린다.

※ push, pop가 가장 많이 쓰이고, 나머지는 알아만 두면 좋다.


-------------------------------------------------------------------------------------------------------------------------------------
[자바의 join, split]

// === 8. String.join("구분자", 문자열배열명) ===
 //        문자열배열을 "구분자"로 합쳐서 String 타입으로 돌려주는 것이다.
String [] nameArr = {"한석규","두석규","세석규","네석규","오석규"};
		
String names = String.join("-", nameArr);
System.out.println(names);
-------------------------------------------------------------------------------------------------------------------------------------
// === 7. "문자열".split("구분자") ===
//        "문자열"을 "구분자"로 잘라서 String 타입의 배열로 돌려주는 것이다.
			
String foodes = "파스타,국밥,볶음밥,고구마,계란말이";
		
String foodArr[] = foodes.split(",");
// {"파스타","국밥","볶음밥","고구마","계란말이"}
-------------------------------------------------------------------------------------------------------------------------------------

[ join ]

▶ 배열명.join("구분문자");
배열명.join("구분문자")는 구분문자를 사용해서 배열을 하나의 문자열로 만들어 반환해주는 것이다.
만약에 "구분문자"를 지정해주지 않으면 즉, 배열명.join() 으로 하면 구분문자는 콤마로 되어진다.

★ 자바는 배열에 동일한 데이터 타입만 들어와야 하지만, 자바스크립트는 배열 안에 number, string, boolean 이 섞여서 들어올 수 있다.

=======================================================================

[ 배열의 일부분을 잘라내서 배열로 만들기 - slice ]

var arrData = [20,50,70,100,"홍길동","이순신","유관순"];
arrData.slice(0, 4); // 홍길동이 4번째이니 그 앞까지 짤라낸다는 말이 될 수도 있고, 인덱스 번호 0부터 4개를 짤라낸다는 말이 될 수도 있다.

★ slice를 써야 원본이 안 바뀌고, splice는 원본 배열이 변한다.
★ splice는 배열 속에 넣었다가 제거해오는거고, slice는 짤라오는 거다

arrData_2.slice(0, 5);
==> 두번째 파라미터는 어디 앞까지 짤라올 것인가 or 몇 개를 짤라올 것인가 이다.


숫자랑 문자가 서로 알맞게 갈라져 있으면 그냥 slice를 하면 되고, 서로 섞여져 있다면 if문을 이용하여 서로서로 다른 배열에 각각 타입에 맞게 넣어준다.

=======================================================================

[ 배열명.indexOf(찾을value값, 출발index번호 )  ]
== 자바 indexof, 오라클 instr
==> ★ 없으면 -1이 출력된다.

배열명.lastIndexOf(찾을value값, 출발index번호 ); <== 방향만 틀어진다. 출발index 번호부터 역순으로 검색하여 가장 먼저 나온 것을 알려준다.
==> 출발index번호를 생략하면 출발index번호는 마지막 인덱스로 본다.
==> 배열명.length -1이 맨 마지막 배열값의 index 번호이다.


=======================================================================

[ substring(), substr() ]

// "문자열".substring(인덱스1, 인덱스2);
// "문자열" 에서 인덱스1 부터 인덱스2 바로 앞까지만 추출해옴.
        
// "문자열".substr(인덱스, 뽑아와야할 글자수);
// "문자열" 에서 인덱스 부터 뽑아와야할 글자수만 추출해옴.