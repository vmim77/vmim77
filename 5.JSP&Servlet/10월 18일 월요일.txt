10월 18일 수업

[ 장바구니 ] 

장바구니 리스트에서 수량을 0개로 바꾸면 삭제를 해줘야한다.

또한, 삭제버튼과 수정버튼을 구현해야한다.

※ <marquee></marquee>는 설정된 width만큼 글자가 흘러서 지나가는 효과를 준다.

전체로딩이 아닌 부분로딩을 해야하니깐 ajax를 사용한다.

==========================================================================================

▶ 장바구니 수정하기
<button type="button">수정</button>을 누르면 장바구니 테이블로 넘어가서 update를 해줘야한다.

- 먼저 수정하려는 주문수량에 대한 유효성검사를 해야한다. (문자열이나 0은 못들어오게 해야한다.)

function goOqtyEdit(obj) 함수를 사용한다.
==> DB에서 update를 하려면 장바구니 번호를 알아야한다.
==> [tbl_cart] cartno / fk_userid / fk_pnum / oqty / registerday
==> 장바구니번호(cartno)를 알아서 수량(oqty)를 바꿔줘야한다.

▶ 몇 번째 수정 버튼을 눌렀는지를 인덱스를 알면, 똑같이 매핑된 장바구니 시퀀스번호도 알 수 있다.
==> goOqtyEdit(this) 그래서 this를 넣어서 클릭한 이 버튼의 인덱스번호를 알아낸다.


$("button.updateBtn").index(obj); 
==> 클래스가 updateBtn 들 중에서 클릭한 이 버튼의 인덱스 번호를 알아낸다.

$("input.cartno").eq(index).val();
==> 수정하기 버튼의 인덱스를 알면 매핑된 장바구니 시퀀스 번호도 알 수 있다.
==> 항상 짝을 지어서 생성되기 때문이다.

var oqty = $("input.oqty").eq(index).val();
==> 주문수량도 마찬가지로 매핑되어져 있으니 수정하기 버튼의 인덱스번호로 선택할 수 있다.

▶ 수정하기 버튼을 눌러서 장바구니 번호와 수량을 알 수 있다.

이제 받아온 수량을 정규표현식을 써서 숫자인지 아닌지를 검사한다.

==========================================================================================

▶ 장바구니 삭제하기

goDel("${cartvo.cartno}") 

장바구니번호를 받아서 해당 장바구니번호의 행을 삭제하면 된다.
==> 장바구니 번호가 숫자로 되어있으면 상관이 없지만, 장바구니번호가 문자도 섞여있으면 값을 받는 변수에서 타입을 알 수 없으니깐 에러가 뜬다. 그래서 홑따옴표로 묶어줘야한다. 
==> 문자열이라고 인식을 시켜준다.
==> 숫자여도 호환이 다 되니깐 상관이 없다.
==> 항상 EL 방식의 값이 들어오는 곳에는 홑따옴표나 쌍따옴표를 써서 데이터타입 오류를 막는다.

삭제하기를 누르면 먼저 confirm으로 알림을 띄워준다.
==> confirm은 예를 누르면 true, 아니요를 누르면 false가 된다.


★ 장바구니 갯수를 계속해서 추가해도 행 한 개에 update로 추가되니 카트번호만 알면 해당 제품의 장바구니 목록을 다 삭제할 수 있다.

pdao.delCart(cartno);

==========================================================================================

[ 주문하기 ]

★ 주문하기로 넘어오는 경우는 2가지이다. 하나는 장바구니에서, 또 다른 하나는 상품상세에서
==> 즉, prodview.jsp와 cartlist.jsp 두 곳에서 OrderAddAction.java에 접근한다.

goOrder() 함수를 사용한다.

value가 장바구니 테이블의 pnum인 체크박스를 이용해서 주문하기를 구현한다.
==> select where 로 pnum과 지금 로그인한 사람의 정보를 넘겨서 선택된 행을 주문테이블로 넘긴다.

ex. A회원의 33, 34, 35, 36번 제품을 체크했다면 이 제품들을 장바구니테이블에서 주문테이블로 넘겨준다.


▶ 주문테이블과 주문상세 테이블을 생성한다.

주문코드는 s+날짜+시퀀스

▶ goOrder( ) 

체크된 체크박스가 1개 이상이라면 다음과 같이 한다.

- 전체 체크박스의 개수를 구한다.

전체 체크박스의 개수만큼 반복문을 돌린다.

체크가 된 i번째 체크박스의 제품번호, 수량, 장바구니번호, 주문총액, 총포인트를 각각의 배열변수에 넣어준다.
★ 서로 인덱스번호가 같다.

배열로된 변수들을 모두 .join()을 이용해서 문자열로 만들어준다. 또한 총 주문금액과 포인트를 구해야하기 때문에 반복문을 이용하여 totalPriceArr, totalPointArr의 요소들을 모두 더 해준다.
==> 얘네는 이제 주문총액, 주문총포인트에 들어간다.
==> 모든 주문금액이다.

※ 웹은 변수 default가 문자열이니깐 parseInt를 이용해서 숫자형으로 바꾸고 sumtotalPrice, sumtotalPoint 변수에 쌓아준다.

(예시)
확인용 pnumjoin : 3,56,59
확인용 oqtyjoin : 3,2,3
확인용 cartnojoin : 14,13,11
확인용 totalPricejoin : 30000,2000000,30000
확인용 sumtotalPrice : 2060000
확인용 sumtotalPoint : 435

(실제출력)
확인용 제품번호: 35, 주문량: 2, 장바구니번호 : 9, 주문금액: 2000000, 포인트: 120
확인용 제품번호: 34, 주문량: 2, 장바구니번호 : 8, 주문금액: 2000000, 포인트: 120
확인용 제품번호: 33, 주문량: 1, 장바구니번호 : 7, 주문금액: 1000000, 포인트: 60
##############################################################
확인용 pnumjoin : 35,34,33
확인용 oqtyjoin : 2,2,1
확인용 cartnojoin : 9,8,7
확인용 totalPricejoin : 2000000,2000000,1000000
확인용 sumtotalPrice : 5000000
확인용 sumtotalPoint : 300

▶ 강의예시는 금액 선 충전식이여서, 현재 내가 가지고 있는 금액 총액과 주문금액 총액을 비교해서 주문 가능여부를 따져야한다.

var currentcoin = ${sessionScope.loginuser.coin}; // 내가 충전해둔 금액

if( sumtotalPrice > currentcoin ) {
   $("p#order_error_msg").html("코인잔액이 부족하므로 주문이 불가합니다.<br>주문총액 : "+str_sumtotalPrice+"원 / 코인잔액 :    "+str_currentcoin+"원"); 
   return;
}

(실제출력)
코인잔액이 부족하므로 주문이 불가합니다.
주문총액 : 5,000,000원 / 코인잔액 : 600,000원

※ var str_sumtotalPrice = sumtotalPrice.toLocaleString('en'); 은 표시용으로 3자리마다 콤마를 찍은 것이다.
==> 자바스크립트에서 숫자타입.toLocaleString('en"); 을 해주면 숫자 3자리마다 콤마를 찍어서 문자열로 리턴시켜준다.

이제 Action단으로 넘어가서 처리를 해준다.

■ OrderAddAction.java

먼저 주문코드를 만들어주는 메소드를 만들어준다.

주문코드는 s + 오늘날짜 + 주문테이블 시퀀스값이다.

// ===== Transaction 처리하기 ===== // 
// 1. 주문 테이블에 입력되어야할 주문전표를 채번(select)하기 
// 2. 주문 테이블에 채번해온 주문전표, 로그인한 사용자, 현재시각을 insert 하기(수동커밋처리)
// 3. 주문상세 테이블에 채번해온 주문전표, 제품번호, 주문량, 주문금액을 insert 하기(수동커밋처리)
// 4. 제품 테이블에서 제품번호에 해당하는 잔고량을 주문량 만큼 감하기(수동커밋처리) 
// 5. 장바구니 테이블에서 cartnojoin 값에 해당하는 행들을 삭제(delete OR update)하기(수동커밋처리) 
// 6. 회원 테이블에서 로그인한 사용자의 coin 액을 sumtotalPrice 만큼 감하고, point 를 sumtotalPoint 만큼 더하기(update)(수동커밋처리) 
// 7. **** 모든처리가 성공되었을시 commit 하기(commit) **** 
// 8. **** SQL 장애 발생시 rollback 하기(rollback) **** 
        
// === Transaction 처리가 성공시 세션에 저장되어져 있는 loginuser 정보를 새로이 갱신하기 ===
// === 주문이 완료되었을시 주문이 완료되었다라는 email 보내주기  === // 


▶ 제품을 상세보기에서 바로 주문하는 경우에는 5번 항목을 안하면 된다.

▶ 이제 넘어온게 한 개인지, 여러 개인지를 파악해야한다. join으로 문자열로 만들었으니 다시 Action에서 배열로 만들어준다.

▶ 정상적이라면 주문코드를 채번해서 주문테이블과 주문상세테이블에 각각 넣어줘야한다.

주문테이블: 주문코드, 사용자ID, 주문총액, 주문총포인트, 주문일자
주문상세테이블: 주문상세 일련번호, 주문코드, 제품번호, 주문량, 주문당시 판매가, 배송상태, 배송완료일자

장바구니목록에서 주문하기를 누르는 순간 장바구니테이블에서는 삭제를 해주고, 주문테이블로 넘겨야한다.




