09월 30일 오전수업

[ 깃허브 ]

예시) 1번 개발자-팀장, 2~4번 개발자 - 팀원

1. 팀장 - 웹 프로젝트 개설 / 공통된 기본 셋팅파일 생성 (FrontController.java, Command.properities 등)
==> 팀장이 깃허브에 올린다. 
==> 기본 골격 - Master Branch(== Main Branch)

2. 팀원 - 깃허브에가서 기본 골격(Master Branch)를 import 해온다.

3. 각자 개발 진행하기위해 자신만의 branch를 만든다. ( 팀장 전용 branch, 팀원1 전용 branch, ... )
※ 각각의 branch는 보관용이다.
==> Main branch는 절대로 안 건드리고, 자신들의 branch에서 개발을 진행한다.
==> 자신들이 개발한 소스들은 자기의 branch에 있다.

4. 이후 자신들의 branch를 Github에 올린다. (통합시키기 위해서)
예시) branch1, branch2 .....

5. Main branch에 자신들이 만든 branch를 삽입시킨다. -- 소스 병합

6. 합쳐진 branch들을 다시 다운받아온다. -- Pull
==> PC 이상으로 소스가 사라져도 Github에 이미 저장되어 있기 때문에 다시 Pull 해오면 된다.

=======================================================================

1. GitHub 계정생성

2. 팀장은 repository 생성하기를 한다.
==> repository 이름은 프로젝트 이름과 동일하게
==> 설명 쓰고, Public, readme 파일, gitgnore 체크 / gitgnore template 자바로 설정

3. Code -> URL 주소 복사하기 

4. 이클립스에서 다이나믹 웹 프로젝트를 생성한다. --> 이름은 repository와 동일하게 생성
==> 미리 만들고해도 상관X
==> 폴더, 파일등을 생성한다.

5. Open Perspective 클릭 --> Git 선택하기
==> 이후 이미지를 보면서 설정한다.
==> 우리가 저장한 작업물을 로컬 repository에 저장한다. 
==> 로컬 repository에 저장된 내용물을 이제 GitHub로 전송시킨다.

※ gitignore에 적혀진 파일들을 GitHub에 올라가지 않는 파일이다.

★ 팀원끼리 충돌을 피하는 방법

충돌은 동일한 파일명에 동일한 라인에 똑같은게 있으면 충돌 X,
동일한 파일명에 동일한 라인에 다른게 있으면 충돌 

ex. Command.properties
1번라인: index.go           index.go  (같으니깐 패스)
2번라인: mbr.go             abc.go    (▶충돌◀)
3번라인:                       prod.go  (덮어씌움)

충돌이 안나는 가장 좋은 방법은 똑같이 쓰는 파일은 한 사람만 계속 올리면 된다. 그러면 충돌X
A팀원만 Command.properties 를 올리겠다고 정했으면, 나머지 팀원들은 gitignore.txt 에 Command.properties 를 추가한다.

★ gitignore.io 사이트를 사용해서 ignore 파일만들기

▶ 물음표 표시가 있는 파일은 깃헙에 아직 올라가질 않은 파일이다.
▶ 별 모양으로 나오면 깃허브에 올라갈 파일들을 뜻한다. ( Team -> Add to Index 클릭)

★ 깃허브(Web)에서 내 PC로 소스를 가져오는 것을 Pull 이라고 하고,
★ 내 PC의 소스를 깃허브(Web)으로 올리는 것을 Push라고 한다.

'Push가 되어질 파일'들은 'commit이 되어질 파일'들이다.
==> 오라클 commit과 다름

.jar 파일은 gitignore에 해당되는 파일이여서 Add to Index 메뉴가 나타나질 않는다. 제외대상 파일 이외의 것을 추가해야 그때 add to index가 생긴다.

add to index -> Team - Commit -> 로컬 repository에 저장

▶ commit 메시지(주석문)를 꼭 적어줘야 commit이 된다.

commit 메시지까지 적고 다시 commit을 누르면 프로젝트 옆에 '↑1' 식으로 표시된다.
==> *은 없어진다. 숫자 1은 커밋되어진 개수이다. 이후에 다시 오른쪽클릭 team - push를 눌러줘야 깃허브에 올라간다.

★ 토큰 받아둬야한다. 이제 '아이디 / 비밀번호식' 인증이 아닌 '아이디 / 토큰식'으로 인증을 받아야 한다.

★ 프로젝트 소스에 missing이라는 오류가 발생하는 원인은 깃허브에 push 할때 파일이 없는 빈폴더는 push가 되지 않으므로 import 또한 되지 않기 때문이다.

작업할때 항상 src에 패키지를 만들어놓고, .java 파일 아무거나 만들어서 같이 push되게 해줘야 한다.
==> 우리같은 경우에는 FrontController.java가 있으니깐 ㄱㅊ

※ lib는 직접 이클립스에서 넣는다.

▶ 이미지보고 GIT 탭(깃 저장소, 깃 스테이지) 추가하기

이제 자기가 src에 패키지를 만들고 테스트용 클래스파일을 만들면 Git Staging에 Unstaged Changes 에 추가가 될 것이다. ==> commit 용으로 올려질 대기가 된 파일들이다.

▶ Unstaged Changes에 파일들을 staged Changes 로 옮기고 꼭 commit 메시지를 쓴 다음에 commit을 한다

★★★★★ 항상 먼저 Pull을 하고 Commit -> Push 순으로 해야합니다.

★★★★★ 클래스파일은 항상 대문자부터 시작하고, 나머지(패키지등은) 소문자 시작입니다. 명심할것

★★★★★ 커밋메시지 쓸 때 엔터 금지


※ 151번 이미지

▶ 팀장도 자기만의 branch 만들어야 한다.
==> 프로젝트 오른쪽 클릭 -> Team - > Swith to -> 자기 브랜치 선택하기
==> 체크 2번하고 Pulling은 Merge로 바꿔야 함

▶ 커밋한 이후로 내용물을 바꾸면 >(부등호) 표시가 파일명 옆에 나온다.
==> 물음표(?) 는 처음으로 만든 것
==> 별표(*)는 커밋될 준비가 된 것 (== Push 준비가 된 것)

▶ 개인의 Branch에서 Push한 것은 Main Branch가 아닌, 개인 Branch에 Push된다.

=======================================================================

[ Push 할때 rejected가 나는 경우 ]

※ 189번 이미지 확인

Git repository -> 주소가 나오면 Add 
                  -> 주소가 안 나오면 Advanced -> remove 아이콘 클릭 ->  Main Branch 추가

--> Branches / Local / main commit 메시지 우클릭 Merge... 을 클릭한다.
--> 아이디 / 토큰 입력 --> Merge 

=======================================================================

▶ 패키지를 삭제해도 똑같이 커밋을 해줘야 한다. ==> 133번 이미지, 142번 이미지 보고 따라하기

▶ 팀원 브렌치에서 만든 파일을 이제 메인 브레치로 바꾼 다음에 병합해준다. ==> 167번 이미지
==> 자기 브렌치에서 새로운 파일 만듬
==> 깃허브에 push 까지 함
==> 메인 브렌치로 이동
==> 메인 브렌치에는 아까 만든 클래스가 없으니 병합(Merge) 해준다.

Team - merge - Local -> 자기이름 브렌치 더블클릭 (merge 버튼 클릭 X)

★ 메인 브렌치는 백업용(통합용) , 자기 브렌치가 개발용임

★ 항상 Push 하기 전에 Pull 부터 먼저해야한다.

★ 원격저장소를 없애는 방법 

원격저장소가서 Settings --> Danger Zone -> delete this repository 

원격저장소 삭제는 팀리더만 할 수 있다!


=======================================================================

09월 30일 오후수업 

[ 세미프로젝트 ]

- 팀장님 주도 하에 깃허브 생성하기

※ 유의사항
★ merge(병합)시 충돌이 일어나는데, 동일한 파일에서 동일한 라인에 다른 내용이 있을 때 발생한다.
==> 충돌을 예방하기 위해서 Command.properties 등은 한 사람만 올리도록 정해서, 나머지 팀원은 gitignore에 넣어준다.

★ 팀장이 Command.properties 에서 주석문으로 각각 파트를 나눠놔서 각 팀원들이 자유롭게 쓰도록 한다.

(예시)

########################### 팀장님 


########################### A팀원


########################### B팀원


혹은 gitignore 에 저장해 놓고, 그 파일만큼은 카톡으로 주고받자


 ※ merge(병합)시 충돌이 발생하지 않기 위한 예방책은 
  
  ==> main 브랜치에 있는 파일들은 실행만 하는 배포용으로만 사용해야하지
  main 브랜치에 있는 파일들을 열어서 수정을 하지 않도록 해야 한다.
  또한 main 브랜치에 있는 파일들을 삭제하려고 하는 경우에는 
  merge(병합) 되어 있는 파일들중에 다른 팀원이 만든것은 절대로 삭제하지 말고
  자신이 만든 파일들만 삭제하도록 해야 한다.

  파일의 생성 및 수정은 반드시 main 브랜치가 아닌 자신의 브랜치에서만
  해야하고 작성이 모두 끝나면 main 브랜치로 merge(병합)하도록 한다.   

=======================================================================

0. DB 설계(eXERD) --> DB 생성 ( 회원, 제품, 문의, 리뷰 )
1. 로그인중 표시칸 만들기
2. 회원메뉴 로그인중 표시쪽으로 이동시키기( 로그인, 회원가입은 비로그인 상태에서는 보이게 )
3. 관리자메뉴 숨기기
4. 비밀번호 처리 확인하기
5. 관리자메뉴 - 회원정보조회 구현 마무리
6. 모든 리뷰, 문의 게시판