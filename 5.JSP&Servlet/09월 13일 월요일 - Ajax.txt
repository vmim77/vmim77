09월 13일 오전수업

[ 회원정보 수정하기 - Update ]

- 기존 회원정보 폼태그에 찍어주기(완료)
- 새로 입력한 폼태그 전송시켜서 Update SQL문 실행시키기
- 다시 select where 로 바뀐 정보 출력하기

★ GET이나 POST로 넘어온 데이터는 ${param}이나 request.getParameter( )로 잡고, setAttribute("키값", 데이터)로 넘어온 데이터는 ${requestScope.name} 으로 잡는다.

-------------------------------------------------------------------------------------------------------------------------------------

[ 기존에 선택한 색상, 음식 체크해주는 다른 방법 ]

$("input:radio[id="+userChoiceColor+"]").prop("checked", true); // 이렇게하면 회원이 기존에 선택한 색상이 잡힌다.

$("input:checkbox[value="+food+"]").prop("checked", true); // 이렇게 하면 기존의 선택한 음식들이(배열요소) 하나씩 선택된다.

-------------------------------------------------------------------------------------------------------------------------------------

[ 새로 입력한 폼태그 전송시켜서 Update SQL문 실행시키기 ]

이벤트는 "수정완료" 버튼을 클릭으로 한다.

회원정보가 들어있으니 POST방식으로 넘기고, 버튼이 submit이다.

PersonUpdate_08.java 서블릿에는 이미 POST이면 select where의 sql문을 돌리게 작성해놨다. 그래서 action="<%= ctxPath%>/personUpdate.do" 을 사용하면 안된다.
==> <form name="myFrm" action="<%= ctxPath%>/personUpdateEnd.do" method="post"> 로 Update용 서블릿 생성한다.

update의 where절에는 seq가 들어가야 한다. (동명이인이 있을 수도 있으니)

▶ PersonUpdate_08.java에서 selectOne에서 넘겨준 DTO에는 seq까지 들어가 있다. ==> personUpdate.jsp에는 seq까지 들어간 DTO가 넘어가 있음 (※ 그러므로 personUpdate.jsp 에 SEQ를 hidden 타입으로 넣어놔야 한다.)

<input type="hidden" name="seq" value="${requestScope.psdto.seq}" readonly />

▶ seq가 전해져 오는 순서
1. personselectAll.jsp 에서 특정 행을 클릭하면 그 행의 seq값을 GET방식으로 담아서 보낸다.
2. PersonDetail.java에서 넘어온 seq값을 가지고 select where 을 돌려서 나오는 회원정보를 DTO에 담는다.
3. 담겨진 DTO를 다시 personDetail.jsp로 보낸다.
4. personDetail.jsp에서 내정보 수정하기 버튼을 누르면 seq값을 파라미터로 담아서 personUpdate(seq); 가 실행되게 한다.
5. personUpdate.jsp에서 기존 정보를 찍어주고, 정보수정하기 버튼을 누르면 submit되게 한다.
6. submit을 누르면 personUpdateEnd_09.java 로 넘어오니, 거기서 바껴진 회원정보들과 seq를 다시 DTO에 담아서 update SQL을 돌린다.


▶ 정상적으로 update가 됐다면 다시 select where로 수정된 그 사람의 정보를 표시해야 한다. URL은 GET방식으로 전송한다.
==> 이미 get으로 select where 하는 URL은 완성이 되어있다.
==> 그러니 그쪽으로 seq가 얼마인지를 담아서 보내주면 된다.
==> response.sendRedirect(String location);  ★암기! 이미 존재하는 URL로 다시 전송하는 방법이다.
==> location에는 URL을 적는다.

★ response.sendRedirect(location); 을 했으면 반드시 return;을 적어서 아래로 내려가서 dispatcher를 못 만나게 해줘야 한다!

====================================================================================

[ 회원정보 삭제하기 ]

이벤트는 personDetail.jsp에서 삭제하기 버튼을 클릭하면(onclick) 발생하게 한다.

"정말로 삭제하겠습니까?" 라는 메시지를 띄워야 하는데 확인 또는 취소버튼이 있는 팝업메시지는 alert가 아닌, confirm이다.

confirm은 리턴타입이 boolean 값이다. 

삭제도 POST방식을 해야한다. ==> 왜냐하면 GET방식으로 하면 외부에서 임의로 회원을 삭제시킬 수 있기 때문이다.

삭제버튼을 누르면 회원명과 회원번호를 넘겨야 한다.

<form name="delFrm">
   <input type="hidden" name="seq" value="${psdto.seq}" />
   <input type="hidden" name="name" value="${psdto.name}" />
</form>

그래서 deletePerson( ) 함수는 delFrm을 submit 시키면 된다.

function deletePerson() {
		
   var bool = confirm("정말로 삭제하시겠습니까?");
   console.log("확인용 bool => " + bool);
   // 확인용 bool => true - 확인버튼
   // 확인용 bool => false - 취소버튼
		
   if(bool) {
     var frm = document.delFrm;
			
     frm.action = "personDelete.do";
     frm.method = "POST";
     frm.submit();
   }		
}// end of function deletePerson()---------------------------------


personDelete_10.java 서블릿 생성하기

DAO에는 seq만 넘겨도 삭제할 수 있다.

if(n==1) 로 delete를 성공했으면, view페이지로 넘겨서 회원번호와 이름만 찍어주면 된다.
==> ~번 ~님의 회원정보를 삭제했습니다. 메시지는 String 변수에 담아서 request 영역에 담아서 view 페이지로 넘긴다.

▶ forward와 sendRedirect

이미 만든 페이지로 보낼때는 response.sendRedirect,
새로 만든 페이지로 보낼때는 forward

★ forward는 URL 주소가 안 바뀌고, request와 response 객체를 공유한다.
★ sendRedirect는 URL 주소가 바뀌고, request와 reponse 객체 공유 X

====================================================================================

[ Ajax ]

전체로딩이 아닌 부분로딩을 시키는 것이다.
==> 리소스양 효율적으로 

Asynchronous JavaScript and XML
이름만 보면 알 수 있듯이 '비동기 방식의 자바스크립트와 XML' 로서,
Asynchronous JavaScript + XML 인 것이다.

DB에서 읽어온 파일을 XML로 바꾸는 방식(데이터 포맷방법)보다는, JSON을 더 많이 사용한다.
==> 더 쉬움

DB는 종류가 오라클외에도 많이 있다.
==> 오라클, MY-SQL, MS-SQL 등...

회사마다 사용하는 DB는 다른데 개발자는 모든 DB에 대해서 다 알아야하는건가? 
==> 아니다. 어떤 DB이든지 select, insert 등 되어진 정보를 통일해서 xml로 바꾸는게 Ajax이다.
==> 그러므로 XML, JSON만 공부하면 어떤 DB를 사용하든지 응용 시킬 수 있다.


이름만 보면 알 수 있듯이 '비동기 방식의 자바스크립트와 XML' 로서 Asynchronous JavaScript + XML 인 것이다.
한마디로 말하면, Ajax 란? Client 와 Server 간에 XML 데이터를 JavaScript 를 사용하여 비동기 통신으로 주고 받는 기술이다.
하지만 요즘에는 데이터 전송을 위한 데이터 포맷방법으로 XML 을 사용하기 보다는 JSON 을 더 많이 사용한다.
참고로 HTML은 데이터 표현을 위한 포맷방법이다.
그리고, 비동기식이란 어떤 하나의 웹페이지에서 여러가지 서로 다른 다양한 일처리가 개별적으로 발생한다는 뜻으로서, 
어떤 하나의 웹페이지에서 서버와 통신하는 그 일처리가 발생하는 동안 일처리가 마무리 되기전에 또 다른 작업을 할 수 있다는 의미이다.

==> 자바스크립트를 통해서 서버에 데이터를 비동기 방식으로 요청하는 것이다.
==> 비동기 방식이란? 웹페이지를 리로드하지 않고 데이터를 불러오는 방식



====================================================================================

1. XML

▶ 메인페이지 구성

상단 - carousel (광고 이미지) - 테이블 1 DB
중단 좌측 - 기사 목록 - 테이블 2 DB
중단 우측 - 기사 내용

▶ 메인페이지가 필요 -- 서블릿 생성(MainAction.java)

URL: http://localhost:9090/JSPServletBegin/ajaxstudy/xmltestMain.do

들어오면 main.jsp(View 단) 으로 forward 한다. (※ forward는 내용물은 달라지지만, URL 변경은 X)

※ .jsp랑 .html은 경로 앞에 / 나오면 IP주소 + 포트번호 생략
※ .java랑 .xml은 경로 앞에 / 나오면 IP주소 + 포트번호 + 컨텍스트패스명 생략

▶ carousel은 이미지가 많으면 많을수록 반복해서 carousel 양을 늘려야 한다. (반복문으로 DB에서 이미지파일명 불러와서 찍어야 함)
★ CSS, 이미지파일 등은 항상 WEB-INF 폴더에 두면 작동을 안하니 WebContent 폴더 밑에 둬야 한다.

그동안 배워온대로 한다면 URL 치고 들어오면 doGet( )에서 DAO로 보내서 이미지 파일명들을 DB에서 가져와서 request 영역에 저장시켜서 jsp로 보내서 출력하게 할 것이다.
==> 허나 이번에는 Ajax를 사용해서 처리해볼 것이다.

▶ 문서가 로딩되어지면 carousel을 뿌릴 함수를 만든다. ==> func_imgList();

- MainAction.java는 단지 main.jsp로 forward만 시킨다.
- 전체는 main.jsp인데, 그 안에있는 carousel과 기사제목은 DB의 테이블이 서로 다르다.
  ==> 광고용 테이블 / 기사 제목 테이블 / 기사 내용 테이블

-------------------------------------------------------------------------------------------------------------------------------------
[ Ajax 문법 ]

$.ajax({url:"",
        type:"get",
        dataType:"xml",
        async:true,
        success:function(data){},
        error:function(){} 
        });

★ ajax에서는 method 가 아닌 type에 get/post를 적는다. (※ 생략하면 get 임. type:"post", 주의할 것은 method 가 아니라 type 이라는 것임!!)
- dataType:"xml" 또는 "json"
- 비동기면 async:true, 동기면 async:false (※ 기본은 비동기)
- success에는 성공적으로 데이터를 읽어왔으면 콜백함수 호출
- error에는 실패했으면 호출할 콜백함수를 쓴다.
-------------------------------------------------------------------------------------------------------------------------------------

[ carousel 구현하기 ]

1. 문서가 로드되면 func_imgList(); 함수 호출
2. 서블릿에서는 이미지파일이 저장된 DB에서 이미지 파일명 가져옴
 2-1. DAO가 필요함 (chap06.ajaxstudy.model 패키지)
 2-2. 이미 들어가져있는 파일명들이 있으니, DTO는 필요없음 / Map으로 있는 애들 가져오면 됨
 2-3. List<Map<String, String>> --> Map에는 사진마다 이미지 번호, 파일명이 들어간다.

       Map<String, String> map = new HashMap<>();
       map.put("imgno", rs.getString(1));
       map.put("imgfilename", rs.getString(2));
				
       imgList.add(map);

====================================================================================

09월 13일 오후수업

3. 뷰 페이지가 이제 List 를 XML로 바꿔줘야 한다.
==> DAO에서 select 해온 것을 이제 .jsp파일로 보내준다.
==> .jsp 파일을 만들때 html 5가 아니라 xhtml로 만들어야 한다.
==> <?xml version="1.0" encoding="${encoding}" ?> 이 말이 들어가야 xhtml임

※ XML의 tag 이름은 개발자 마음대로 만든다.

※ forEach에서 설정한 변수에는 배열이나 List의 하나하나의 요소가 들어간다.
그게 DTO라면 getter 다음의 name을 쓰면 되지만, 요소가 Map이라면 get("키값")이 아니라 그냥 키값만 쓴다.
(예시) imgMap.imgno, imgMap.imgfilename

★ trimDirectiveWhitespaces="true" 을 <% page %>에 쓰면 trimDirectiveWhitespaces="true" 을 해줌으로써 웹브라우저에서 소스보기시 공백줄을 제거해주는 것이다.
==> 얘를 해야 :root 등으로 태그 찾기가 쉬워짐


이제 출력해온 이미지 파일명을 $.ajax의 성공 콜백함수에 사용해서 carousel 을 나타낸다.
==> success 의 function(xml) 에서 파라미터인 xml은 다음과 같다.
==> Xml_imgListAction.java 서블릿 호출 --> xml_imgList.jsp로 포워드 --> jsp 파일의 결과물이 xml 파라미터로 들어감

==> $(xml).find(":root"); 은 넘겨받은 결과물 XML 에서 최상위 root 엘리먼트를 찾아온다.

==> 이제 DB에서 이미지 파일(행) 갯수만큼 들어가니깐 광고를 추가하거나, 삭제해도 알아서 carousel 이 늘어날 것이다.


carousel은 <div id="imgList"></div> 사이에 넣는다.

====================================================================================

[ 기사 제목 / 내용 구현하기 ]

▶ 기사 제목 테이블의 SEQ를 기사 내용 테이블에서 FK로 가져다가 쓴다.

▶ 기사 제목 테이블 : seqtitleno, title, registerday 
▶ 기사 내용 테이블 : fk_seqtitleno, newscontents


▶ 기사제목 입력에 입력한 내용은 news 테이블에 넣고, 기사내용 입력에 입력한 내용은 news content 테이블에 넣는다.

▶ <div id="newsTitleList"></div> 사이에 기사제목들을 넣어준다.
▶ <div id="newsContent"></div> 사이에 기사내용을 넣어준다.


★ 비동기와 동기란?

예시: 가게에 대기줄이 엄청 긴데, 그 대기줄이 사라질 때까지 쭉 기다릴 것이냐?(동기) 아니면 진동벨을 받고 내 차례가 될 때까지 딴 일을 하다가 와서 들어갈 것인가?(비동기)

▶ 만약에 나중에 가져와야할 데이터베이스가 양이 무수히 많다면 가져오는데도 시간이 지체가 된다.
(자기 로컬PC라면 시간이 적게 걸리지만, 원격지에서 데이터를 가져온다면 시간이 지체된다.)
==> 데이터베이스를 다 얻어와야만 다음 작업을 이뤄질텐데 동기처리이면(async:false) 정보를 다 얻어올때까지 기다린 다음에 이후에 작업을 시작한다.
==> 만약 비동기처리(async:true -- 기본값임)이면 데이터베이스가 올 때까지 다음 업무(이후에 기술된 또 다른 함수)를 한다.
※ 지도만큼은 비동기처리 해야한다.


기사같은 경우는 읽기(select)와 쓰기(insert)도 해야한다.
그래서 신문기사용 DTO를 만든다.
** DTO == VO (Value Object)
==> NewsTitleVO.java

DAO에서 이제 List<NewsTitleVO> newTitleList = dao.newsTitleList(); 이렇게 해서 정보를 담아온다.


▶ tr 누르면 이벤트처리하기 
$("tr.newstitle") 얘는 스크립트로 기술한 것이지, 바디태그에 기술한게 아니여서 그냥 선택자를 잡으면 이벤트가 작동할때도 있고 안 할 때도 있다.
==> $(document).on("click","tr.newstitle",function(){}); 로 잡는다.

▶ 기사제목을 클릭하면 해당 기사의 seq를 따와서 --> 옆에는 그 seq를 where 절에 넣어서 기사내용을 검색하고 --> 그걸 옆에 섹션에 띄워준다.

==> $target.parent().find("td:first-child").text() 
==> 행 아무곳이나 선택해도 seq가 있는 td만 딱 집어서 seq를 뽑아온다.

	
