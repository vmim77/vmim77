09월 16일 오전수업

[ MVC ]

String props = config.getInitParameter("propertyConfig");
==> Command.properites의 파일경로가 나온다.

FileInputStream fis = new FileInputStream(props); 
==> 해당 파일에서 내용물을 가져오기 위해서 사용하는 객체이다.

Properties pr = new Properites( ); 
- Properties 는 Colletion 중 HashMap 계열중의 하나로써
- "key", "value"으로 이루어져 있는것이다.
- 그런데 중요한 것은 Properties는 key도 String 타입이고, value도 String 타입만 가능하다는 것이다.
- key는 중복을 허락하지 않는다. value 값을 얻어오기 위해서는 key 값만 알면 된다.

pr.load(fis);
==> load( )는 fis 객체를 이용하여 해당 파일의 내용물을 프로퍼티스에 로드시킨다.
==> = 을 기준으로 왼쪽은 key, 오른쪽은 value로 간주한다.

Enumeration<Object> en = pr.keys( );
==> 해당 파일의 내용물에서 key를 모두 en 객체에 넣는다.

en.hasMoreElements( ) 는 en에 다음 내용물이 있나없나 여부를 확인한다.
en.nextElement( ) 는 내용물을 가져온다.

pr.getProperty(key);
==> 프로퍼티스에서 해당 키값의 value를 가져온다.

★ init 메소드는 WAS가 구동되고 딱 1번만 실행되며, 주로 환경설정을 잡아주는데 사용한다.

▶ 즉, 우리는 앞으로 WAS가 구동되면 init를 이용해서 우리가 만들어놓은 URL 패턴들을 WAS에 등록시켜 각 패턴마다 실행되는 일반클래스를 설정할 것이다.


기본적인 객체생성법 : new IndexController( );
==> 우리가 가지고 있는 URL의 갯수가 엄청 많으며, 클래스파일도 많을텐데 이렇게 매번 객체생성을하면 번거롭다.

▶ 그래서 명령어로 객체생성을 하게한다.   Class<?> cls = Class.forName(className);
==> 리턴타입은 클래스이다. String 형의 클래스명을 치면 클래스가 만들어진다.
==> Class<?> 의 의미는 어떤 클래스가 올지 모르니 Object, 아무거나를 의미한다.
==> <?> 은 generic 인데 어떤 클래스 타입인지는 모르지만 하여튼 클래스 타입이 들어온다는 뜻이다.
==> ClassNotFoundException 을 유발한다. --> 실제 그런 이름의 클래스가 없을 수도 있어서 생긴다.
==> Command.properties 에는 적었지만, 실제로 클래스를 안 만든 경우이다.


▶ Constructor<?> constrt = cls.getDeclaredConstructor( ); 는 해당 클래스의 생성자를 만들어준다.
==> 타입이 뭔줄 모르니 제네릭 <?>을 준다.

▶ Object obj = constrt.newInstance(); 는 인스턴스 생성이다. 
==> IndexController idx = new IndexController( ); 와 같다. 
==> 타입이 뭔지 알 수 없으니 Object로 리턴을 받는다.


▶ 모든 클래스들은 Object를 상속받는 것을 이용하여 toString( )을 하면 해당 객체의 메모리주소를 주는데, 이것을 Override하여서 위의 명령어로 객체가 만들어지는지 확인한다.

@Override
public String toString() {
   return "@@@ 클래스 MainController 의 인스턴스 메소드 toString() 호출됨 @@@";
}
==> 객체.toString( )과 객체는 똑같다. toString( )은 생략 가능


생성되어진 객체들을 어딘가에 저장해서 필요할때마다 꺼내서 써야 한다.
==> private Map<String, Object> cmdMap = new HashMap<>( );
==> 이 맵에 이제 생성되어진 객체들을 담아준다.
==> 최상위 부모클래스는 자식클래스를 다 받아줄 수 있으니(다형성), 해당 맵은 모든 객체들을 받아줄 수 있다.
-------------------------------------------------------------------------------------------------------------------------------------
★ 다형성이란?
1.여러가지 형태를 가질 수 있는 것.
2. 하나의 메소드나 클래스가 있을 떄 이것들이 다양한 방법으로 동작하는 것. 대표적으로 오버로딩,오버라이딩이 있다.
3. 하나의 참조변수로 여러 타입의 객체를 참조할 수 있는 것.

즉, 조상타입의 참조변수로 자손타입(상속관계)의 객체를 다룰 수 있는 것이 다형성의 기본 개념이다.

주의점) 조상타입의 참조변수로 자손타입의 인스턴스를 참조할 수 있지만
반대로 자손타입의 참조변수로, 조상타입의 인스턴스를 참조할 수는 없다.
-------------------------------------------------------------------------------------------------------------------------------------
▶ cmdMap.put(key, obj); 
==> 이렇게하면 properties에 있는 key 를 해당 object 의 HashMap key 값으로 쓰는 것이다.
==> cmdMap 에서 키값으로 Command.properties 파일에 저장되어진 URL(/index.up, /main.up) 을 주면
==> cmdMap 에서 해당 클래스에 대한 객체(인스턴스)를 얻어오도록 하기 위함이다.



▶ 이제 사용자가 URL을 치고 들어오면 거기서 IP주소/포트번호/컨텍스트패스명을 제외한 URL을 가져와서 해당 URL에 상응하는 클래스를 불러들이도록 할 것이다.

http://localhost:9090/MyMVC/member/idDuplicateCheck.up?userid=leess 와 같이 입력되었더라면
/member/idDuplicateCheck.up 의 상응하는 클래스를 호출한다.

▶ request.getRequestURL( ); 의 리턴타입은 스트링버퍼, 이 메소드를 치면 요청을 한 URL을 가져와준다.
==> request.getRequestURL( ).toString( ); 을 하면 http://localhost:9090/MyMVC/member/idDuplicateCheck.up 이 나온다.

▶ 포트번호 다음부터 컨텍스트패스명/URL 만 가져오는 것이 바로 getRequestURI( ) 이다.
==> /MyMVC/member/idDuplicateCheck.up만 가져온다. 리턴타입은 스트링

~~~ 확인용 url => http://localhost:9090/MyMVC/member/idDuplicateCheck.up
~~~ 확인용 uri => /MyMVC/member/idDuplicateCheck.up

▶ uri에서 컨텍스트패스명을 빼는 방법은?
uri.substring(request.getContextPath().length());
이렇게 하면 컨텍스트패스의 글자 길이만큼 이후에 글자를 모두 뽑아오는 것이다.
==> /member/idDuplicateCheck.up
==> 얘가 바로 HashMap에 담아둔 객체를 빼올 수 있는 key가 된다.

~~~ 확인용 key => /index.up
~~~ 확인용 key => /main.up

이렇게하면 무엇을 요청했는지 알 수 있으니 --> HashMap에 가져가서 그 객체를 딱 꺼내와준다.
==> /index.up 을 불렀으면 IndexController 클래스를 작동시킨다.


★ 프론트 컨트롤러 서블릿에서 WAS가 구동후 init로 command.properties에 내용물을 다 가져와서 걔네 각각을 클래스화 -> 객체화 시켜서 맵에 다 넣어놨음을 기억한다.
==> 마찬가지로 command.properties에 올라와지는 모든 클래스는 웹이 작동되어지게끔 강제화시켜야 한다.

무조건 해야한다 --> 인터페이스 --> 인터페이스를 구현하는 애는 인터페이스에 적힌 걸 반드시 만들어야 함(추상메소드)
==> InterCommand 생성

간편하게 하기 위해서 부모클래스 하나를 생성 AbstractController.java
==> public abstract class AbstractController implements InterCommand
==> 얘는 Command.properties에 올라올 모든 클래스의 부모 클래스이다.
==> 자식클래스들끼리 메소드를 만드는 방법이 다 다르니(기능들이 다르니깐, 누구는 장바구니, 누구는 결제) 추상클래스로 만들어서 자식 클래스에게 다 던져준다.

public class MainController extends AbstractController 
public class IndexController extends AbstractController

자식클래스들에게 웹기능을 해주는 메소드(execute)를 다 던져준 것이다.
==> 근데 얘네는 일반클래스이지 서블릿이 아니여서 웹기능을 할 수 없음
==> 서블릿의 doGet이나 doPost로 해야함
==> 그래서 서블릿은 1개인데, 그 서블릿의 doGet( ) 에서 해당 URL에 맞는 uri 키를 맵에 넣어서 객체를 꺼내오면 웹기능 메소드가 불러와진다. 이를 이용해서 구현한다.

▶ 즉 HashMap에 /index.up을 치면 걔의 객체가 나오니깐 IndexController.java의 execute( ) 메소드를 사용할 수 있다.
==> 맵에 저장시킬때 Object 형태로 넣었으니, 꺼내올 땐 casting이 필요함
==> casting 안하면 .execute( ) 사용불가
==> 근데 우리는 AbstractController를 모든 클래스들의 부모로 했으니, 다형성을 이용하면 된다.

★ 해쉬맵에는 IndexController, MainController이지만, 다형성에 의해서 자식클래스 객체를 부모클래스 변수로 받을 수 있다.

▶ 받기는 부모클래스타입 변수로 받았지만, 자식클래스에서 재정의한 메소드가 실행될 것이다.
==> (AbstractController) cmdMap.get(key);
==> 타입은 부모클래스지만, 실제 구현된 것들은 자식클래스에서 구현한 것들이 실행될 것이다.


지금 우리가 하고있는 건 MVC에서 C부분이다.
==> View 단 페이지로 넘기고(View), DB에서 정보를 가져오고(Model) 는 아직 안했다.


▶ 이제 각 클래스들의 execute( ) 에서는 자기의 기능이 구현된 View 단 페이지로 가라고 알려주게 한다.
==> 클래스들은 서블릿이 아니니깐 각각의 execute에서는 view 페이지에 대한 path만 주고, 프론트 컨트롤러에서 각 클래스들의 view 단 페이지 path만 받아와서 실행되게 한다.

action.execute(request, response);
				
String viewPage = "";
				
RequestDispatcher dispatcher = request.getRequestDispatcher(viewPage);

▶ 클래스들은 execute( )로 view page path만 정해주고, 서블릿인 프론트컨트롤러에서 dispatcher로 forward해준다.
String viewPage = action.getViewPage(); // action들만 부모클래스의 setter & getter를 상속받으니 쓸 수 있다.
// 사용자가 /main.up을 치면 action은 MainController 객체가 되고,
// 그러면 MainController에 있는 execute()가 실행되서,
// getViewPage();를 하면 걔의 viewpage 주소가 나온다.

★ 이렇게 하면 서블릿은 1개뿐인데, 마치 URL 패턴들에게 맞는 각각의 서블릿을 만들어준것과 똑같이 동작됨
==> 없는 URL을 치면 command.properties에 없는 패턴이니 객체도 안 만들어지고, execute도 안됨

▶ 작동 순서
WAS 구동 --> 서블릿에서 init로 각 URL패턴을 프로퍼티스에 넣어줌 --> 사용자가 URL 입력 --> 서블릿의 doGet( )에 와서 그 url 패턴에서 키값을 뽑아오고 --> 키값으로 그 URL에 맞는 클래스의 객체를 가져옴(★객체는 init에서 만들어준다) --> 그리고 객체.execute( ); 를 돌려서 view 페이지 path를 받아와줌 --> 서블릿에서 dispatcher로 그 URL에 맞는 view page로 보내줌 

★ dispatcher는 포워드라 주소변경이 안되는데(걍 내용물만 보여줌), sendRedirect는 주소를 아예 옮겨줌(이미 만들어놓은 곳으로)
★ 포워드랑 sendRedirect는 같이 못 쓴다. 따로따로 써야함
==> 포워드는 결과물만 보여주면 되는거라 .jsp 파일의 경로를 쓰고
==> 리다이렉트는 페이지 이동이니 URL 주소를 줘야 함



그래서 부모클래스에 구분용으로 private boolean isRedirect = false; 을 만든다.
// isRedirect 변수의 값이 false 이라면 view단 페이지(.jsp)로  forward 방법(dispatcher)으로 이동시키겠다. 
// isRedirect 변수의 값이 true 이라면 sendRedirect 로 페이지이동을 시키겠다.

private String viewPage;
// viewPage 는 isRedirect 값이 false 이라면 view단 페이지(.jsp)의 경로명 이고,
// isRedirect 값이 true 이라면 이동해야할 페이지 URL 주소 이다.



▶ 시나리오
index.up을 치고 들어오면 포워드로 보내주고, main.up을 치면 샌드리다이렉트로 다시 index.up으로 보냄
==> main.up은 구페이지여서 신페이지인 index.up으로 보내주는 상황

action.execute(request, response);			
boolean isRedirect = action.isRedirect();
						
String viewPage = action.getViewPage(); 
							
if(!isRedirect) {
RequestDispatcher dispatcher = request.getRequestDispatcher(viewPage);
dispatcher.forward(request, response);
}
				
else {
response.sendRedirect(viewPage);
}


서블릿이 많으면 필터를 다 넣어줘야 하는데, 서블릿이 1개면 굳이 필터를 사용할 필요없이 걍 1개뿐인 서블릿에 인코딩 넣어주 면 됨
==> 전에는 서블릿을 필요할때마다 만들어야했기 때문에, 모든 URL패턴에 다 반응하는 필터를 만든 것이였음
==> 이번에는 서블릿 1개뿐이니 굳이 만들 필요X

▶ 앞으로 클래스 만들땐 항상 부모클래스가 common.controller.AbstractController 이여야 한다.
==> 그래야 자기들에 맞는 execute( ) 메소드를 재정의 시키도록 할 수 있다.(추상메소드 구현-인터페이스)

★ 각 execute( )에서 DAO메소드로 DB에서 정보를 꺼내와서 request 영역에 저장했어도, 밖의 FrontController에서 쓸 수 있는 것은 서블릿이 FrontController 뿐이여서다. 
==> 오해하면 안되는게 서블릿은 FrontController뿐이고, 나머지는 모두 일반클래스파일이다.
==> 그래서 일반클래스파일에서 request.setAttribute( )를 했다고 해도 그 일반클래스파일에다 한게 아니라, FrontController의 request 영역에 한 것이다.
==> 그래서 FrontController에서만 dispatcher를 해주니깐 모든 View 페이지에서 request 영역에 저장한 값을 꺼내올 수 있는 것이다.


▶ 그 전에 한 서블릿 방식과 뭐가 다르냐?
==> 유지보수가 훨씬 좋다.
==> 그전까지 배운 서블릿이 필요할때마다 만드는 방식은, URL을 달리하면 그 URL에 호응하는 서블릿을 다 찾아봐야 알 수 있었음
==> 나중에는 URL이 수십개가 될텐데, 어떤 URL이 어떤 자바클래스파일에 호응하는지 알려면 전부 다 까봐야 함

▶  근데 properties 방식은, Command.properties에 목차처럼 URL에 호응하는 클래스파일 목록들이 목차처럼 나와져 있으니 유지보수가 편함

▶ 진짜 전통적인 방법은 서블릿 파일로 만드는게 아니라, 일반클래스로 만들고 배치서술사에 하나하나 서술하는 거임
★ WAS가 구동되어질때 맨 처음에 읽어들이는게 web.xml(배치서술자)이다.


====================================================================================

[ 탬플릿 ]

header_origin.jsp --> 원본 header 탬플릿
footer_origin.jsp --> 원본 footer 탬플릿


[ 페이지 구성 ]

index.up - 시작페이지
main.up - index.up으로 넘겨버림

====================================================================================

09월 16일 오후수업 

[ 쇼핑몰 회원가입 구현하기 ]

▶ 회원DB 테이블 생성
- 유저생성하기 
create user mymvc_user identified by cclass;
grant connect, resource, create view, unlimited tablespace to mymvc_user;

▶ 이제부터 싱글톤기법의 Connection을 사용 안할 것이다.
==> 왜냐하면 사용자 수가 많아지면 싱글톤기법은 부하가 너무 심해서 사용하기 부적합함
==> 동시접속자가 많은데, 싱글톤으로 Connection을 하면 속도가 너무 느리다.
==> 얘는 테스트할때 사용하는게 좋음
★ 싱글톤 복습하기

▶ 이제부터 DBCP(DB커넥션풀)를 사용할 것이다.
- 커넥션은 DB에 연결하기 위해 사용되어지는 객체이다.
(수영장에서 튜브를 빌려다 쓰는 것과 비슷한 개념이다.)

==> 커넥션 풀에 커넥션을 미리 많이 만들어 놓는다(예시. 튜브)
==> DB 사용자가 풀에서 한 개의 커넥션을 쓰고 업무가 끝나면 다시 반납을 한다.
==> 톰캣에서도 커넥션 풀 기법을 제공함

[ 사용방법 ]

http://tomcat.apache.org/tomcat-8.5-doc/jndi-datasource-examples-howto.html#Oracle_8i,_9i_&_10g 에 방문하여 커넥션풀 설정법을 확인한다.
- 해당 사이트에서 1, 2, 3번을 세팅해주면 톰캣이 알아서 해준다.

★ 세팅을 할땐 WAS는 꺼야한다.

1. WAS 목록에서 톰캣서버를 삭제한다.

2. 톰캣폴더에가서 conn - context.xml에 DBCP 구문을 추가한다.
- maxTotal="20" 은 DBCP의 커넥션 최대 개수이다.
==> 커넥션 최대 개수를 많이 잡는다고 무조건 좋은 것은 아니다. 메모리를 많이 잡아먹는다.

- maxIdle은 평소에는 사용되지 않고 비축해놓는 커넥션 개수이다.
==> 20개의 커넥션을 만들고 다 쓰는게 아니라, 10개만 풀어놓고 10개는 비상용으로 비축해놨다가 갯수가 딸리면 풀어버린다.

- maxWaitMillis는 최대대기시간이다.
==> -1은 커넥션을 받을 때까지 계속 기다리겠다는 뜻이다.
==> 단위는 밀리초로 1000을 주면 1초 기다리다가 커넥션이 안 잡히면 접속이 죽어버리는 것이다.

3. web.xml 수정하기
- 커넥션풀 구문을 추가해준다.
- 주의할 것은 res-ref-name이 context.xml에서 설정한 Resource name과 똑같아야 한다. 

4. 톰캣서버 재생성하기
- window - preferences - server - reuntime Enviroments - 아파치 경로 확인하기

5. DAO에서 DBCP를 사용할 땐 다음과 같이 해야한다.

Context initContext = new InitialContext();
Context envContext  = (Context)initContext.lookup("java:/comp/env");
DataSource ds = (DataSource)envContext.lookup("jdbc/myoracle");
Connection conn = ds.getConnection();

★ context.xml 과 web.xml 그리고 DataSource ds 을 만들 때 DBCP의 이름을 jdbc/myoracle로 세곳에서 모두 다 똑같아야 한다.

====================================================================================

[ 모델단 만들기 ]

MVC
M - DB을 담당한다.
C - Controller는 위에서 만듦
V - View는 .JSP

▶ myshop.model 패키지 생성

▶ DAO 생성 
private DataSource ds; 필드 생성 --> import javax.sql.DataSource;
- 호환성을 위해 tomcat이 아닌 javax 껄 import
- DataSource ds 는 아파치톰캣이 제공하는 DBCP(DB Connection Pool) 이다.

private DataSource ds;
private Connection conn;
private PreparedStatement pstmt;
private ResultSet rs;

▶ 그리고 기본생성자를 만들고 다음과 같이 한다.

public ProductDAO() {
   Context initContext = new InitialContext();
   Context envContext  = (Context)initContext.lookup("java:/comp/env");
   DataSource ds = (DataSource)envContext.lookup("jdbc/myoracle");
   Connection conn = ds.getConnection();
}
==> NamingException 처리 해줘야 한다.

★ WAS 구동 후 web.xml 확인하고 그후에는 DBCP의 설정을 확인한다. (context.xml에 가서 참조타입과 참조명 등을 확인한다.)
==> context.xml에서 해당 참조명의 DBCP의 세팅값을 확인하는데 오라클서버 주소와 오라클유저명과 암호를 확인함
그리고 DAO에서는 DataSource (==DBCP) 인스턴스 변수를 선언하고 어떤 DBPC를 쓰는지 참조명을 적어줘서 사용한다.
==> 그럼 context.xml에서 해당 참조명의 DBCP를 찾아옴

즉, NamingException은 해당 이름의 DBCP를 찾으러 갔는데 없으면 생기는 오류이다.

====================================================================================

[ carousel 추가하기 ]

// 메인페이지에 보여지는 상품이미지파일명을 모두 조회(select)하는 메소드 

▶ DAO 메소드에서 커넥션 잡는 법
conn = ds.getConnection();
==> 사용할 메소드에서 커넥션을 불러오고, 끝나면 finally 에서 close(); 로 커넥션을 반납한다.

▶ index 페이지 클래스파일에서 carousel 이미지 가져오는 dao 메소드 생성하기 
==> 이미지번호, 이미지파일명, 이미지설명 

▶ index.jsp에서 carousel 태그 넣기 

▶ header.jsp에 이미 jquery, bootstrap이 다 있으니, index.jsp에서는 코딩만 해야 한다.


★ 변수명은 항상 첫글자는 소문자, 클래스만 첫글자가 대문자이다. 팀프로젝트에서 혼선을 방지하기 위해서 유의할 것

★★★

[ 질문 ]
FrontController.java 에서 action.execute(request, response);  으로 request를 일반클래스(IndexController.java 등)에 request 객체를 넘겨줬으니, request 영역이 서로 공유되어서 해당 영역에 저장한 값을 공유해서 쓸 수 있는 것인가?

[ 답변 ]
==> request 기능만 쓰려고 파라미터로 넘긴 것이다. (setAttribute 같은)
==> 일반 자바클래스에서 setAttribute(name, value); 를 했어도 frontController.java(서블릿)의 request 영역에 넣은것이다.
==> IndexController.java에서 setAttribute(name, value); 를 했어도 실제로는 서블릿이 1개이므로 FrontController의 request 영역에 넣은 것이다.
==> IndexController.java은 서블릿이 아닌 그냥 일반자바클래스임 

★★★

====================================================================================

[ DB 암호화 & 복호화 ]

▶ DB에서 password를 암호화시켜서 개발자 및 관리자도 확인할 수 없게 해야한다.

▶ 회원테이블 만들기
userid             varchar2(40)   not null    -- 회원아이디
pwd                varchar2(200)  not null  -- 비밀번호 (SHA-256 암호화 대상)
name               varchar2(30)   not null  -- 회원명
email              varchar2(200)  not null  -- 이메일 (AES-256 암호화/복호화 대상)
mobile             varchar2(200)            -- 연락처 (AES-256 암호화/복호화 대상) 
postcode           varchar2(5)              -- 우편번호
address            varchar2(200)            -- 주소
detailaddress      varchar2(200)            -- 상세주소
extraaddress       varchar2(200)            -- 참고항목
gender             varchar2(1)              -- 성별   남자:1  / 여자:2
birthday           varchar2(10)             -- 생년월일   
coin               number default 0         -- 코인액
point              number default 0         -- 포인트 
registerday        date default sysdate     -- 가입일자 
lastpwdchangedate  date default sysdate     -- 마지막으로 암호를 변경한 날짜  
status             number(1) default 1 not null     -- 회원탈퇴유무   1: 사용가능(가입중) / 0:사용불능(탈퇴) 
idle               number(1) default 0 not null     -- 휴면유무      0 : 활동중  /  1 : 휴면중



▶ 암호는 한 번 암호화하고 복호화하면 안 된다. 
==> 그래서 SHA-256를 사용한다.
==> 단방향 암호화

▶ 이메일과 연락처는 암호화, 복호화가 가능해야 함
==> AES-256 사용
==> 이메일은 복호화해서 풀어야 한다. 왜냐하면 복호화해서 해당 회원에게 메일을 보내줘야 하니깐
==> 연락처도 문자보내기를 해야해서 

▶ 마지막으로 암호를 변경한 날짜를 이용하여 N개월 이상 암호를 변경 안하고 로그인을 하면 암호를 변경하라는 alert를 띄운다.

▶ 회원이 언제 로그인했는지를 알아야 한다.
==> 로그인을 하면 IP주소를 넣어서, 언제 어디서 로그인을 했는지 history를 작성한다.
==> tbl_loginhistory



1. 회원가입용 일반클래스 생성 
2. 회원가입용 view 페이지 생성 
3. 일반클래스에서 path 설정

(내일)

회원가입폼 만들기, 로그인 만들기

