10월 08일 수업


[ DB의 상품 보여주기 ]

페이징처리 방식은 더보기, 스크롤 방식이 있다.

1. 더보기 방식

ajax로 더보기 클릭시 추가적으로 상품리스트를 계속해서 불러오게 한다.

이벤트는 더보기 버튼을 클릭하면 발생한다.
==> 클릭시 DB에 가서 조회한 결과를 뿌려준다. (append)
==> 처음에는 몇 개정도 상품을 보여줘야한다.
==> 즉 문서가 로딩되면 더보기로 상품을 가져와주는 함수를 먼저 호출시켜야한다.

DB에선 rownum을 사용한다.
==> 실제 상품의 Maximun이 몇 개인지도 알아야 한다. (== totalPage)

*** HIT 상품 더보기 방식으로 페이징 처리 하기 ***

--- HIT 상품의 전체개수를 알아온다.
※ fk_snum은 1이 HTI, 2가 NEW , 3이 BEST이다.

select count(*)
from tbl_product
where fk_snum = '1';


SQL문 만들기

상품 / 카테고리 를 JOIN해서 가져와야한다.
==> 상품과 카테고리를 연결시키기 위해서 상품 테이블에 fk_cnum을 만들어놨다.

rownum = row_number( )는 똑같다. 마찬가지로 바로 where절에 쓸 수 없고, inline-view로 한번 감싸고 써야한다.
[ 오류 ]
ORA-00904: "RNO": invalid identifier
00904. 00000 -  "%s: invalid identifier"
*Cause:    
*Action:
1,045행, 5열에서 오류 발생

▶ 원래는 36까지만 상품들이 있지만, 40이라 적어도 범위 안에 들어오는 상품들만 보여준다.

displayHIT("1"); // 맨 처음 문서가 로딩된 것이니깐 1을 준다.

우리가 SQL문에 보내줘야할 것은 HIT, NEW, BEST 중 어떤 것인지와 rownum을 보내줘야 한다.

▶ 맨 마지막에 '더보기'는 더이상 보여줄 상품이 없으면 '처음으로'라고 바껴야한다.

★ JSON은 웹브라우저에 결과물을 표시하고(자바스크립트 객체모양으로), 그 출력된 결과값을 success 콜백함수의 파라미터(function(json){})로 넘겨받아서 사용한다.
==> URL의 Action이 마지막에 jsp로 결과물을 보내는데, 그러면 success 콜백함수에서는 jsp 출력된 값들이 파라미터인 json에 들어가진다.

▶ JSON에서 무언가를 받아왔으면서, 그것의 length가 0 이상이라면 반복문으로 아이템들을 하나씩 카드로 만들어준다.


▶ 더보기를 누르면 append로 계속해서 displayHIT(START) 함수를 호출해야한다.
==> START 값은 맨 처음 값에서 +8을 해서 불러와야함
==> append로 해야 아래에 쭉 이어서 나온다. html으로하면 덮어씌워져버림

더보기 버튼을 누르면 value 값을 설정해줘야한다.

처음에는 1~8이였으니, 여기서 더보기를 누르면 value를 9로 설정해줘야함

즉, ajax를 성공적으로 가져왔으면 버튼의 value를 다음 start 값으로 설정해주고, 더보기 버튼을 누르면 자신의 value 값을 start로 함수를 부르게 하면 된다.

==> $("button#btnMoreHIT").val( Number(start) + lenHIT );
// 더보기... 버튼의 value 값이  9  로 변경된다.
// 더보기... 버튼의 value 값이  17  로 변경된다.
// 더보기... 버튼의 value 값이  25  로 변경된다.

--------------------------------------------------------------------------------------

$("button#btnMoreHIT").click(function(){
   displayHIT($(this).val());
});

====================================================================================

※ 깃허브 팀원끼리 충돌방지하는 법

충돌 => 동일한 파일내에 동일한 라인에서 서로 다른 Push하면 충돌남

1. 패키지를 다르게 만든다.

member.model.psh ==> InterMemberDAO, MemberDAO
member.model.teamleader ==> InterMemberDAO, MemberDAO

2. 파일명을 다르게 한다.

member.model ==> InterMemberDAO_psh, MemberDAO_psh
member.model ==> InterMemberDAO_teamleader, MemberDAO_teamleader

3. 한 파일에 서로간의 섹션을 나눠둔다.


MemberDAO
////////////////////////////////////////////////////// 박성현
1
2
3
4
5
////////////////////////////////////////////////////// 팀장
7
8
9
10
11

=========================================================================

Web Github - Main branch

내용물: a

▶ 팀원들은 Web Github 프로젝트를 가져올때 모두 로컬 Main branch에 a라는 내용물이 담겨져 있다.
▶ 또한 이클립스의 자신들의 브랜치에도 a라는 내용물이 담겨져있다.

▶ 이제 로컬에서 자신의 브랜치에서 서로 개발을 한다.
D1: a, b 
D2: a, B
D3: a, 비

==> 그리고 자신의 Web에 있는 브랜치에 Push를 해서 백업을 해둔다.

Web Github - D1, D2, D3 branch

D1 branch: a + b
D2 branch: a + B
D3 branch: a + 비

▶ 그리고 자신의 로컬 메인브랜치에 병합을 시키면 다음과 같다.

D1's Main: a, b
D2's Main: a, B
D3's Main: a, 비

▶ 그리고 각 팀원들이 Web Github에 push를 하면 다음과 같아진다.

Web Github - Main branch

a, b, B, 비

▶ 이걸 다시 각각 팀원들이 pull을 하면 자신들의 로컬 메인브랜치도 다음과 같아진다.

D1's Main: a, b, B, 비
D2's Main: a, b, B, 비
D3's Main: a, b, B, 비


★ 개발은 자기들의 브랜치에서만 하는거고, 메인브랜치는 쌓아두는용도일뿐이다.

★ 만약 다른 팀원들꺼와 합쳐보고 싶다면 자기 로컬메인브랜치로 checkout 해서 파일을 복사하고 자기 로컬브랜치에 붙여넣기 하면 된다.

★ 팀원이 도와달라고하면 카톡으로만 파일을 받고, 다 도와줬다면 다시 카톡으로만 건네주고 팀원에게 받아온 파일은 지워둬야 충돌이 안 난다.

header.jsp 등 공용파일에서 오류가 많이 나니깐, 카톡으로 공유받아서 팀장이 정리해주고 다시 카톡으로 보내준다.