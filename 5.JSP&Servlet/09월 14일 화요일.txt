09월 14일 오전수업 

[ Ajax ]

웹페이지같은 경우에는 여러 정보가 혼합되어져있다. (ex. 네이버)
==> 날씨, 기사, 쇼핑몰 등등 

즉, 데이터를 담고 있는 테이블들이 서로 다 다르며, DB서버 또한 다르다.
(날씨 -- 기상청DB / 쇼핑몰 -- 쇼핑몰DB / 기사 -- 기사DB)

하지만 웹페이지의 개수는 1개이며, 모든 웹페이지들은 HTML 즉, DOM(Document Object Model ==> <태그>)으로 이루어져 있다.

태그들은 정보들로 이뤄져있다. ==> 날씨, 쇼핑몰, 뉴스, ......

table에 담겨진 정보들을 select하고, select 되어진 정보를 DOM 형태로 만든다. 
==> 정보들도 태그 속에 HTML 모양(태그모양)으로 들어와야 한다.

이런 일련의 과정에서 xml이 개발됐다. (HTML에서는 태그들마다 각각의 의미를 가지고 있는데, xml을 사용하면 우리가 마음대로 태그 이름을 정해서 사용할 수 있다.)

▶ select 되어진 정보를 태그모양으로 태그에 끼워 넣어줄때 사용하는게 바로 xml이다. (xml은 태그를 내 마음대로 이름을 정해서 쓸 수 있다.)
▶ 즉, 이렇게 xml로 감싸면 태그모양(DOM모양)으로 되어 있기 때문에 HTML로 간주되고, 자바스크립트로도 선택자로 잡을 수도 있다.

▶ select 되어진 정보가 태그모양으로 나와야 자바스크립트로 잡을 수 있는데, xml을 이용하면 태그 모양으로 만들 수 있는 것이다.
▶ 잡아서 그 정보를 읽어다가 HTML 문서에 삽입해주는 것이다. (ex. var arrPicture = $(rootElement).find("picture"); )

▶ 서로서로 다른 테이블의 정보를 읽어다가 동일한 웹페이지에 뿌려줘야 한다.
▶ 여러 정보를 뿌려줘야 한다면, 서로 다른 테이블들에 가서 정보를 가져와야 해서 URL이 서로 다르다.
==> A테이블에 가서 가져오라는 URL, B테이블에 가서 가져오라는 URL, ......

▶ 그러면 여러 테이블을 읽어다가 한 페이지(도화지)에 구역(div)을 나눠서 줘야 한다.
==> 이런 과정에서 나온게 바로 Ajax이다. 동기방식이라면 A, B, C 구역이 나눠져 있다 치면 A구역이 다 채워질때까지 B, C 구역은 기다리고만 있어야 한다. 허나, 비동기방식이라면 A 구역에 채울 정보의 양이 많다고 해서 B, C 구역이 쭉 기다리는 것이 아니라 A 구역이 정보를 받아오는 동안 B, C에서 다른 작업을 하는게 비동기식 처리이다.

====================================================================================

[ 뉴스 내용 가져오기 ]

func_newsContents(seqno); //얘가 이제 seq를 가지고 가서 기사 내용을 가져올 것이다.

또 다른 테이블에 가서 정보를 가져오라는 URL이 필요할 것이다. ==> 즉, Ajax가 하나 더 필요하다.

ajax로 파라미터 seq를 보낼땐? ajax에 data:{ }, 항목을 만들어서 넣어주면 된다.

$.ajax({
   url:"<%= ctxPath%>/ajaxstudy/xml_newsContents.do",
   // type:"get", 	                        // 생략하면 get 임. type:"post", 주의할 것은 method 가 아니라 type 이라는 것임!!
   data:{"seqno":seqno}		// 전송할 데이터, where절에 사용할 조건
   dataType:"xml",                          // dataType:"json"
   // async:false, 	                        // 동기처리(지도에서는 동기처리해야만 지도가 나옴.)면 생략해서는 안 된다. 
   // async:true, 	                        // 비동기처리(기본값)
   success:function(){},
   error:function(){}	
}); 


▶ data:{"seqno":seqno} 로 넘긴 데이터는 서블릿에서 getParameter("키값")을 쓰면 seqno가 나온다.
==> request.getParameter("seqno");

서블릿에서 dao.newsContents(seqno); // 얘의 주 목적은 기사 내용만 받아오는 것이 주 목적이다.

tring newscontents = dao.newsContents(seqno);
==> 특정 기사번호의 기사내용만 받아오면 되니깐 String 타입

▶ 처리순서!!
자바스크립트에서 문서로딩되면 함수호출(뉴스제목 클릭이벤트로 해당 seq를 따서 파라미터로 넘겨줌) --> ajax로 URL 호출 --> 서블릿에서 dao 메소드 실행시켜 테이블서 정보 얻어옴(따온 seq를 dao메소드에 파라미터로 넘겨서 select where) --> dao 메소드의 리턴값을 request 영역에 저장해서 XML용 .jsp로 넘긴다 --> XML에서 내용이 잘 찍혀져 나온 게 확인되면 ajax success 콜백함수에서 처리 

★ xml로 표시하는 view 단 페이지에는 trimDirectiveWhitespaces="true" 가 필수이다.
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8" trimDirectiveWhitespaces="true" %>

▶ 확인할 때는 ajax에 적은 URL로 들어가서 확인한다. ==> 그래야 디스패쳐로 포워드한 화면이 보여진다.

이제 xml에서 찍은 태그를 success 콜백함수에서 <div id="newsContent">에다가 .html( )로 넣으면 끝난다.

▶ 문서가 로딩될때 가장 최신 기사 내용이 뜨게 만드려면?

기사제목을 가져오는 콜백함수 func_newsTitleList( )에서,

if(index == 0) { 
   func_newsContents($(item).find("seqTitleno").text());	
}

를 넣는다. 

==> DAO로 DB에서 불러올때 기사번호를 내림차순 정렬해서 index 0번째 나오는 기사는 가장 최신의 기사이다.


====================================================================================

[ 기사 제목과 기사 내용 DB에 insert 하기 ]

▶ 기사제목 입력 input 에 입력한 값은 기사제목 테이블에, 기사내용 입력 input 에 입력한 값은 기사내용 테이블에 insert 하기

▶ 페이지 URL이 바뀌면 안된다. --> ajax

아이디가 btnSubmit인 버튼을 클릭하면 form 태그를 전송한다 

▶ 페이지의 이동없이 기사제목과 기사내용 부분이 부분적 로드된다. (추가된 내용들을 보여줌)

type:"POST", // 기사내용이 엄청 많다면 URL에 모두 못 담기때문에 GET으로 전송하면 안 된다.
==> 또한 제목과 내용을 공개하면 안되기 때문에 POST(보안성↑)

▶ 또한 읽어오는게 아니라, 보내만 주는 것이니(insert) dataType은 필요가 없다!

▶ 신규 기사로 쓸 입력 값을 넘겨줘야 한다.
data:{"title":$("input#title").val(),
       "newscontents":$("textarea#newscontents").val()},	 // 전송할 데이터


/ajaxstudy/xml_newsWrite.do 을 URL 패턴으로 가지는 Xml_newsWriteAction.java 서블릿 생성
==> insert 할거니깐 DAO 생성, InterAjaxDAO dao = new AjaxDAO( );
※ 기사제목과 내용에 대한 유효성 검사는 스킵

String title = request.getParameter("title"); // 기사제목
String newscontents = request.getParameter("newscontents"); // 기사내용물

▶ 기사제목과 기사내용물을 DAO로 보낼땐 Map을 사용한다.
==> 왜냐하면 나중에 Spring을 쓸 때는 Map으로 파라미터를 보내기 때문에 미리 익숙해질겸 쓴다.


▶ 기사번호 채번을 해야한다. (왜냐하면 기사제목 테이블에 써지는 기사번호를 그대로 가지고와서, 기사내용 테이블에도 써야하기 때문이다.)
==> 기사내용 테이블에서 기사번호는 Foreign key로 기사제목 테이블에 있는 기사번호를 써야한다.

// 시퀀스 값 채번해오기
String sql = " select seq_news_seqtitleno.nextval "
             + " from dual ";

pstmt = conn.prepareStatement(sql);
rs = pstmt.executeQuery();
			
rs.next();
			
int seqtitleno = rs.getInt(1); // 얘가 바로 시퀀스 값이다.

▶ insert를 다 했으면 이제 다시 기사제목과 기사내용을 select 하도록 함수호출을 해서 최신기사도 반영되도록 한다.

▶ 이제 success의 콜백함수에서는 func_newsTitleList(); 를 호출시켜서 최신기사 내용도 반영시킨다
==> func_newsTitleList(); 얘만 호출시켜도 알아서 가장 최신 기사제목을 클릭한 이벤트가 발생시키게 해서 기사내용도 나온다.

★ ajax를 사용하면 URL이 바뀌지 않고 작업을 할 수 있다. --> 부분로드
브라우저가 가지고있는 XMLHttpRequest 객체를 이용해서 전체 페이지를 새로 고치지 않고도 페이지의 일부만을 위한 데이터를 로드하는 기법

====================================================================================

[ json ]

XML과 결과물은 똑같은데, 더욱 쉽다.

처리는 자바스크립트, XML은 DB에서 받아온 정보를 자바스크립트가 잡아줄 수 있게 DOM형식으로 바꿔줌
==> 즉 XML 은 데이터포맷방식
==> JSON도 데이터포맷방식인데, XML보다 쉬움


자바스크립트의 객체 {"키값":벨류값, "키값2":벨류값2} 
==> 데이터포맷방법도 DOM이 아니라 저렇게 나타내는게 JSON

json은 별도의 라이브러리가 필요하다.

json은 자바스크립트 객체 표기법 이다.


▶ DOM 형식이면 가장 최상단의 엘리먼트를 잡고 이후에 원하는 태그들을 찾아가지만, JSON 형식은 그게 필요 없다.

▶ 서블릿에서도 XML은 뷰단 페이지(.jsp)에 보내서 XML 형식으로 나타내줬으나, JSON은 DB에서 얻어온 결과물인 imgList를 서블릿에서 JSON 형식의 문자열로 바꾸는 작업을 한다.



====================================================================================

09월 14일 오후수업

★ 두 개의 서블릿이 같은 URL 패턴에 매핑되면 오류가 뜬다.


▶ ==== org.json.simple.* 을 사용한 것 ====
	
List<Map<String, String>> imgList는 현재 복수개임
==> 얘를 이제 JSON 형식(자바스크립트 객체형식) 으로 바꾼다.
==> 얘는 광고 테이블에서 select 해온 정보들이 담겨져 있다.

JSONArray jsonArr = new JSONArray(); << 여기에 이제 imgList를 넣어준다.

JSONObject jsobj = new JSONObject(); << 이 자체가 자바스크립트에서 말하는 객체 { }를 만든 것이다.
==> 객체에 값을 넣을 땐, jsobj.put(key, value);


JSONObject jsobj = new JSONObject(); 			
//  {  }
				
jsobj.put("IMGNO", map.get("IMGNO")); 			
jsobj.put("IMGFILENAME", map.get("IMGFILENAME"));
// {"IMGNO" : "1", "IMGFILENAME":"미샤.png"}


jsonArr.add(jsobj);
==> 반복문을 돌리면서 객체 1개씩 차근차근 넣어준다.
==> 마치 자바스크립트에서 안에 객체가 들어가는 배열을 만든 것과 같다.

String json = jsonArr.toString();
==> 배열을 String 타입으로 만들고, 이제 이 String을 웹브라우저에 출력해준다.
==> 웹페이지에 출력하기 위해서 문자열로 바꾼 것이다.



▶ DB에서 얻어온 무언가의 정보를 JSON 형식으로 바뀐 것이 확인됐다. 이제는 이걸 이용해서 HTML로 만들어서 carousel을 구현해야 한다.

JSON으로 하면,

var rootElement = $(xml).find(":root"); 			
					
var arrPicture = $(rootElement).find("picture");

얘네가 이제 필요없다.


▶ json의 each( )는 $.each(json, function(index, item)) { } 이다.
==> item.IMGFILENAME 이렇게하면 value 값이 나온다.
==> item.키값

★ <%= ctxPath%>/ajaxstudy/json_imgList.do 에서 보여지는 화면의 결과물이 바로 success:function(json){} 에서 json 이다.
==> 그냥 화면에서 보여주는 결과물 X, 소스 보기에서 태그를 포함한 모든 것들
==> [{"IMGFILENAME":"미샤.png","IMGNO":"1"},{"IMGFILENAME":"원더플레이스.png","IMGNO":"2"},{"IMGFILENAME":"레노보.png","IMGNO":"3"},{"IMGFILENAME":"동원.png","IMGNO":"4"}]

▶ response는 결과물을 출력해줄때 쓴다.

response.setContentType("text/html; charset=UTF-8");
			
PrintWriter out = response.getWriter();


▶ JSONArray를 웹페이지에 찍어주려면 문자열타입이여야 한다.
==> .toString( ) 을 하면 배열 양 옆에다가 " " 를 붙여줘서 문자열이 되어서 웹페이지에 표시된다.
==> 이 표시된 내용은 나중에 success: function(json){ } 에서 json에 다 들어가져 있다.
==> 그러므로 나중에는 객체."키값"하면 value값이 나오니깐 이를 사용하여 웹페이지 코딩을 한다.

※ xml은 태그로 싸여져있는 형태로 나와서 위치를 잡아서 안에 내용물을 뽑아줘야 하는데, JSON은 자바스크립트 형태로 나와서 내용물이 뽑아쓰기 편함

★ 얘를 쓰면 경고줄이 계속 나온다. 작동은 되긴 한다.

	
▶ ==== org.json.* 을 사용한 것 ====

얘는 배열에 담을때부터 달라진다. 
아까는 jsonArr.add( ) 였는데, 객체 담을때와 똑같이 jsonArr.put(value)이다.

json-simple과 json in the java의 다른점?
■ simple은 계속 경고창이 뜬다.
■ json in the java 는 배열에 넣을때 simple처럼 .get( )이 아니라 .put( ) 을 쓴다.


▶ 항상 서블릿에서 json 형식으로 만든 다음에 해당 URL패턴에 가서 JSON 형식으로 나오는지 확인해보자

새로운 뉴스쓰기는 그냥 DB에 넣기만 하면 되니깐 바꿀게 없다.
==> DB에서 정보를 가져와서 웹페이지에 출력을 할때 JSON이나 XML이 필요함

====================================================================================

[GSON]
Google JSON

Gson 은 Java 객체를 JSON 표현식으로 변환할 수 있게 하는 Java 라이브러리 이다.
물론 JSON 표현식 형태의 스트링을 Java 객체로 변환 또한 가능하다. 

※ JSON 기능도 되면서 (Java 객체 --> Javascript object notation), JSON을 java 객체로도 바꿀 수 있다.

마찬가지로 라이브러리 다운받아야 한다.

MVN Repository에서 다운


▶ JSON을 구글에서 만든 거다.
▶ 결과물은 똑같은데, 나중에 웹 소켓에서 웹 채팅을 할때


사원정보 웹페이지 만들기

▶ 맨 처음에 로딩되면 가장 앞에 있는 사원개별상세정보 띄우기
▶ 신규사원 정보입력에 정보 넣고 입력하면, 사원목록 테이블에 넣고, 사원개별상세정보에 띄우기
▶ 신규사원 정보입력에서 이메일중복검사 안 누르면 submit 안되게 함 
==> 중복되도 안 됨


■ 메인액션 서블릿 생성하기 
==> URL패턴으로 접속하면 main.jsp 파일로 보내준다.

■ 메인.jsp 생성하기 
==> JSP Templates는 HTML5를 사용해야 한다.
==> XML이 들어갈 파일만 xhtml로 만들어야 한다.

■ VO 생성하기
==> 성명, 직급, 전화번호, 이메일, 생년월일 (여기까지는 insert 용)
==> 생년월일만으로 나이를 알 수 있다. (얘는 select 용)-- 사원개별상세정보에서 사용할 것이다.
==> 나이는 "현재년월일 - 생년 + 1"

Calendar currentDate = Calendar.getInstance(); // 현재날짜와 시간을 얻어온다.
int currentYear = currentDate.get(Calendar.YEAR);
String birthYear = birthday.substring(0, 4);
		
this.age = currentYear - Integer.parseInt(birthYear) + 1; // 얘가 setAge( ) 와 같은 거다.