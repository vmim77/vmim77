09월 08일 수요일 오전수업

공통인 부분은 밖으로 빼서 표준 액션 include로 호출해서 쓴다. (header, footer)

<jsp:include page="header.jsp" />, <jsp:include page="footer.jsp" /> ==> 표준액션 방식
<%@ include file="01include.jsp" %> ==> 지시어 방식

※ 지시어와 표준액션 방식의 include는 결과물은 같지만, 차이점이 있다. 
==> 지시어 방식은 지시어가 써진 곳의 태그 사이에 해당 파일의 내용물을 그대로 넣는다.
==> 표준액션 방식은 실행되어진 결과물을 써진 곳의 태그 사이에 넣는다.

※ JSP의 주석은 <%-- --%>이다. 

지시어 방식으로 header와 footer를 넣으면 ctxPath가 중복됐다는 오류가 뜬다.
==> 파일을 집어넣었기 때문이다.
==> header와 footer에는 ctxPath라는 변수가 각각 선언되어져 있기 때문이다.

▶ 파일을 집어넣는 지시어 방식은 변수가 중복되는 경우가 있으니, 표준액션 방식을 더 많이 사용한다.

====================================================================================

[ 표준액션 forward ]

※ 보통은 폼 태그에 action=" "을 넣어준다.
※ 폼태그의 속성으로는 name, action, method(GET, POST)가 있다.
==> method는 명기하지 않으면 기본값이 GET 이다.

▶ action URL을 나타내어 줄때 맨 앞에 슬래시(/) 가 없으면 상대경로이다. --> 즉, 이 파일과 동일한 경로에 있다는 뜻이다.

전송되어진 데이터를 처리하려면 request 객체를 사용해야 한다.

▶ 만약 action에서 .do 확장자가 아닌, .jsp로 보냈다면 이미 request가 내장되어 있기 때문에 doGet( )을 사용해서 만들 필요가 없다.

일반적인 JAVA 프로그램에서는 변수를 사용하기 전에 반드시 선언을 해야 하지만,
JSP 페이지에서는 선언을 하지 않고도 사용할 수 있는 변수가 있다.
이러한 변수를 JSP 페이지의 내장객체변수(implicit variable)라고 부른다.
왜냐하면 웹컨테이너(=WAS, 톰캣서버)가 JSP 페이지를 Servlet 클래스로 변환해줄때
자동적으로 변수선언을 해주기 때문에 우리는 변수선언 없이 그냥 사용만 하면 된다.


★ 폼을 전송(submit)하면 폼의 액션에 적혀진 URL에 전송되는데, 그러면 배치서술자에 써진 해당 URL 패턴 맞물리는 서블릿이 작동하여 기능이 동작한다.

▶ 대부분의 프로젝트는 팀으로 진행이 된다. 근데 팀원별로 디자인, 로직 구현등 잘하는 분야가 다를 수 있다. 그래서 로직 구현을 맡은 팀원이 기능의 결과물을 forward 명령어를 사용해서 결과값을 보내주고, 디자인을 잘하는 팀원은 해당 파일의 디자인을 맡아서 구현하면 된다.

<jsp:forward page="02forwardCalc_view_03.jsp" />    ==> 이 파일의 결과값을 해당 파일로 보낸다.
★ 결과물을 보내기 전에 결과물을 저장시켜둬야 한다.

!!!! 중요 꼭 암기 !!!!
== request 내장객체는 클라이언트( 02forwardCalc_execute_01.jsp ) 가 
보내온 데이터를 읽어들이는 역할( request.getParameter("name명"); )도 있고 
또한 어떤 결과물을 저장시키는 저장소 기능( request.setAttribute("키", 저장할객체); ) 도 있다. 


request.getAttribute ==> 얘는 리턴값이 객체이다. 왜냐하면 set으로 넣어줄때 객체를 넣어줘서


02forwardCalc_execute_01.jsp ==> 계산할 값을 받아주는 애
02forwardCalc_02.jsp ==> 받아온 값으로 기능을 돌려주는 애
02forwardCalc_view_03.jsp ==> 기능 돌리고 나온 결과물을 찍어주는 애

int sum = (Integer)request.getAttribute("sum");
int firstNum = (Integer)request.getAttribute("firstNum");
int secondNum = (Integer)request.getAttribute("secondNum");

★ 이렇게하면 object 타입을 먼저 casting을 해서 Integer 타입으로 바꾸고, int 변수에 넣어서 auto unboxing이 되어서 일반 자료형이 된다.


http://localhost:9090/JSPServletBegin/chap03_StandardAction/02forwardCalc_02.jsp?firstNum=1&secondNum=10
==> 결과값을 찍어주는건 03인데, URL은 02에 머물러 있다.
==> <jsp:forward page="" />은 URL은 바뀌지 않고, 03에 있는 것을 보여만 준다.


원래는 action의 파일에서만 submit 되어진 데이터 값을 불러올 수 있는데, forward 된 곳에서도 submit 된 값을 가져올 수 있다.
==> 01파일에서 submit 되어진 데이터 값을, 03에서 JSP의 내장객체인 request로 가져올 수 있다.

====================================================================================

[ EL 사용한 예제 ]

03 파일은 디자인을 잘하는 팀원이 결과값을 꾸며서 출력하는 곳
02 파일은 자바를 잘하는 팀원이 기능을 구현하는 곳


03 파일을 담당하는 팀원은 자바에 약하니, 자바코드보단 EL 을 사용하게 한다.
==> ${requestScope.firstNum} 이렇게 하면 request 영역에 해당 키값의 값을 가져온다.
==> requestScope는 또 생략이 가능하다. ==> ${firstNum}

이렇게 EL을 사용하면 자바코드를 하나도 안 쳐도 된다.


El은 아파티 톰캣을 Build Path에 추가하면 자동적으로 같이 추가되는 기능이다. (JSP도 이때 같이 추가됨)


====================================================================================

[ 필터 ]

=== 필터란 ? ===
필터란 Servlet 2.3 버전에 추가된 것으로,
클라이언트의 요청을 서블릿이 받기 전에 가로채어 필터에 작성된 내용을 수행하는 것을 말한다. 
따라서 필터를 사용하면 클라이언트의 요청을 가로채서 서버 컴포넌트의 추가적인 다른 기능을 수행시킬 수 있다.
	
<< 필터 적용 순서 >>
1. Filter 인터페이스를 구현하는 자바 클래스를 생성.
2. /WEB-INF/web.xml 에 filter 엘리먼트를 사용하여 필터 클래스를 등록한다. 

★ action에 .do로 받으면 서블릿을 만들어줘야 하고, .jsp로 받으면 jsp에서 내장객체를 이용해서 처리한다.


매번 POST 방식으로 받으면 한글이 깨지는데, 인코딩을 잡아주기에는 번거롭다 그러므로 인코딩용 필터를 하나 만든다.

▶ 필터는 서블릿이 작업을 하기 전에 먼저 새치기해서 들어가서 필터링 작업을 해준다. or 서블릿 작업이 끝난 다음에 자동적으로 해준다.

<filter>
  	<filter-name>setCharacterEncoding</filter-name>
  	<filter-class>my.filter.MyFilter</filter-class>
</filter>
<filter-mapping>
  	<filter-name>setCharacterEncoding</filter-name>
  	<url-pattern>/*</url-pattern>
</filter-mapping>

배치서술자에 다음과 같이 작성하면 어떤 URL 패턴이든 먼저 필터가 작동하여서 UTF-8 인코딩을 넣어줘서 한글이 깨질 일이 없다.

▶ 필터체인이란? 
웹 어플리케이션에 생성된 여러개의 필터 객체들은 순서를 가지고 서로 사슬처럼 연결되어 있기에 이것을 필터체인(FilterChain)이라고 합니다. 필터체인의 가장 끝에는 최종 목적지(Servlet, JSP, 기타 자원)가 있습니다.

▶ 필터 적용법은 일반 클래스 파일을 만들고 배치서술자에 등록하는 방법과, 필터를 만들어서 @어노테이션으로 하는 방법이 있다.


▶ 사용자가 임의로 GET 방식으로 DB에 정보를 보내는 것을 막아야 한다. 오직 POST 방식으로 들어왔을때만 DB에 접근할 수 있도록 해줘야 한다.

====================================================================================

이제 POST로 받아온 데이터 값을 웹에 다시 뿌려줘야 하는데 response 방식으로 하기에는 너무 번거롭다.
==> 애초에 이런 방식으로 안한다.
==> 그래서 forward로 데이터만 넘겨줘서 HTML 전용 JSP에서 디자인 처리한다.

.java 파일에는 HTML 태그가 없다! / JSP에는 java + HTML이다.  
==> 그래서 JSP에 넘겨준다.
==> 자료를 넘겨줄 때도 굳이 하나하나 넘겨주지 말고 Hash Map에 담아서 한꺼번에 넘겨준다.

★ request의 역할은 2개이다. getParameter & 저장소역할

★ 자바에서 forward할 때는 파일의 경로를 설정해줘야 한다.
==> request.getRequestDispatcher(path);
==> path에는 디자인 처리를 해줄 view 파일 경로를 써준다.

▶ .jsp에서 forward 하려면 <jsp:forward page="03forwardCalc_view_03.jsp" />,
▶ .java에서 forward 하려면 아래와 같이 한다.
RequestDispatcher dispatcher = request.getRequestDispatcher("/chap03_StandardAction/04forwardForm_view_02.jsp");
// 얘는 주소설정
dispatcher.forward(request, response);
// 얘가 포워드

★★ 확장자가 .jsp이면 컨텍스트 패스까지 써야하지만, .java이거나 .xml이면 컨텍스트 패스가 이미 생략되어져 있다.

EL방식에서는 맵에서 키값으로 value를 꺼내오려면 다음과 같이 쓴다. 
${requestScope.paraMap.name}

★ URL에서 WebContents 폴더 경로는 빼는 이유는 단지 이클립스에서 분류용으로 만든 것일 뿐이지, 웹페이지 경로에서는 존재하지 않는 것이다.
==> 만약 해당 폴더명을 넣고 URL을 치면 없는 주소로 나오니깐 URL을 작성할땐 꼭 빼주자!!

★ 기초를 잘 알아야 한다. 왜냐하면 나중에 기초를 다 안다는 전제하에 수업 진도를 나갈 것이여서 따라가기 힘들 수 있다.
==> 예전에 쇼핑몰 프로젝트하고 있는데 request.getParameter 물어본 사례가 있었음
==> 복습 꾸준히하고 기초를 잘 닦아야 한다

====================================================================================

09월 08일 오후수업

[ useBean ]

▶ 문법: <jsp:useBean id="mbr3" class="chap03.MemberDTO" />

위의 것은 아래의 뜻이다.
chap03.MemberDTO mbr3 = new chap03.MemberDTO(); // 기본생성자  
즉, chap03.MemberDTO 클래스의 기본생성자로 mbr3 이라는 객체를 생성하는 것이다.
==> useBean은 항상 기본생성자로 객체를 만든다.
==> 만약 useBean이 사용하려는 클래스에 반드시 기본생성자가 있어야 한다.

★ useBean을 이용하여 DTO 객체를 만들땐 항상 기본생성자가 있어야 한다.

useBean으로 만든 객체에 필드값을 설정해줄 땐 <jsp:setProperty property="name" name="mbr3" value="김태희"/> 를 이용한다.
==> name에는 useBean에서의 ID가 나온다.
==> property에는 Setter에서 set 다음에 오는 이름을 쓴다. (setName이면 name)
==>  (★ 첫글자는 무조건 소문자로!!!!) 

★ 법칙 - jsp:setProperty에서 property에 나오는 이름은 필드명이 아니라, setter에서 set 다음에 나오는 글자이다!!
★ 법칙 - DTO에서 setter 메소드 이름에서 set 다음에 첫 글자만 대문자를 써야한다.

useBean으로 설정한 필드값을 불러올 때는? <jsp:getProperty>
==> <jsp:getProperty property="name" name="mbr3" />
==> 마찬가지로 property에는 getter에서 get 다음에 나오는 글자를 쓴다.

gender와 age는 setter & getter가 아니라 주민번호를 이용해 메소드로 만드는데 어떻게 부르는가?
==>그래서 아까 메소드명을 만들때 getGender, getAge 식으로 메소드명 또한 getter & setter와 통일시킨 것이다.
==> 똑같이 property에 적어도 값이 나온다.

★★★ getProperty나 setProperty는 필드값을 직접 건드는 게 아니다.
==> setProperty, getProperty == getter & setter
==> 그래서 항상 웹과 연동을 할땐, 메소드명은 내 마음대로 하면 안 된다.

★★★ 값을 불러오는거면 getXXX 식으로 적어야 한다, 값을 넣어주는거면 setXXX 식으로
==> 그냥 순수한 자바(console)이면 메소드명은 내 마음대로 써도 되는데, JSP와 합치려면 규격을 따라가야 한다.


====================================================================================

[ useBean form ]

자바파일이면 submit해서 작동하는 서블릿에서 request, response를 사용해서 데이터값 처리

JSP 파일이면 아래와 같이 다르게 한다.

▶ ${param} == request.getParameter( )
▶ ${paramValues.food} == request.getParameterValues( )

food 같은 경우는 배열인데 getProperty로는 할 수 없다.
==> <jsp:getProperty property="food" name="psdto"> (X)
==> String 타입으로 만들어줘야함// DTO에서 join시켜주는 메소드를 만들고 그 메소드를 getProperty 한다.

▶객체생성은 --> <jsp:useBean id="psdto" class="chap03.PersonDTO" />
▶setter은 -->  <jsp:setProperty property="" name=""/> 
▶getter은 --> <jsp:getProperty property="" name="" />


▶ <jsp:setProperty property="*" name="psdto"/> 얘를 쓰려면 전제조건이 있다.
==> 전제조건은 폼태그의 name 과 DTO의 필드명이 똑같아야 한다.
※ property는 setter, getter 이름과 똑같아야 함

★★★★★ DB의 컬럼명 == form태그에 있는 <input>의 name == DTO에 있는 필드 name

이렇게 다 똑같으면 그냥 <jsp:setProperty property="*" name="psdto"/> 얘 한 번만 쓰면 끝

====================================================================================

[ 커스텀 액션 ]

커스텀 액션을 사용하려면 별도의 라이브러리가 필요하다.
==> 마치 오라클을 쓰려면 ojdbc6.jar가 필요하듯이

▶ JSTL?
Java Standard Tag Library (JSTL)
자바에서 주고있는 태그관련 라이브러리다. ( 얘가 바로 커스텀 액션임 )
별도의 다운로드가 필요하다.

JSTL을 쓰려면 반드시 web-inf - lib에 별도의 라이브러리들을 다운받아 넣어놔야 함

<%-- ===== JSTL(Java Standard Tag Library) 사용하기 ===== --%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %> 
==> 얘를 적어야 커스텀 태그들이 나온다. 없으면 JSP 태그들이 나옴

<% %> <== 얘는 자바
<c:set /> <== 얘는 태그

▶ 변수선언: <c:set var="num1" value="${param.firstNum}" />

▶ 변수호출: 변수를 호출할 땐, ${num1} 이렇게

====================================================================================

[ 커스텀 액션 - if ]

<%-- ===== JSTL(Java Standard Tag Library) 사용하기 ===== --%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %> 
==> 얘를 적어야 커스텀 태그들이 나온다. 없으면 JSP 태그들이 나옴

▶ 문법: <c:if test="${param.first eq param.second}"></c:if>

▶ eq는 "==" 이다.
▶ ne는 "!=" 이다.
▶ 태그 라이브러리 if는 else가 없다.
▶ else 와 비슷한건 choose 이다.

<c:if test="${empty param.third}">
==> 공백이 아닌 아무것도 입력하지 않은 것이다.
==> 공백(스페이스바)도 뭔가를 입력한 것으로 친다.

위의 반대는 <c:if test="${not empty param.third}"> 또는 <c:if test="${!empty param.third}"> 이다.
