10월 14일 수업 

[ 제품등록 마무리하기 ]

추가이미지는 있을수도 있고 없을수도 있다.
있다면 제품테이블과 추가이미지테이블에 동시에 insert를 한다.

▶ 추가이미지 파일은 동일한 제품번호를 사용해야해서 제품번호 채번을 한다.

getPnumOfProduct( )

String sql = " select seq_tbl_product_pnum.nextval AS PNUM from dual ";

▶ 채번해온 제품번호와 폼태그에서 입력받은 정보를 VO에 넣어준다.

▶ 추가이미지가 있는지 없는지를 확인하고 있다면 추가이미지테이블에도 insert를 해야한다.

▶ 폼태그에서 <input type="hidden" name="attachCount" id="attachCount" />를 이용해서 추가이미지의 개수를 알 수 있다.
==> 만약에 처음부터 스피너를 안 건드렸다면 값은 "" 이다.
==> 값이 올라갔다가 내려갔다면 0이 된다. 
==> "", "0" ~ "10"

※ input[type=text]의 default는 "" 이다.

만약 attachCount의 값이 ""이 아니라면 그 값을 int attachCount에 넣고 반복문을 돌려서 이미지파일을 getFilesystemName을 해온다. 
==> 만약 0이여도 반복문은 돌지 않는다.
==> name은 attach + i이다.

for(int i=0; i<attachCount; i++) {			   
   String attachFileName = mtrequest.getFilesystemName("attach"+i);		   
   pdao.product_imagefile_Insert(pnum, attachFileName);
}

====================================================================================

[ 제품상세정보 ]

상품목록에서 카드를 클릭하면 GET 방식으로 제품번호를 넘기면서 상세페이지로 이동한다.
==> <a href='/MyMVC/shop/prodView.up?pnum="+item.pnum+"' class='stretched-link btn btn-outline-dark btn-sm' role='button'>

■ ProdViewAction.java

넘어온 제품번호를 사용하여 제품테이블에서 select where을 해온다.
==> 해올때는 스펙테이블과 조인을해서 스펙명(HIT, NEW, BEST)도 가져온다.

또 추가이미지테이블에가서 해당 제품번호로 등록된 추가이미지들을 가져온다.

▶ 사용자가 GET방식으로 제품번호를 막치고 들어오는 경우를 막아준다.
==> 제품 상세조회는 존재하면 pvo가 null이 아니고, 없는 제품이면 null 이다.
==> 마찬가지로 추가이미지가 없다면 imgList도 길이가 0이다.

이제 뷰페이지로 pvo, imgList를 보내준다.

■ prodView.jsp

▶ 플립카드는 화면이 커야 효과가 적절하게 들어가서 미디어 쿼리로 플립카드 효과가 적용되는 화면크기를 정해둔다.
==> @media screen and (min-width:1024px){ 플립카드 효과 }

▶ 플립카드 효과

background-color: transparent;
==> 배경색이 투명하게 된다.

perspective: 2000px;
==> 3D 환경을 만들때 사용하는 것으로서 원근감을 준다.
==> 숫자↓ 더 가까이에서 보는 것처럼 처리한다.
==> 숫자↑ 더 멀리서 보는 것처럼 처리한다.

transition: transform 0.6s; 
==> 요소(앨리먼트)를 transform(변형) 시키는데 걸리는 시간이다.
==> 카드가 도는 시간을 말한다.

transform-style: preserve-3d;
==> 요소(엘리먼트)의 자식요소들(엘리먼트들)을 3D 공간에 배치 시킨다.

★ Perspective (투영점)
보고 있는 사람의 위치를 추정하여 투영점을 명시하면 3D 환경을 만들 수 있다.
말하자면 멀리 떨어진  사물은 작게, 가까이 있는 사물은 크게 만들어서 원근감을 준다.

★ transform-style: preserve-3d는 이 perspective를 부모로부터 받아 자신을 통과해 자식까지 전달되도록 한다.

즉, flip-card에게 원근감을 준 것을 flip-card-inner가 preserve-3d를 해서 그 아래의 플립카드 전면과 후면도 원근감이 있게 만들어준다.

제품설명서 다운로드에서 파일명을 클릭하면 다운로드되도록 처리를 해준다.
==> <%= ctxPath%>/shop/fileDownload.up?pnum=${pvo.pnum}">

====================================================================================

[ 제품설명서 다운로드하기 ]

■ FileDownloadAction.java

다운로드 링크를 클릭하면 제품번호를 GET방식으로 달고와서 Action으로 온다. 그 제품번호를 이용하여 DB에 가서 해당제품이 WAS에 올린 실제 파일명을 알아와야한다.
==> select prdmanual_systemFileName, prdmanual_originFileName  from tbl_product where pnum = ? 로 DB에서 찾아서 가져와야 한다.

▶ prdmanual_systemFileName 실제 다운로드 받는 파일
▶ prdmanual_originFileName 파일설명서 이름에 출력될 이름

DB에서 조회한 후에 맵에 시스템파일명과 오리진파일명을 넣어서 리턴시킨다.

이제 업로드폴더 + "\\" + map.get("시스템파일명"); 을 하면 WAS에 저장된 해당 파일의 경로가 된다.

====================================================================================

▶ 이제 IO 에서 배웠던 FileStream 들을 이용해서 다운로드 처리를 해준다.

▶ File 객체 생성하기
File file = new File(filePath); 
// String이였던 filePath를 실제 파일객체로 만들어준다.
// 파일객체를 생성함으로써 WAS에 업로드된 설명서 파일과 연결됐다.

// FileInputStream 생성 : 접속점이 파일인 것으로 특정 파일에 빨대를 꽂아 파일의 내용물을 1byte 기반으로 빨아들이는 입력노드 스트림이다. 
// FileOutputStream 생성 : 접속점이 파일인 것으로 특정 파일에 빨대를 꽂아 파일의 내용물을 1byte 기반으로 기록해주는(써주는) 출력노드 스트림이다.

▶ MIME TYPE 설정하기 - 어떤 파일을 다운로드하는지 타입을 설정해준다.
String mimeType = svlCtx.getMimeType(filePath);

만약 아래한글같은 확장자명의 파일이라면 다음과 같이 처리를 해줘야한다.

if(mimeType == null) {
mimeType = "application/octet-stream";
// "application/octet-stream" 은 일반적으로 잘 알려지지 않은 모든 종류의 이진 데이터를 뜻하는 것임. 
}

response.setContentType(mimeType); 
==> 얘가 내가 다운로드 받게할 파일의 타입이라고 알려준다.
==> 결과로 출력되는 출력물의 인코딩 타입을 정하는 것이다.



▶ 파일명이 영어나 숫자가 포함되어지면 괜찮지만, 한글이 포함되어 있으면 깨진다.
==> 이건 웹브라우저별로 막아줘야 한다.

prdmanual_orginFileName(다운로드 되어지는 파일명)이 한글일때, 한글 파일명이 깨지지 않도록 하기위한 웹브라우저 별로 encoding 하기 및  다운로드 파일명 설정해주기.


			if (header.contains("Edge")){
	            downloadFileName = URLEncoder.encode(prdmanual_orginFileName, "UTF-8").replaceAll("\\+", "%20");
	             response.setHeader("Content-Disposition", "attachment;filename=" + downloadFileName);
	          } else if (header.contains("MSIE") || header.contains("Trident")) { // IE 11버전부터는 Trident로 변경됨.
	             downloadFileName = URLEncoder.encode(prdmanual_orginFileName, "UTF-8").replaceAll("\\+", "%20");
	             response.setHeader("Content-Disposition", "attachment;filename=" + downloadFileName);
	         } else if (header.contains("Chrome")) {
	            downloadFileName = new String(prdmanual_orginFileName.getBytes("UTF-8"), "ISO-8859-1");
	             response.setHeader("Content-Disposition", "attachment; filename=" + downloadFileName);
	         } else if (header.contains("Opera")) {
	            downloadFileName = new String(prdmanual_orginFileName.getBytes("UTF-8"), "ISO-8859-1");
	             response.setHeader("Content-Disposition", "attachment; filename=" + downloadFileName);
	         } else if (header.contains("Firefox")) {
	            downloadFileName = new String(prdmanual_orginFileName.getBytes("UTF-8"), "ISO-8859-1");
	             response.setHeader("Content-Disposition", "attachment; filename=" + downloadFileName);
	         }

▶ 노드스트림 꽂기

FileInputStream finStream = new FileInputStream(file);
==> 다운로드할 요청 파일을 읽어서 클라이언트로 파일을 전송한다.

웹에서 FileOutputStream은 다음과 같이 한다.

ServletOutputStream srvOutStream = response.getOutputStream();
==> ServletOutputStream 은 바이너리 데이터를 웹 브라우저로 전송할 때 사용함.

byte arrb[] = new byte[4096]; // 한 번 읽을때 1바이트씩이 아닌, 4kb씩 읽고 다 읽으면 쓰기를 반복한다.
int data = 0;

while ((data = finStream.read(arrb, 0, arrb.length)) != -1) {

// -1(파일의 끝)까지  arrb 배열의 0의 위치에서 크기만큼(arrb.length) 읽어 들여서 arrb에 값을 넣어주고, 읽어들인 길이는 data에 넣는다.
★ 파일에 입력된 것을 배열의 길이만큼 읽어들이고 값은 배열에, 읽어들인 크기(int)는 data에 넣는다.

srvOutStream.write(arrb, 0, data);
// 그리고 arrb의 담겨진 데이터를 0에서부터 data만큼 쓰기를 한다.
★ (저장시킨 곳/ 시작점 / 읽어들일 길이)
}

srvOutStream.flush();
srvOutStream.close();
finStream.close();

====================================================================================

[ 시큐어코딩 ]

pcontent = pcontent.replaceAll("<", "&lt;");
pcontent = pcontent.replaceAll(">", "&gt;");

textarea의 벨류값을 다음과 같이 치환하지 않고 DB에 저장해버리면, 해당 textarea를 DB에서 조회해서 출력하면 악의적으로 삽입된 스크립트가 실행되어버린다.

(예시)
<script type="text/javascript">
alert("안녕하세요~~ 빨강파랑 ㅋㅋㅋ");
		                
var body = document.getElementsByTagName("body");
body[0].style.backgroundColor = "red";
		                
var arrDiv = document.getElementsByTagName("div");
for(var i=0; i<arrDiv.length; i++) {
   arrDiv[i].style.backgroundColor = "blue";
}
</script>

게시판에 경우 다음과 같이 textarea에 저런 내용이 들어온다면 저절로 웹페이지의 css가 바껴져버린다. 


▶ 게시판, 후기등에서 이런 XSS의 공격을 받을 수 있다.

pcontent = pcontent.replaceAll("<", "&lt;");
pcontent = pcontent.replaceAll(">", "&gt;"); 

★ 이렇게 DB에 저장하기전에 태그들을 그냥 부등호로 치환해버리면 스크립트가 적용되지 않는다.

pcontent = pcontent.replaceAll("\r\n", "<br>"); 

또한 엔터문자는 <br>태그로 치환시켜주면 나중에 조회할때 알아서 엔터까지 적용된다.