09월 24일 오전수업

[ page / request / session ]

※ 변수선언시 scope를 생략하면 기본값은 page이다.

▶ scope="page"로 선언된 변수의 사용범위는 선언되어진 jsp 파일 및 선언되어진 파일 속에 <%@ include file="ㅇㅇㅇ.jsp" %> 되어진 ㅇㅇㅇ.jsp 파일내에서도 사용되어진다.
==> 지시어방식의 include는 소스가 그대로 끼워 들어가기 때문이다.

▶ scope="request"로 선언된 변수의 사용범위는 page 범위를 포함하면서, 동시에 <jsp:include page="선언되어진 jsp파일명" /> 이 들어있는 파일에서도 사용할 수 있다.

▶ scope="session"로 선언된 변수의 사용범위는 모든 jsp 파일내에서 사용되어진다.

[ 아이디 및 이메일 중복검사 보완 ]

중복되지 않은 아이디 입력후 --> 중복된 아이디를 다시 넣는 경우를 막는다.

// 아이디값이 변경되면 가입하기 버튼을 클릭시 "아이디중복확인" 을 클릭했는지 안했는지 알아보기 위한 용도 초기화 시키기
$("input#userid").bind("change",function(){
   b_flagIdDuplicateClick = false;
});
     	
// 이메일값이 변경되면 가입하기 버튼을 클릭시 "이메일중복확인" 을 클릭했는지 안했는지 알아보기 위한 용도 초기화 시키기
$("input#email").bind("change",function(){
   b_flagEmailDuplicateClick = false;
});

====================================================================================

[ 회원으로 가입하면 바로 자동 로그인 시키기 ]

■ MemberRegisterAction.java

회원가입(insert)가 성공하면, 1을 리턴한다. 그래서 if절에서 리턴값이 1이면 request 영역에 아이디와 비밀번호를 저장시킨다.

그리고 view 페이지로 forward를 시킨다.
==> registerAfterAutoLogin.jsp

■ registerAfterAutoLogin.jsp

폼태그 생성 후 아이디와 비밀번호 인풋태그를 만들고 type을 hidden으로 해놓은다. 그리고 미리 만들어둔 LoginAction.java로 보내서 처리한다.
==> 회원가입 성공 한 회원을 위한 로그인을 또 하나 만든 것이다.

====================================================================================

[ 아이디 찾기 ]

header에서 아이디 찾기를 누르면 성명과 이메일을 입력받는 모달이 뜬다.
==> 모달의 본문은 idFind.jsp를 <iframe>으로 불러온다.

폼에 입력한 성명과 이메일을 IdFindAction.java로 전송한다.

■ IdFindAction.java

얘는 접근방식이 post방식이면 DB에 입력받은 성명과 이메일을 전송시켜주고, get방식이면 idFind.jsp로 보내준다.
※ 결과물은 아이디값만 알아오면 된다.

1. 해쉬맵 생성 후 폼태그에 입력한 성명과 이메일을 담아준다.

2. MemberDAO 생성 후 DB에 접근해서 확인한다. --> String userid = mdao.findUserid(paraMap);

3. 이메일은 DB에서 AES-256으로 암호화가 되어있다. 그러므로 우리가 입력받은 이메일도 암호화시켜서 보내준다.
==> pstmt.setString(2, aes.encrypt(paraMap.get("email")));

4. DB에서 가져온 결과물을 다시 idFind.jsp로 보내서 결과출력용 태그에 나타내야 한다.

5. 처음부터 결과출력물을 보여주면 안된다. 그래서 Action에서 method(get / post)을 보내줘서 post일때만 결과물들을 보여주게 한다.

var method = "${requestScope.method}";

if(method == "GET") { $("div#div_findResult").hide( ) }
==> Action에서 다시 jsp로 보내주면 문서로딩시 스크립트에서 위의 코드를 실행시킨다.
==> 그래서 Action을 들렀다오면 post방식이여서 결과물 태그들이 다시 보여진다.

6. 아이디 찾기 버튼을 눌러도 입력했던 성명과 이메일을 유지시켜야 한다.

7. 아이디를 다 찾고서 모달창을 껏다키면 초기화를 시켜줘야 한다.

8. 모달을 닫으면 결과물을 초기화시켜줘야 한다.
==> 상단의 X버튼과 close 버튼은 둘 다 클래스가 myclose 이다.

$(".myclose").click(function(){
   javascript:history.go(0)
});

▶ close 버튼을 누르면 새로고침을 해주겠다는 뜻이다.

      >>> 1. 일반적인 다시읽기 <<<
      window.location.reload();
      ==> 이렇게 하면 컴퓨터의 캐시에서 우선 파일을 찾아본다.
               없으면 서버에서 받아온다. 
      
      >>> 2. 강력하고 강제적인 다시읽기 <<<
      window.location.reload(true);
      ==> true 라는 파라미터를 입력하면, 무조건 서버에서 직접 파일을 가져오게 된다.
               캐시는 완전히 무시된다.
      
      >>> 3. 부드럽고 소극적인 다시읽기 <<<
      history.go(0);
      ==> 이렇게 하면 캐시에서 현재 페이지의 파일들을 항상 우선적으로 찾는다.


※ 우리가 어떤 페이지를 읽어오면 항상 캐시에 페이지 정보를 담아준다. 

====================================================================================

[ 비밀번호 찾기 ]

▶ 맞는 정보를 입력해서 비밀번호 찾기버튼을 누르면 이메일로 인증코드를 보내고 인증코드를 올바르게 입력했다면 새 비밀번호 입력을 하도록 해준다.


▶ 자바에서 메일 보내기 

- 메일 서버(Google SMTP)가 필요하다. 그래서 구글계정을 새로 만든다.
==> 보안 수준이 낮은 앱의 액세스 : 사용으로 한다.

- 라이브러리 설치하기 
activation.jar / mail.jar

- 별도의 클래스파일 생성하기

▶ GoogleMail.java

recipient 는 받는이, certificationCode는 인증코드이다.

이메일로 인증을 받기 위해서는 항상 extends에 Authenticator를 써야한다.

▶ MySMTPAuthenticator.java 는 인증메일을 보내주는 이메일 계정의 암호를 입력하기 위한 클래스이다.
==> getPasswordAuthentication() 이 메소드를 호출하면 해당 구글계정에 접속해준다.
==> 리턴값은  return new PasswordAuthentication("구글ID","구글비번"); 


■ PwdFindAction.java

아이디찾기와 비슷하다 ( + 인증코드 보내기 )

아이디찾기와 마찬가지로 pwdFind.jsp는 login.jsp에 불려가서 들어가질 거니깐 기본적인 HTML 태그들은 지워야 한다.
==> 왜냐하면 header.jsp에서 다시 login.jsp를 부르는데 거기에는 기본적인 HTML 태그들이 있어서 오류가 날 수 있다.

■ pwdFind.jsp

찾기버튼을 클릭하면 이벤트 처리를 한다.
- 입력한 이메일과 아이디를 변수에 담아서 유효성검사를 거친다.
- 빈칸으로 보내지 않았다면 submit을 해준다.
- 다시 PwdFindAction.java로 보내준다. (※ post 방식으로)

■ PwdFindAction.java

▶ post 방식으로 들어올 경우 비밀번호찾기 기능을 실행시켜준다.(아이디, 이메일을 입력하고 찾기버튼을 클릭한 경우이다.)

아이디찾기와 동일하게 해쉬맵에 입력한 아이디와 이메일을 담아서 DAO에 select where을 해주는 메소드에 담아서 보내준다.

해당 사용자가 존재하는지 아닌지를 확인하고, 존재한다면 이메일로 인증키를 보내준다.
==> isUserExists = rs.next( ); // 존재하면 true, 없는 유저면 false

▶ 회원으로 존재하든, 존재하지 않든 존재여부(isUserExists) / 유저아이디(userid) / 이메일(email) / 전송방식(method)을 다시 View 페이지로 전송시켜준다.

==> 존재여부는 있냐 없냐에 따라 다른 결과물을 보여주기 위해서이다.
==> 전송방식은 post면 결과물을 보여주는 태그(div)를 보여주기 위해서이다.
==> 아이디, 이메일은 찾기버튼을 누른 후에도 입력값을 계속해서 보여주기 위해서이다.

존재여부를 if로 사용해서 없으면 없다는 문구를 띄운다.

====================================================================================

★ 목요일이 등원날짜 

09월 24일 오후수업

[ 인증코드 발송하기 ]

▶ 존재하는 유저라면 해당 유저의 이메일로 인증코드를 보내서 인증코드가 맞으면 비번 변경 페이지로 보내고, 인증코드가 틀리면 alert를 띄워서 다시 확인하게 한다.
==> 암호는 DB도 단방향암호화(SHA-256)이니깐 모르니깐, 새로운 암호를 입력하게해서 암호화시키고 DB에 UPDATE를 해준다.

- 이메일 인증 구현

■ PwdFindAction.java

DAO에서 select where 메소드를 돌린 후에 존재하는 경우 처리를 한다.

- 랜덤 객체 생성
- 인증코드를 난수로 생성한다. ( 영문소문자 5글자 + 숫자 7글자 )

★ 난수생성: int rndnum = rnd.nextInt(max - min + 1) + min;

구글API로 만든 클래스에서 .sendmail(email, certificationCode); 메소드로 이메일을 발송한다.

GoogleMail mail = new GoogleMail( );
mail.sendmail(email, certificationCode);

그 다음에 알맞은 인증코드를 넣었는지 아닌지를 확인해야 하는데, 그래서 난수로 뽑은 인증코드를 session에 저장시켜준다.
==> 사용자가 알맞은 인증코드를 넣었는지 확인해야하니깐

view페이지로 확인하러 가기 전에 메일이 안갔을수도 있으니 확인해줘야 한다.
==> sendMailSuccess 얘도 request에 담아서 view페이지로 보내서 처리해준다.

■ pwdFind.jsp

if(${requestScope.sendMailSuccess == true})
==> 이메일 발송이 성공했다면 찾기 버튼이 사라지고 인증코드 입력 칸과 확인 버튼이 생겨야 한다.

result에는 3가지의 경우의 수가 있다.
1. 사용자 정보가 없는 경우
2. 사용자 정보는 찾아왔는데 메일 전송을 실패한 경우
3. 사용자 정보도 찾아왔고, 메일 전송도 성공한 경우



★ 291 버전 SMTP 호스트 연결 불가능으로 인해 271로 다운그레이드
jdk - security 와 jre - security에 있는 local_policy.jar와 us_export_policy.jar 파일 백업
삭제후 재설치
자동업데이트 끄기
백업한 파일 붙여넣기
WAS 삭제 후 다시 만들기