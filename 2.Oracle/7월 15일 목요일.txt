07월 15일 오전수업

[Oracle]

* 각 워크시트에 맞게 '접속선택'을 해줘야 한다.

Database : 회원정보, 물품정보 등 데이터(정보)들을 모아서 관리하는 것을 Database라고 부른다. 

오라클은 '관계형 데이터베이스 관리시스템'이다. (RDBMS)
관계형 데이터베이스는 테이블 형태로 데이터를 저장해주는 것을 말한다.
테이블은 열(Column, Field)과 행(Row, Record, tuple) 으로 이루어진다.

* 현재 오라클 서버에 접속되어진 사용자가 만든(소유의) 테이블 목록을 조회하는 법
select * from tab;

* 특정 테이블 조회하는 법
select * from EMPLOYEES;

*VIEW는 테이블은 아니지만 select 되어진 결과물을 마치 테이블 처럼 보는 것이다.(간주)

EMPLOYEE_ID, FIRST_NAME들은 열(Column, Field) 라고 부른다.

describe 테이블명; 을 하면 해당 테이블의 컬럼정보를 볼 수 있다.
★ 반드시 값을 넣어야 한다. NOT NULL로 표시한다.

유형은 데이터타입이다. NUMBER - 숫자, VARCHAR2 - 문자열, DATE - 날짜
==> 오라클은 정수이건 실수이건 NUMBER로 표시한다.

★ 오라클은 데이터 벨류값만 대/소문자를 구분한다.
==> sql, 컬럼명, 테이블명도 대/소문자를 구분하지 않는다.

오라클은 정수형이건 실수형이건 NUMBER로 설정한다.
* PCT == Percentage

★ 서로 꼬리에 꼬리를 물고 이어지는 것이 관계형 데이터베이스이다.

===================================================================


★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
=== 아주아주아주아주아주아주아주아주아주아주아주아주아주아주아주 중요 !!!!!!!!! ===
=== !!!!!! 필수 암기 !!!!!! ===
    
=== 어떠한 테이블(또는 뷰)에서 데이터 정보를 꺼내와 보는 명령어인 select 의 처리 순서 ===
    
select 컬럼명, 컬럼명          -- 5 컬럼명 대신에 *(아스테리크, asterisk) 을 쓰면 모든 컬럼을 뜻하는 것이다.
from 테이블명(또는 뷰명)        -- 1 
where 조건절                  -- 2 where 조건절이 뜻하는 것은 해당 테이블명(또는 뷰명)에서 조건에 만족하는 행(row)을 메모리(RAM)에 로딩(올리는것)해주는 것이다. 

group by 절                  -- 3 
having 그룹함수조건절           -- 4
order by 절                  -- 6

★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★

===================================================================

[NULL을 처리해주는 함수 NVL, NVL2]
★★★★★ 데이터베이스는 NULL 처리를 잘 해야한다.

자바에서는 문자열이 쌍따옴표("")지만, 오라클은 문자열이 홑따옴표('')이다.

NULL 은 존재하지 않는 것이므로 4칙연산에 NULL이 포함되어지면 그 결과는 무조건 NULL 이 된다.
==> 1+null, null*0, 2-null ==> null

** 자바는 정수 / 정수면 정수인데, 오라클은 정수/정수해도 소수값이 나온다.

select nvl(7,3)
from dual;
==> dual 은 가상테이블이다.
==> 7이 null이 아니라면 자기 자신의 값을 나타내준다.
    
select nvl(null,3)
from dual;
==> dualr 은 가상테이블이다.
==> 자기자신이 null이라면 콤마(,) 다음의 값을 보여준다.

-------------------------------------------------------------------------------------------------------------------

select nvl2(7,3,2)
from dual;

맨 처음값이 null이 아니면 3이 출력된다.
맨 처음값이 null이면 2가 출력된다.

==> nvl은 null이 아니면 자기값을 출력하지만, nvl2는 null이 아니면 두번째값을 출력해준다.


** 자바에서 '같다' 는 '=='
** 오라클에서 '같다' 는 '='

where 조건절을 쓰면, 조건에 맞는 행들만 추출한다.
where 조건절이 없다면, 모든 행들을 추출한다.

월급은 = 기본급여 + (기본급여*수당)
nvl2(commission_pct, commission_pct, 1)
★★★★★ NULL 은 존재하지 않는 것이므로 4칙여산(+ - * /)에 NULL 이 포함되어지면 그 결과는 무조건 NULL 이 된다.

===================================================================

[컬럼에 대한 별칭 부여하기 -  alias]

select employee_id AS "사원번호"
==> as는 같다(=)의 뜻이다.
==> as 뒤에 내용이 별칭이 된다. alias

first_name "이름" 
==> 별칭(별명) alias 에서 as 는 생략이 가능하다.

last_name 성 
==> 별칭(별명) alias 에서 "" 는 생략이 가능하다.

commission_pct 커미션퍼센티지커미션퍼센티지 
==> ORA-00972: identifier is too long
==> 별칭(별명) alias 는 30 byte를 못 넘는다.
==> 너무 길면 안된다.

salary "기본 급여" 
==> 별칭(별명) alias 에서 공백을 주려면 반드시 "" 을 해야한다.

NVL( salary +(salary * commission_pct), salary ) 월급
NVL2(commission_pct, salary +(salary * commission_pct), salary ) 월급
==> 별칭(별명) alias가 같으면 오라클은 알아서 '_1'을 붙힌다.

===================================================================

[비교연산자]

1. 같다                   =
2. 같지않다                !=   <>   ^=
3. 크다. 작다.             >     <
4. 같거나크다, 같거나작다     >=      <=
5. NULL 은 존재하지 않는 것이므로 비교대상이 될 수가 없다. ★★★★★
  그러므로 비교연산 ( = != <> ^= > < >= <= ) 을 할 수가 없다.
  그래서 비교연산을 하려면 nvl()함수, nvl2()함수를 사용하여 처리한다.

===================================================================

별칭은 쌍따옴표로 ("")
문자열은 홑따옴표로 ('')

** sysdate : PC의 현재시각을 알려준다.

문자는 왼쪽맞춤
숫자는 오른쪽맞춤
날짜는 왼쪽맞춤
★ 숫자만 오른쪽맞춤이다.

>> 칼럼 합치기 '대한민국' || '서울시' || 1234 || sysdate
==> 콤마( , ) 대신 버티컬라인 2개 ( || )
==> 오라클에서 컬럼들을 붙일때(연결할때)는 문자 타입이든 숫자 타입이든 날짜 타입이든 관계없이 || 를 쓰면 된다.

==> first_name || ' ' || last_name  ==> Den Raphaely


*  where department_id is null; 부서번호가 null 인것을 찾아낸다.
-- NULL 은 is 연산자를 사용하여 구한다. ★★★★★
-- department_id 컬럼의 값이 null 인 행들만 RAM(메모리)에 올린다.

===================================================================

-- employees 테이블에서 부서번호가 30번이 아닌 사원들만
-- 사원번호, 사원명, 월급, 부서번호를 나타내세요

먼저 데이터베이스 관리는 테이블의 구조를 파악해야 한다.

1. desc employees; 로 테이블의 컬럼의 속성을 파악한다.

2. DEPARTMENT_ID 는 NOT NULL 표기가 안됐으니, NULL이 들어올 수 있음을 인지한다.
>> NOT NULL은 NULL이 절대 못오니 NVL 처리가 불필요
>> NOT NULL 표기가 없다면 NULL이 올 수 있으니, NVL 처리가 필요

3. DEPARTMENT_ID 에서 부서번호가 30이 아닌 사람들을 구하려면, NULL도 들어올 수 있다.
>> NULL은 비교연산자가 먹히질 않으니, nvl로 NULL 처리를 먼저해서 NULL에 임의의 값을 넣어준다. ex. nvl(DEPARTMENT_ID, -9999)

4. 이러면 NULL 대신에 -9999이 나오니깐, DEPARTMENT_ID <> 30 으로 하면, 부서번호가 NULL값인 행들도 같이 나온다.

* WHERE은 메모리에 올라갈 대상을 잡아주는 것이다. (조건에 맞는 행만 나오게 한다.)

** where not department_id = 30; 은 where department_id != 30; 과 같다.

-- 부서번호가 null인 사원을 제외하고 모두 출력하라

where nvl(department_id, -9999) != -9999; 
-- 또는
where department_id is not null;
-- 또는
where not department_id is null;

===================================================================

[order by 정렬]

select의 순서

select 컬럼명, 컬럼명 ==> 5번째
from 테이블명 ==> 1번째
where 조건절 ==> 2번째
group by 절 ==> 3번째
having 그룹함수조건절 ==> 4번째
order by 절 ==> 6번째

asc 는 오름차순 정렬(작은 거부터 큰 거) // desc 는 내림차순 정렬(큰 거부터 작은 거)

order by salary; = order by salary asc; -- asc는 생략가능하다.

order by salary desc; --- desc 은 생략불가능이다. 안 쓰면 오름차순이다.

-- 월급의 오름차순으로 나타내세요.
select employee_id, first_name, last_name
, nvl( salary + ( salary * commission_pct), salary) AS 월급
, department_id
from employees
--  order by nvl( salary + ( salary * commission_pct), salary) asc;
--  order by 월급 asc;
order by 4 asc;

★ 오라클은 index 값이 1부터 시작한다.
★ 자바는 index 값이 0부터 시작한다.

★ 정렬식에서 null 이 들어간 컬럼을 정렬하면, null은 오라클에서 가장 큰 것으로 취급한다.
==> MS-SQL 에서는 NULL을 가장 작은 것으로 간주한다.

===================================================================
===================================================================
===================================================================

07월 15일 오후수업

[1차정렬, 2차정렬]

    -- employees 테이블에서 부서번호별 오름차순 정렬을 한 후에 동일한 부서번호내에서는 
    -- 월급의 내림차순으로 정렬하여 사원번호, 사원명 월급, 부서번호를 나타내세요
    
    select employee_id AS 사원번호
        ,  first_name || ' ' || last_name as 사원명
        , nvl( salary + (salary * commission_pct), salary ) as 월급
        , department_id as 부서번호
    from employees
    order by 4 asc, 3 desc;

==> order by 4(부서번호) asc, 3(월급) desc;

============================[퀴즈]==================================

  -- employees 테이블에서 수당퍼센티지가 null 인 사원들만 
  -- 사원번호, 사원명, 월급(기본급여+수당금액), 부서번호를 나타내되 
  -- 부서번호의 오름차순으로 정렬한 후 동일한 부서번호내에서는 월급의 내림차순으로 나타내세요.
  
  select employee_id as 사원번호
  , first_name || ' ' || last_name as 사원명
  , nvl(salary + (salary * commission_pct), salary) as 월급
  , department_id as 부서번호
  from employees
  where commission_pct is null
  order by 4, 3 desc;
  
  
  -- employees 테이블에서 수당퍼센티지가 null 이 아닌 사원들만 
  -- 사원번호, 사원명, 월급(기본급여+수당금액), 부서번호를 나타내되 
  -- 부서번호의 오름차순으로 정렬한 후 동일한 부서번호내에서는 월급의 내림차순으로 나타내세요.
  
  select employee_id as 사원번호
  , first_name || ' ' || last_name as 사원명
  , nvl(salary + (salary * commission_pct), salary) as 월급
  , department_id as 부서번호
  from employees
  where commission_pct is not null
  order by 4, 3 desc;
  
   -- employees 테이블에서 월급(기본급여+수당금여)이 10000 보다 큰 사람들만
  -- 사원번호, 사원명, 월급(기본급여+수당금액), 부서번호를 나타내되 
  -- 부서번호의 오름차순으로 정렬한 후 동일한 부서번호내에서는 월급의 내림차순으로 나타내세요.
  
  select employee_id as 사원번호
  , first_name || ' ' || last_name as 사원명
  , nvl(salary + (salary * commission_pct), salary) as 월급
  , department_id as 부서번호
  from employees
  where nvl(salary + (salary * commission_pct), salary)>10000
  order by 4, 3 desc;
  
  -- employees 테이블에서 부서번호가 50번 부서가 아닌 사원들만
  -- 사원번호, 사원명, 월급(기본급여+수당금액), 부서번호를 나타내되 
  -- 부서번호의 오름차순으로 정렬한 후 동일한 부서번호내에서는 월급의 내림차순으로 나타내세요.
  
  select employee_id as 사원번호
  , first_name || ' ' || last_name as 사원명
  , nvl(salary + (salary * commission_pct), salary) as 월급
  , department_id as 부서번호
  from employees
  where nvl(department_id, -9999) <> 50
  order by 4, 3 desc;

===================================================================

[AND, OR, IN( ), NOT 연산자]

1. AND = TRUE ^ TRUE ^ TRUE  ==> TRUE
       = TRUE ^ FALSE ^ TRUE ==> FALSE

~이면서, ~하면서 는 and이다.

2. OR = TRUE ∨ FALSE ∨ FALSE ==> TRUE
     = FALSE ∨ FALSE ∨ FALSE ==> FALSE

~ 또는 는 OR이다.

3. where department_id = 30 or department_id = 60 or department_id = 80 이것과
   where department_id IN(30, 60, 80) 은 같은 말이다. 
   IN( )과 OR 은 같은 말이다.

4. NOT

--- employees 테이블에서 30번, 60번, 80번 부서에 근무하지 않는 사원들만 나타내세요
---  where NVL(department_id, -9999) != 30 and NVL(department_id, -9999) != 60 and NVL(department_id, -9999) != 80
--- NVL(department_id, -9999) not in(30,60,80)
** 부서번호가 NULL 값인 사원도 나와야 한다.

★ NULL은 존재하지 않는 것이기 때문에, 비교연산자를 사용할 수 없다. 그래서 NULL 처리를 해줘야 한다 >> NVL(department_id, -9999) NOT IN(30,60,80)
★ NULL 처리를 잘 해줘야 한다. (자바에서든, 오라클에서든)

-------------------------------------------------------------------------------------------------------------------

※ AND와 OR가 혼용되어지면 우선순위가 AND 가 먼저 실행된다.

== 틀린풀이 ==
where department_id = 30 OR department_id = 50 OR department_id = 60 AND
20000 <= nvl(salary + (commission_pct * salary), salary) * 12 AND 
60000 >= nvl(salary + (commission_pct * salary), salary) * 12


department_id = 60 AND 
20000 <= nvl(salary + (commission_pct * salary), salary) * 12 AND 
60000 >= nvl(salary + (commission_pct * salary), salary) * 12

이것만 제대로 실행된다.

department_id = 30 OR department_id = 50

그리고 얘네만 따로 실행된다.


== 올바른 풀이 ==
==> 연산자에 있어서 가장 최우선은 괄호( )이니 괄호를 쳐준다.

 where (department_id = 30 OR department_id = 50 OR department_id = 60) AND
          20000 <= nvl(salary + (commission_pct * salary), salary) * 12 AND 
          60000 >= nvl(salary + (commission_pct * salary), salary) * 12

==> in( ) 연산자를 쓰면 괄호 신경을 안 써줘도 된다.
==> in( ) 연산자 자체가 이미 괄호가 있는 연산자이다.

===================================================================

[>=, <= 를 대체할 수 있는 between A and B]

------ ***** 범위를 나타낼때는 >= AND =< 를 사용할 수 있는데, 또한 between A and B 를 사용하여 나타낼 수 있다.
------ ***** 컬럼명 between A and B 은 컬럼명값이 A 부터 B 까지 이다.( A 이상 B 이하 )

where department_id in(30,50,60) AND
          20000 <= nvl(salary + (commission_pct * salary), salary) * 12 AND 
          60000 >= nvl(salary + (commission_pct * salary), salary) * 12

위에 조건식을 아래와 같이 바꿀 수 있다.

where department_id in(30,50,60) AND
         nvl(salary + (commission_pct * salary), salary) * 12 between 20000 and 60000

===================================================================

[실무에서 주의사항]

대용량 데이터베이스인 경우 IN 연산자 보다는 OR 를 사용하기를 권장하고,
대용량 데이터베이스인 경우 between A and B 보다는 >= AND =< 를 사용하기를 권장한다.
왜냐하면 IN 연산자는 내부적으로 OR 로 변경된 후 실행되고, 
between A and B 도 내부적으로 >= AND <= 으로 변경된 후 실행되기 때문이다.
>> 데이터 처리 속도가 너무 느려진다.

--- 대용량 데이터베이스의 기준은 어떤 테이블의 행의 개수가 100만건을 넘을 경우를 말한다.
--- 소규모 데이터베이스의 기준은 어떤 테이블의 행의 개수가 1만건 미만인 경우를 말한다.

===================================================================

[범위연산자 2]


[날짜 & 시간]
sysdate = 년 / 월 / 일
current_date = 년 / 월 / 일
localtimestamp 년 / 월 / 일 / 시간
current_timestamp 년 / 월 / 일 / 시간 / 대륙&지역
systimestamp 년 / 월 / 일 / 시간 그리니치 천문대 기준

== 형식 바꾸기 ==
select sysdate, to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss')
from dual;

select sysdate, to_char(sysdate, 'yyyy') || '년'
from dual;

-------------------------------------------------------------------------------------------------------------------

select sysdate
       , to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss')
       , to_char(sysdate, 'yyyy-mm-dd am hh:mi:ss')
       , to_char(sysdate, 'yyyy-mm-dd pm hh:mi:ss')
from dual;

21/07/15	2021-07-15 16:21:19	2021-07-15 오후 04:21:19	2021-07-15 오후 04:21:19

-------------------------------------------------------------------------------------------------------------------

!!!! 중요 !!!! 날짜를 나타낼때 시,분,초가 없는 년,월,일만 나타내어주면 자동적으로 0시0분0초가 된다.
즉, 자정(그날의 시작)을 뜻한다.
   
년 / 월 / 일이 나오면 00시 00분 00초이다. 
우리는 12월 31일까지 모두 포함해야하는데 위처럼 쓰면 06/12/31/ 00:00:00이니 31일이 포함된거라 할 수 없다.

==> '06/12/31' 은 00:00:00 까지이니 ,12월 31일을 포함했다고 할 수 없다.
==> 그러니 06/12/31까지 포함하고 싶다면, '07/01/01'로 써야한다.

===================================================================

내일 오전에 평가 (객관식)
시험성적에 따라서 차등혜택 없음
통과만 하면 된다. 문제 20개, 점수 60 이상

끝나면 employees table 에서 주민번호 컬럼 추가하기, like 연산자 + 퀴즈, 단일행 함수(문자함수, 숫자함수, 날짜함수, 기타함수)
==> 생각을 좀 필요로 하니, 주의할 것

		String[] arr=new String[] {"java","css", "html", "javascript", "jsp"};
		
		List<String> strList = new ArrayList<>(Arrays.asList(arr));


