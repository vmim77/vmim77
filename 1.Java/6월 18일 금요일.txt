6월 18일

Class는 '설계도면'이라고 생각을 하면 좋다.
main 메소드는 실행을 하는 곳이다. public static void main(String[] args) 부분이 실행부분
main 또한 클래스이다. (=설계도면)

class는 '설계도면', object는 실행될 기능들이 있는 'main', instance는 실제로 실행된 'object'
==============================================================
[멤버변수 vs 지역변수]
초기화 : 어떤 변수에 값을 맨 처음에 넣어주는 것이다.
초기화부분 암기해야 한다. ★★★★★
멤버변수에 정수형(=int)은 '초기화'를 해주지 않으면 자동적으로 0을 넣어준다. (= int age = 0;과 같은 말이다.)

!!인스턴스 변수를 쓰려면 객체를 하나 만들어야 쓸 수 있다. (ex. age를 출력하고 싶으면 ma1을 먼저 만들어줘야 한다.)

local variable : 지역변수

지역변수는 자신을 감싸고 있는 중괄호에서만 쓰인다. 거기를 벗어나면 쓸 수가 없다.
지역변수는 값 초기화를 꼭 해줘야 한다.
지역변수는 변수가 갈색
지역변수 또한 같은 괄호 안에선 변수가 중복되어선 안 된다.

멤버변수는 클래스의 중괄호 사이에서는 어디서든지 다 쓰인다.
멤버변수는 변수가 파랑색
멤버변수의 클래스 괄호 안에 어디서든 변수이름은 중복되어선 안 된다. (int age가 이미 있기에 String age로 만들어도 사용이 불가능)

(정리)
클래스 영역에 정의한 변수는 필드(항목), 전역 변수(global variable), 멤버 변수(member variable)로 부르고
메소드 안에 있는 변수는 지역 변수(local variable)이 되겠다

멤버변수는 초기화(값 넣어주기)를 안해줘도 자동으로 넣어주고, 지역변수는 반드시 초기화를 해줘야 한다. (안 넣어주면 안 돌아간다.)

=============================================================
[메소드]
자바에서 소괄호가 있는 것은 단 2가지 '메소드, 생성자'이다.

인스턴스 메소드 또한 이름이 중복되어선 안 된다. (클래스 괄호에서 만든 메소드를 '인스턴스 메소드'라고 한다.)

1.return
return은 리턴값(결과값)을 받아줄 변수가 필요하다. (메소드의 데이터 타입과 똑같은)
자바는 리터문에서 리턴이 나오는 순간 작업을 종료시킨다.

return문을 사용한 메소드가 String 타입이라면, return 결과물을 가지고 있는 컨테이너도 String 타입으로 정의를 내려줘야 한다.
ex. String showInfo2( ) << 메소드가 String 데이터 타입이였으니, 
String info2 = ma.showInfo2()  << 메소드의 결과값을 가질 컨테이너도 String 형식으로 정의함.

2.void
void는 return값이 존재하지 않는다. 그래서 메소드 안에 return값이 없다. 

void를 그럼 왜 사용하느냐?
return은 항상 메소드의 데이터 형식을 지정해줘야 하고, 결과값을 받아줄 똑같은 데이터타입의 변수를 만들어야 하는데, void는 그럴 필요없이 간편하게 메소드 안에서도 바로 결과값을 출력할 수 있다.

(정리)
void는 sysout이 메소드 안에 있고, return문은 sysout이 메소드 밖에 있다.

*메소드 = 함수 


+
void에서는 '정의'단계에서 실행할 행동을 정해준다.
return에서는 계산만 하고, 호출 단계에서 행동을 정해준다.

==============================================================
[문자열 더하기]
문자열 + 문자열 = 문자열
문자열 + 숫자 = 문자열
숫자 + 숫자 = 숫자
숫자 + 숫자 + 문자열 = (숫자+숫자) + 문자열 

"안녕하세요" + "반갑습니다" => "안녕하세요 반갑습니다"
"안녕하세요" + 25 => "안녕하세요25"
20 + 30 => 50
"20" + 30 => "2030"
=============================================================
[static]

*같은 패키지에서는 import를 한 번만 치면 된다. (Main01에서 했으면 Main02, Main03은 바로 쓰면 됨)
*다른 패키지에서는 각각 import를 해줘야 한다.

static으로 안 쓰면 기능을 사용하려는 Main메소드에 매번 인스턴스를 만들어줘야 한다.
흔히 많이 쓰이는 메소드들은 static으로 만들면 쓰려는 곳에서 인스턴스를 안 만들어줘도 되고 바로 쓰면 된다.

*(static 메소드는 인스턴스( MyUtil util = new MyUtil(); )를 만들 필요가 없다. 그냥 MyUtil.currentTime();치면 아무 Main 메소드에서 사용 가능)
*같이 쓰는 것(스태틱)은 인스턴스를 만들 필요가 없다.
ex. 
스태틱 안 쓰면 
MyUtil util = new MyUtil();
util.currentTime();

스태틱 쓰면
MyUtil.currentTime();

*static 메소드는 '클래스 명. 메소드 명(  );' 식으로 호출한다.
=============================================================
[자료형]

1. 정수형의 기본은 int이다.
>> 성적처리는 0~100점 정도이니 저장용량을 아끼기 위해서 int가 아닌 byte를 사용한다.
>> 자바에서는 정수형 기본이 int여서 long 값의 숫자는 뒤에 소문자 l이나 대문자 L을 붙여줘야 long 값으로 인식한다.

자바는 항상 숫자를 int로 보기때문에 short에 넣어주려면 '강제형변환'을 해줘야 한다.

2. 실수형은기본은 double이다.  '소숫점 이하가 어디까지 찍겠냐'는 말이다. 
>> 소숫점 7자리까지 충분하다면 float // 135.3246235
>> 소숫점이 더 깊이, 많이 표현되고 싶다면 double // 135.3246234502345642 (메모리 낭비가 심함)

10/4 = 2
10.0/4 = 2.5
10/4.0 = 2.5
10.0/4.0 = 2.5

분자나 분모에 실수가 들어가줘야 답도 실수형으로 나온다.

3. 문자형

글자 딱 한글자만 '문자형', 글자 2개 이상은 '문자열'
한글, 특수기호, 영어를 모두 나타내는 것은 'Unicode'이다.
★문자형은 작은따옴표, 문자열이 큰 따옴표이다!!!!!

★암기! A : 65 / a : 97 / 0 : 48 / space(공백) : 32

★자바에서 데이터 타입이 byte 또는 short 또는 char 인 변수가 사칙연산(+ - * /)을 만나면 
        // 자동적으로 그 변수의 데이터 타입은 int 로 변하게 되어있다.!!!!
        // kor + eng + math ==> 자동적으로 int 타입으로 형변환(casting)됨.
        // (short)(kor + eng + math) ==> 강제 형변환(casting)


4. 불린
Boolean은 참과 거짓밖에 없다.
!true = false
!false = true

정수, 실수, 차, 불린까진 원시형 데이터 타입

객체는 참조형 변수이다.
객체는 RAM의 주소를 찾아서 정보를 가져오기 때문이다. (주소 참조형 변수)

[변수명]
길이 제한 X
대, 소문자 구분 있다.
첫글자 숫자 X 
특수문자 '_'와'$'만 가능
예약어(package, import, public, class) 불가
첫 글자 시작은 소문자로, 단어와 단어가 합쳐진거면 두번째 단어 시작자를 대문자로
=============================================================

다음주 생성자, 캐스팅, 연산자(★) - 증감연산자, 논리연산자, 할당연산자 등 , 계산기 만들기
예습할거면 연산자부분을 볼 것!
============================================================

​리턴 보조설명
sum이란 함수는 'left값과 right를 더한 값을 출력'하는 기능을 가진 함수입니다.
따라서 sum()함수를 호출하면 5가 출력되지만, sum()이란 함수 자체가 5란 값을 가지고 있는 것은 아닙니다.
그래서 sum()을 이용한 연산, 예를들어 sum(3,4)+6 이란 연산을 수행한다면 7+6의 연산결과가 나오는게 아니라
7과 에러코드 하나가 발생합니다
sum()이란 함수를 이용하여 연산을 하고 싶을 경우에는 sum()함수 안에 return값을 부여해 주어야 합니다.
=============================================================
어떠한 클래스에서 메소드를 만드는데 static을 하나 쓰면 빨간줄이 엄청 생긴다.
static 메소드는 인스턴스를 안 만들어야 사용할 수 있는 것이다. 
클래스 괄호에서 만들어진 변수(항목)들은 다 인스턴스 변수이다. (논스태틱 변수)

인스턴스 변수들은 객체를 만들어야만 쓸 수 있다. ( Member hongkdmbr = new Member(    ); )

Why?
항목으로 '아이디, 패스워드, 성명' 등이 있다면, 누구의 아이디이고 패스워드인지 구분을 해야하기 때문이다. 인스턴스 변수들은 사람들마다 다 달라야 하기 때문에 객체가 있어야 한다.
(이순신의 아이디, 엄정화의 아이디)

스태틱 메소드에는 스태틱 변수와 지역 변수만 들어올 수 있다!



