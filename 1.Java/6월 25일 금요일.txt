06월 25일 오전수업
while문, do~while문, 랜덤, 가위바위보 게임
==========================================
[while문]
for문과 문법은 대동소이하다.

변수의 초기화;

while(조건식) {
     조건식이 참이라면 반복해서 실행할 명령문을 실행하고,
     조건식이 거짓이라면 while의 {  } 이부분을 빠져나간다.
     
     반복해서 실행할 명령문;
     증감식
}

while도 break를 쓸 수 있다.
while도 continue를 쓸 수 있다.
허나, for문의 continue는 증감식으로 올라가라 하지만 while문의 continue는 while문의 조건식 괄호로 올라가게 한다.

==========================================
[do ~ while문]

안 물어보고 좋아하는지 싫어하는지 모른다.

do : 물어본다 ==> while(조건 : 싫어한다) ==> 그럼 다시 do (물어본다)를 안 한다. 

먼저 일단 해보고, 조건에 맞으면, 또 한다.
먼저 일단 해보고, 조건에 안 맞으면, 안 한다.

* 대부분 프로그래밍은 일단 실행한 다음에 다시 할건지 묻게하도록 짠다.
==========================================
[do ~ while로 Factorial 구하기]

어떤 값에서 매번 1씩 감해서, 1까지를 감한 모든 값을 곱한게 Factorial이다.

자연수만 들어와야 한다. 음수X, 실수X, 0X, 문자열X


문자열, 실수형을 입력하면 catch부분으로 가고

정수형을 입력했으나 0이나 음수를 넣으면 if절로 간 다음에 continue를 만나서 while의 조건식으로 가고 do가 다시 처음부터 시작한다.

==========================================
[do ~ while로 Factorial 구하기 + 다시 실행여부 넣기]

outer : for {실행여부에 따라 끝낼 무한루프

  do{ 팩토리얼 연산
    알고싶은 팩토리얼 수 

   for {연산용 (자동으로 끝난다.)} // end of 연산 for
    결과

   for {다시 실행할지 말지 묻는 무한루프
     if n => break outer; << 최상단 for를 끝낸다.
     if y => break << 다시실행할지 묻는 for를 끝낸다. 
     else << y나 n을 치라고 한다.
       }// end of 실행여부 for

  } while // end of do~while

}end of outer for;
==========================================
[do ~ while로 소수 구하기]

★ Scanner 넣었으면 맨 마지막 줄에 sc.close(); 꼭 넣기!
>> InputMismatchException는 import 선언을 해줘야 쓸 수 있다.

1. 경우의 수 : 자연수를 안 넣었을 경우
2. 경우의 수 : 0이나 음수를 넣은 경우
3. 경우의 수 : 둘 다 0보다 큰데 엔드넘버가 스타트넘버보다 크지 않을 때

★ 들여쓰기, 내여쓰기 꼭 확인할 것! 가독성이 좋아야 한다.


★ 시작 자연수에 똘똘이를 넣었는데 계속 무한반복되는 이유?

똘똘이엔터가 자연수로 바뀔 수는 없다. 
'스캐너 버퍼 = 똘똘이'까지가 들어갔는데 똘똘이 까지가 int에 넘어가려니 못넘어가서 오류가 떠서 스캐너버퍼를 지우는 sc.nextline으로 못넘어가고 아래에 catch로 내려간다. 

스캐너버퍼에는 아직 엔터가 남아있다.
똘똘이 다음에 엔터가 계속 스캐너버퍼에 남아있어서 계속 무한반복하는 것이다.

* nextint를 쓰면 신경써야할게 너무 많기 때문에 nextline이 편하다

==========================================

06월 25일 오후수업

[랜덤] => 인증번호 등에 쓰인다.

랜덤한 정수 = (int)(Math.random()*구간범위)+시작값;
구간범위 = Maximum - Minimum + 1 

0.0        (int)(0.0*(10-1+1))+1         ==>  1
0.23346438 (int)(0.23346438*(10-1+1))+1  ==>  3
0.67835431 (int)(0.67835431*(10-1+1))+1  ==>  7
0.99999999 (int)(0.99999999*(10-1+1))+1  ==> 10


Math.random은 보안상 취약하다고 한다. 그래서 앞으로 사용하지 말라고 한다.
Ramdom 클래스를 쓰라고 나온다.

Random rnd = new Random();
//int rndNum = rnd.nextInt(마지막수 - 처음수 + 1)+처음수;

==========================================
[홀짝 만들기]

다시 실행여부를 묻는 do~while을 제대로 선택한 경우인 else의 안에 넣어야 한다.

안그러면 if에서 0과 1중에 숫자를 잘 못 선택하면 메세지를 보내는데 do~while이 else 밖에 있으면 잘못선택한 후 코드가 다시 실행여부를 묻는게 나온다
==========================================
[숫자맞추기 만들기]




        