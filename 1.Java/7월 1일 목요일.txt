07월 10일 오전수업

객체지향 프로그래밍(Object Oriented Programming)

클래스 : 부품을 만들기 위한 설계도
객체 : 설계도를 통하여 직접 제품을 만든 것이다.

ex. Tv.class(설계도) => 인스턴스화 => Tv(제품)
ex2. Tv t = new Tv( );  ==> t는 Tv를 조작하기 위한 리모컨이다.
Tv타입의 인스턴스를 생성하고, 그 주소값을 t에 넘겨줘서 Tv.class에서 설계한 속성과 기능을 사용할 수 있게 한다.

===================================================

OOP의 4가지 특징
--> 1. 상속성(Inheritance) : 클래스의 재사용과 소스 코드의 중복제거를 목적으로 하는 기술
--> 2. 추상화(Abstraction) : 프로그램이 필요로 하는 실제 데이터들을 모델링하는 기술
--> 3. 캡슐화(EnCapsulation == 은닉화) : 객체지향의 가장 중요한 데이터 보호 기술
--> 4. 다형성(Polymorphism) : 상속을 이용하여 여러 클래스 타입을 하나의 클래스 타입으로 다루는 기술

===================================================
GujikjaCtrl.class는 신규 회원가입 메소드, 구직자 모두보기, 연령대에 해당하는 구직자 찾아보기 등 guArr 배열의 정보를 가져와서 가공해서 출력하는 등의 Gujikja 정보를 컨트롤하는 메소드들이 모여있다. (메소드들이 모인 곳)
>> 이곳에 주로 메인메소드에서 입력된 스캐너값과 배열값들이 파라미터로 넘겨져서 연결돼있다.

Gujikja.class는 단순히 각각 구직자들의 필드값을 입력받는 클래스이다. (필드들이 모인 곳)

★ Gujikja의 필드에 들어간 이순신, 유관순, 엄정화의 필드 값들은 껏다 켜도 위에 코드를 기술해 놓은 것이 있기 때문에 콘솔을 닫고 다시 실행해도 배열에 이미 들어가져있지만, 강감찬이나 이혜리 등은 스캐너를 통해서 입력한 값이지 코드에 적혀져 있지 않아서 콘솔을 껏다 키면 사라진다.
(★ 콘솔을 종료하면 메모리에 할당된 주소들이 사라지면서, 배열에 추가되어진 값들이 소멸이 된다.)


Main 메소드에서는 코딩을 하지 않고, Gujikja.class를 컨트롤하는 GujikjaCtrl.class을 만들어서 Gujikja에 입력된 필드값들을 끌어와서 사용한다.

아이디, 암호, 성명이 뭔지 알아야 하기 때문에 스캐너가 필요하다. 
스캐너 실행은 메인에서 한다.
그래서 메인에서 받은 내용을 GujikjaCtrl.class에 넘겨준다.

생성되어진 Gujikja의 필드값들을 저장소에 넘겨야 한다. 그래서 Main 메소드에서 배열을 만든 것이다. << 이 배열은 구직자만 저장하는 저장소이다. (5개를 넣을 수 있다.)

GujikjaCtrl에 배열을 넘겨준 이유는 연결을 시켜서 GujikjaCtrl에서 가공된 구직자에 대한 필드값들을 배열에 다시 넣어서 저장시키기 위함이다.

===================================================

[아이디 유효성 검사]

System.out.println("1. 아이디 : "); 
String userid = sc.nextLine( ); 

여기에서 사용자가 아이디로 쓰고 싶은 문자열 값을 받아서 userid에 넣는다.

if( userid != null && userid.trim( ).isEmpty( ) ) {
     System.out.println(">> 아이디는 공백만으로는 될 수가 없습니다.<<"
     continue;
}

입력된 userid의 값이 null이 아닌데, 공백이라면 메세지를 출력하고, 무한반복 do~while문의 조건식으로 보낸 다음에 다시 시작되도록 한다.

boolean isDuplicate = false; 

아이디가 중복이라면 true로 바꾼다.
* Duplicate : 중복

for(int i=0; i<Gujikja.count; i++){
     if(guArr[i].userid.equals(userid))  {
           isDuplicate = true;
           break;
     }
}

GujikjaCtrl 에서는 입력받은 필드값들을 모두 유효성 검사한 후 문제가 없을 시, guArr[Gujikja.count++] = gu; 로 guArr에 값을 옮기고, count를 1 늘려서 현재까지의 인스턴스 갯수를 파악한다. 

>> 실제 저장된 값만큼만 검사하면 된다. 괜히 모든 배열을 검사해봤자 비어있는 곳에는 null값들이 들어가 있어서 NullPointerException을 유발한다.

만약 지금까지 저장된 구직자들의 정보를 모두 반복해서 가져와봐서 새로 입력된 userid와 똑같은 아이디가 발견되면 isDuplicate에 true를 반환해서 중복임을 알리고, 더 이상 검사할 필요가 없으니 break;를 줘서 아이디 중복검사용 for문을 나가게 한다.

if(isDuplicate) {
     System.out.println(">>당신이 입력하신 " + userid + "는 이미 사용중입니다.<<");
}
else {
    gu.userid = userid;
    break; 
}

중복이라면 메세지를 출력해서 사용자에게 알리고, 중복이 아니라면 Gujikja 인스턴스에 userid 인스턴스 변수에 값을 옮기고 무한반복 do~while을 빠져나가게 한다.

=================================================

[암호 유효성 검사]

정책 : 8글자 이상 ~ 15글자 이하, 영어 소문자 & 대문자, 특수문자, 숫자가 모두 포함되어 있어야 한다.

해당 메소드는 MyUtil.class에 스태틱메소드로 선언해놔서 어떤 클래스든지 끌어다 쓸 수 있게 만들어놨다.

1. 입력된 값이 null값인가 확인
2. null값이 아니면, toCharArray로 글자 하나하나를 배열로 넘긴다.
3. 배열의 길이를 length로 확인한다.
4. wrapper 클래스인 Character를 이용하여서 isUpperCase, isLowerCase, isDigit를 돌린다. 만약 위에서 영어 소문자, 대문자, 숫자를 모두 걸렀는데도 문자가 남았다면 특수문자로 간주한다.
5. 글자 수도 맞고, 소문자&대문자&숫자&특수문자도 모두 들어가있다면 return true;를 반환한다.

if(!MyUtil.isCheckPasswd(passwd) ) { // 정책에 틀리다면 false를 반환, !로 인해 true가 되어 아래 메세지를 출력
     System.out.println("비밀번호 정책에 맞지 않습니다. 다시 입력해주십시요");
}
else {
     gu.passwd = passwd;
     break;
}

몇 번을 틀릴지 모르기 때문에 do~while(true);로 감싸주고, 정책에 맞게 입력한 경우 break를 줘서 탈출시킨다.

================================================
[성명 유효성 검사]


do {
     System.out.print("3.  성명 : ");
     String name = sc.nextLine();
     if(name != null && name.tirm( ).isEmpty( )) {   // 입력받은 성명값이 null이 아닌데 공백이라면

          System.out.println("성명은 공백만으로 될 수 없습니다.");
     }
     else {
         gu.name = name;
         break;
      }
} while(true);



===================================================
[주민번호 유효성 검사]

do  {
     SSystem.out.print("4.  주민번호 앞의 7자리만 : ");
     String jubun = sc.nextLine();

     if(gu.isCheckJubun(jubun))  { 
     // 스캐너로 입력받은 지역변수 주민번호의 값을 넘겨서 검사시킨다. 
     // 이 메소드는 Gujikja.class에 있다. 주민번호에 문제가 없으면 true 반환




          gu.jubun = jubun;
          break; // 입력한 주민번호가 7자리이면서 문제가 없어야 do~while을 빠져나간다.
     }
     else {
          System.out.println(">>> " + jubun + "은 잘못된 주민번호 7자리 앞자리 입니다. <<<");
     }
} while(true);


boolean isCheckJubun(String jubun)

1. 매개변수가 null인지 확인, null이면 false 반환
2. toCharArray로 char 타입 배열로 변환
3. if문으로 글자수가 7글자가 아니면 false 반환
4. for 반복문으로 isDigit로 글자 하나하나를 봐서 숫자가 아닌게 있으면 false반환
5. substring(2, 4)로 월 두자리 수를 받아온다. 그 후 if문으로 1월에서 12월 사이를 벗어나면 false
6. day도 마찬가지로 받아와서 각 월별 일 범위를 벗어나면 false를 반환

ex. 
if( ( month == 1 || month == 3 ||  month == 5 ||  month == 7 ||  month == 8 ||  month == 10 ||  month == 12 ) && !(1 <= day && day <= 31)	) 

// 1 3 5 7 8 10 12월인데 일이 1~31일의 범위를 벗어난다면
	return false;
		
if( ( month == 4 || month == 6 ||  month == 9 ||  month == 11 ) && !(1 <= day && day <= 30)) 

// 4 6 9 11월인데 일이 1~30일의 범위를 벗어난다면
	return false;
			
if( ( month == 2) && !(1 <= day && day <= 29)	) 

// 2월인데 일이 1~29일의 범위를 벗어난다면
	return false;

7. 성별을 나타내는 7번째 숫자가 1~4 사이가 아니라면 false
8. 위의 유효성검사 if들을 다 통과했다면 return true;

===================================================
이 밑에까지 내려온 값들은 guArr[Gujikja.count++] = gu; 로 배열에 넣어주고 count값을 1 증가시킨다.

또한 return true;를 하여서, 메인메소드에서 해당 메소드가 true면 가입성공의 메세지를 출력하게한다

===================================================
Gujikja - String showInfo( ) 
구직자 정보를 보여주는 메소드

Gujikja 인스턴스에 등록된 필드값을 return해준다.
이 클래스의 필드값들만 보여주면 되기 때문에, 파라미터가 필요없다.
===================================================
GujikjaCtrl - showall( )

GujikjaCtrl - showAll(Gujikja[ ] guArr) {
   
   for(int i=0; i<Gujikja.count; i++)
     System.out.println(guArr[i].showInfo( ) );
}

>> 지금까지 배열에 입력된 구직자들의 정보를 가져와서 해당 번호의 배열에 저장된 구직자의 정보를 반복해서 찍어내준다.
>> 구직자들의 정보를 받아오기 위해서 파라미터로 배열을 선언했다.

================================================
[검색 서브메뉴]

메인메소드 메인메뉴에서 3번을 입력하면 넘어가지는 서브메뉴

GujikjaMain.class에서 메인메소드 괄호밖에 static void searchMenu를 만들어준다.

>>스태틱메소드로 만든 이유는 같은 클래스에서 실행되는데, 인스턴스 선언을 해야하는 것을 피하기 위해서이다.

★ searchMenu 메소드가 Main메소드 아래에 위치한 이유

1. searchMenu 메소드가 Main메소드 아래에 위치한 이유는 메인메소드에서 메뉴가 있는데 거기서 3번을 입력하면 '검색'이라는 새로운 메뉴를 보여주고 싶은거여서 서브메뉴로써 메인메소드 아래에 둔 것이다.
2. 그저 별도의 메소드를 하나 뺀 것인 뿐이다.
3. 또한 현재 메인메소드의 코드양이 너무많기 때문에 지저분해서 아래에 따로 빼놔서 깔끔하게 해놓은 것이다.
4. 마지막으로 서로 연결된 메소드이기 때문에 같은 곳에 놔야 일목요연하게 관리하기 편하다.

static void searchMenu(Scanner sc, GujikjaCtrl ctrl, Gujikja[] guArr)
- 메뉴를 선택하게 하기 위해서 스캐너를 넘겨받았다.
- GujikjaCtrl에 있는 '해당 연령대에 맞는 구직자 찾아보기' 메소드등을 받기 위해서 받았다.
- 또한 배열에 구직자들의 정보가 있기에 넘겨받았다.

================================================
프로그램은 처음부터 다 못짜고 필요한것을 그때마다 끌어와서 하는 것이다.

★파라미터에 값을 넣어주면 그 메소드가 있는 클래스에 파라미터 값을 넘겨준다.

★근데 컨트롤러엔 또 배열이 없으니, 배열도 넘겨줘서 입력받은 연령대를 기반으로 찾게 해준다.

구직자.java에 주민번호가 있는데, 거기서 나이만 알면 연령대를 알 수 있다.

★ 소스의 중복을 제거해서 줄이는게 좋다.

★ guArr[i] = 구직자임
================================================

[검색 서브메뉴 1번. 연령대검색]

1. 연령대 입력값을 스캐너로 받아온다.

2. String 타입으로 받아온 입력값을 int ageline = Integer.parseInt;로 정수형으로 변환
   2-1. 여기서 NumberFormatException이 발생할 수 있기에 try & catch로 감싼다.
   2-2. 또한 오류가 몇 번 생길지 모르기에 가장 바깥에는 do~while 무한반복으로 감싼다.

3. 입력받아서 검사해줄 연령대의 범위는 0 ~ 70이다.

4. if( ageline%10 == 0 && ( 0 <= ageline && ageline <= 70 ))
>> ageline은 10으로 나눴을 때 딱 떨어지면서, 0~70 사이여야 한다.

5. 정상인 경우 ctrl.search(ageline, guArr); 로 넘겨준다.
>> 입력받은 연령대를 알기위해서 ageline을 넘기고, 회원들의 정보를 찾아야하니 guArr을 넘김

7. for반복문으로 구직자 하나하나의 나이를 가져온다.
>> 내 나이가 20 24 29이건 상관없이, 20/10*10, 24/10*10, 29/10*20 으로 연령대를 만들고 ageline과 비교한다.

[나이를 구하는 메소드]
주민번호의 7번째 자리를 substring으로 가져온다.

"1", "2"이면 1900년대 생이니, int birthYear = 1900 + Integer.parseInt(jubun.substring(0, 2));
ex. 1900 + 95 => 1995
"3", "4"이면 2000년대 생이니, 2000+를 해준다.

Calendar currentDate = Calendar.getInstance(); 
int currentYear = currentDate.get(Calendar.YEAR);

위의 날짜클래스를 이용하여서 현재년도를 받아온다.

int age = currentYear - birthYear +1;

return age;

================================================
07월 01일 오후수업

[OOP 프로그래밍]

Gujikja.class (정보를 입력만 받는다. == 필드 역할)
1. 구직자필드 ( 아이디, 암호, 성명, 주민번호, 핸드폰번호, 희망연봉 )
2. 주민번호 검사 메소드
3. 구직자 정보 보여주기
4. 나이 알려주는 메소드

GujikjaCtrl.class (정보입력, 입력된 정보 검사, 입력된 정보 활용 == 메소드 역할 )
1. 회원가입 메소드
2. 아이디 유효성 검사
3. 비밀번호 유효성 검사
3. 성명 유효성 검사
4. 구직자 모두 보기 메소드
5. 연령대에 해당하는 구직자 찾아보기 메소드
6. 성별로 구직자 찾아보기 메소드
7. 특정 연령대에 해당하는 회원중 특정 성별 회원만 출력해주기 메소드
8. 모든 구직자 희망급여보기 메소드


GujikjaMain.class (실행)
1. 메인메뉴
2. 서브메뉴(검색)


컨트롤러는 정보를 가지고 찾는 기능등을  해준다. (기능)
구직자는 정보를 받아서 저장한다. (필드)

duplicate : 중복

================================================
[성별로 구직자 찾아보기]
	// !!!! === method 의 overloading === !!!! //
	// ==> method 의 이름이 같더라도 
	//     파라미터의 개수나 또는 순서, 타입이 다르면 서로 다른                     method 로 인식한다.

입력받은 스트링형 문자와 배열을 넘겨줘서 찾게 한다.

[내가 구현한 코드]
1. 메인메소드에서 "남" 또는 "여" 입력

2. 메인메소드에서는 정확히 "남", "여" 인지 확인하고 맞으면 컨트롤러의 search 메소드로 넘김 

3.search 메소드에서는  모든 구직자들의(guArr[i]) 주민번호를 근거로 남, 녀를 구하는 Gujikja의 getGender 메소드를 호출 

4.Gujikja 에서는 들어온 jubun 인스턴스변수에 들어온 값들을 모두 확인하여서 1 또는 3이면 getGender( ) 메소드가 "남"이란 값을 반환받게 함.

5. GujikjaCtrl에서는 그럼 guArr[i].getGender( )는 "해당 구직자의 성별"이 되기에 guArr[i].getGender( ).equals(gender)로 비교해서 입력받은 성별과 똑같은 구직자의 정보를 출력한다.

★ guArr[i] = 구직자임
================================================
[연령대및 성별검색]
// 20대 중에 남자, 30대 중에 여자


1. 연령대에 맞는 회원들만 뽑아옴
2. 거기서 선택한 성별과 구직자의 성별이 맞는 것들만 출력함

(GujikjaMain)
case "3" : //연령대및성별검색


do {
   try {
          System.out.print("▷ 연령대 => ");

          String sAgeline = sc.nextLine( );
          int ageline = Integer.parseInt(sAgeline);

          if( ageline&10 == 0 && (0<=ageline && ageline <= 70) ) {  // 받은 연령대가 해당 조건에 만족하면 이제 성별을 받는다.
                    String gender=" ";
                    do {
                              System.out.print("▷성별[남/여] => ");
                              gender = sc.nextLine( );

                              if("남".equals(gender.trim( )) || "여".equals(gender.trim( ))) { // "남"과 "여"중에 하나를 정확하게 받았다면
                                   break; // 성별을 제대로 칠때까지 무한반복하는 do~while을 벗어남
                                }
                              else  {
                                   System.out.println{">> 남 또는 여 만 입력하세요!! <<");
                                     }
                         } while(true); // 성별을 제대로 입력할때까지 반복하는 do~while

                    ctrl.search(ageline, gender, guArr); 
                    break; // 가장 바깥쪽 do~while을 벗어난다.
         } // 연령대 조건 if
        else {
               System.out.println("검색할 수 없는 연령대 입니다.");
             }
      }  catch(NumberFormatException e)  { // sAgeline에 문자열, 실수형이 들어오면 여기로 떨어진다.
                System.out.println(" 정수만 입력하세요!! ");
          }
} while(true); // 제대로 입력한 ageline, gender와 guArr을 넘기고 break하면 나온다.

                           

(GujikjaCtrl)
void search(int ageline, String gender, Gujikja[] guArr)

1. for 반복문으로 구직자별로 (guArr[i]) 연령대( guArr[i].getAge( )/10*10 )을 가져와서 입력된 연령대 ageline과 비교한다.
2. 내가 찾고자하는 연령대와 가져온 구직자의 연령대가 똑같으면 그 구직자의 주민등록번호 마지막 자리 숫자를 빼온다.
3. 내가 검색할 성별을 "남"을 선택했는데 그 구직자의 주민등록번호 숫자가 "1"또는 "3"이면 그 구직자의 정보를 출력한다.

===================================================
[정리]
★ 추상화(Abstraction)는 필요한 필드와 필요한 메소드만 그때그때 만드는 것이다.

Gujikja 클래스는 구직자의 정보를 받는 곳이다. (필드 역할 비중이 크다.)
GujikjaCtrl는 구직자의 회원가입 기능, 입력된 정보 유효성 검사, 구직자 모두보기, 찾아보기 등이 있다.(기능 역할 비중이 크다.)
GujikjaMain은 다른 클래스들에서 만든 메소드와 필드를 호출해서 실행하는 곳이다. 
- 메인메뉴 : 구직자 회원가입, 구직자 모두보기, 검색, 프로그램 종료
- 서브메뉴 : 연령대 검색, 성별 검색, 연령대 및 성별 검색, 메인으로 돌아가기

================================================
[캡슐화]
= 은닉화. EnCapsulation
객체지향의 가장 중요한 데이터 보호 기술

ex. 가루약을 캡슐에 넣으면 안이 안 보이듯이, 감추게 하는 것이다.

아무것도 안 쓴게 'default'이다.
ex. String userid; 

탬플랫 추천에서 빨간색은 'private', 초록색은 'public'이다.

Gujikja.class에서 private int hopeMoney;를 하면, 
GujikjaMain에서 hopeMoney에 값을 넣을 수 없다.
>> 바로 막 바꿔주면 안되고, 메소드를 통해서 유효성 검사를 하고서 올바른 값이면 그제서야 바꿔주는 것이다.

private 는 자기 자신 클래스에서만 사용할 수 있지, 다른 클래스에서는 사용할 수 없다. (숨긴 것이다. 은닉화. 캡슐화)
 

** DecimalFormat df = new DecimalFormat("#,###");
** df.format(값) 
** 3자리마다 컴마찍은 스트링형으로 바꾼다.
================================================
[모든 구직자 희망급여보기 메소드]

set - 값을 넣어주기
get - 값을 불러오기

================================================
[핸드폰 번호]
개발자가 정한대로 받기 위해서, 일단 private로 제한자를 준다.

★ 대부분 필드를 만들 땐, private로 막아둔다. (무분별한 변수의 값이 변경되는 것을 막기 위해서)

★ 값을 넣기 위해서 열어줄때는 메소드를 만들어서, 값을 변경할 수 있게 해준다.
( 대신에 메소드 안에 유효성 검사를 넣어서 맞으면 값을 변경할 수 있게 해준다. )

[getter, setter]

source -> Generate Getters and Setters

[정리]
필드를 프라이빗으로 다 막아버리고 메소드로 getter, setter를 해준다.
입력받은 것이 형식에 맞으면 setter로 변수에 넣어주고, 아니면 내보낸다.


내일 : 캡슐화 마무리, 상속(부모클래스, 자식클래스) - 구인회사 만들기