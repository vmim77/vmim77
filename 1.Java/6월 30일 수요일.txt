06월 30일 오전수업

[String]
StringMain.java

[split]
1. 문자열.split("구분자")
"문자열"을 "구분자"로 잘라서 String 타입의 배열로 돌려주는 것이다.

구분자는 콤마(,), 탭(   ) 등도 가능하다.
구분자로 . | / 등 특수문자를 사용하려고 할 경우에는 구분자로 인식을 못할 경우가 많다. 
>> 그러므로 쓰고싶다면 역슬래시(\\)나 구분자를 대괄호([  ])로 씌워주면 된다.


★ split가 나오면 구분자 앞에 역슬래시를 2개 붙히던지, 구분자를 [  ]로 씌워준다.
★ 콤마(,) 또한 역슬래시 2개와 대괄호를 붙혀서 쓰는 것이 좋다.


2. split을 적용할 문자열의 구분자가 서로 다른 경우

ex. foodes = "파스타,국밥.볶음밥	고구마|계란말이";

foodArr = foodes.split("\\,|\\.|\\	|\\|");로 써준다.

[,] | [.] | [	] | [|] 식으로 써준다. 여기서 |는 or을 의미한다.

foodArr = foodes.split("[,.\t|]");; 로 써도 괜찮다.
>> 대괄호속의 나오는 구분자 한 개마다 인식하여서 구분한다.

3. 정규표현식으로 구분하기

\\d : 소문자 d는 숫자가 뭔지는 모르지만, 숫자를 기분으로 구분한다.
\\D : 대문자 D를 쓴다면 숫자가 아닌 것(영문자, 특수기호)를 구분으로 짜른다.


★ 자바에서는 역슬래시를 '이스케이프 문자'라고 부른다.
>>""는 문자열 시작과 끝을 의미한다. 허나, 출력에 쌍따옴표를 출력하고 싶다면,     \"\" 식으로 쓰면 된다.
>> 문자열 시작의 기능이 아닌, 실제 쌍따옴표로 표현하고자 해서 이스케이프 문     자를 쓴 것이다.
>> 역슬래시 자체를 쓰고 싶다면, 마찬가지로 \\로 쓰면 된다.
ex. "C:\\movie\\koreamovie\\크루엘라.mp4"

=====================================================

[join]
String.join("구분자", 문자열배열명)
문자열배열을 "구분자"로 합쳐서 String 타입으로 돌려주는 것이다.

★ 문자열배열만 사용 가능하다.

{"한SK","두SK","세SK","네SK","오SK"} ==> 한SK-두SK-세SK-네SK-오SK
=====================================================

[replaceAll]
"문자열".replaceAll("변경대상문자열", "새로이변경될문자열");

ex. names = names.replaceAll("석규", "SK"); // names의 "석규"들을 모두 찾아서 "SK"로 바꾸고 String으로 반환한다.

[replaceFirst]
names = names.replaceFirst("SK", "석규"); // 맨 첫번째에 있는 "SK"만 "석규"로 바꾼다.
// 한석규-두SK-세SK-네SK-오SK

=====================================================

[startsWith]
"문자열".startsWith("찾고자하는문자열")
"문자열"에서 "찾고자하는문자열"이 맨 첫번째에 나오면 true를 반환, 맨 첫번째에 안 나오면 false

[endsWith]
"문자열".endsWith("찾고자하는문자열")

=====================================================

[trim]

★ 문자열중 공백 제거하기 SpaceDeleteMain4

=== 13. "문자열".trim()  === 
"문자열".trim() 은 "문자열"의  좌,우에 공백이 있으면 공백을 모두 제거하고서 반환.
사이에 있는 공백은 못 지운다.


(경고창 보는 법)
at my.util.MyUtil.deleteComma(MyUtil.java:151)  << 최종결과물은 여기를 손 봐야한다.
at my.day09.b.string.StringMain.main(StringMain.java:552) << 최종결과물에 저런 오류가 뜬 이유는 여기이다.

Myutil.deleteComma에 str.trim( )을 추가하여 혹시모를 공백이 들어간 숫자가 들어오는 것을 막는다.

=====================================================

[isEmpty]

"문자열".isEmpty()
>> "문자열"이 아무것도 없으면 true를 반환한다. // ""는 true
>> "문자열"이 뭔가 있으면 false를 반환한다. // " " false , 스페이스바도 뭔가 들어간 것이다.

null과 ""는 다르다.

=====================================================
[toUpperCase]
"문자열".toUpperCase 
"문자열"에 소문자가 있으면 모두 대문자로 변경해서 반환.

"My Name is Tom 입니다." ==> "MY NAME IS TOM 입니다."


[toLowerCase]
"문자열".toLowerCase
"문자열"에 대문자가 있으면 모두 대문자로 변경해서 반환.

"My Name is Tom 입니다." ==> "my name is tom 입니다."

[equals]
"문자열".equals("비교대상문자열") 

대문자와 소문자를 구분하면서, "문자열"과 "비교대상문자열"의 값이 일치하면 true, 다르면 false

[equalsIgnoreCase]
"문자열".equalsIgnoreCase("비교대상문자열")

대문자와 소문자를 구분하지 않으면서, "문자열"과 "비교대상문자열"의 값이 일치하면 true, 다르면 false



★★★★★ 
s.equals("korea".trim())식으로 쓰면 배열 중에 null이 있어서 NullPointerException이 뜬다.
그래서 앞에 비교대상에는 항상 상수가 와야한다.
앞에는 null값이 절대 못들어오게 해야한다.
상수.equals(변수) 가 올바르다.

* 블록을 잡고 ctrl + shift + y는 소문자화
* 블록을 잡고 ctrl + shift + x는 대문자화

★★★★★
웹에 들어가면 String 클래스를 많이 쓰니깐, 까먹으면 StringMain.java를 계속해서 참고하자

=====================================================

[String Builder]

// StringBuffer 와 StringBuilder 는 이름은 다르지만 사용하는 방법은 똑 같다.
// StringBuffer 는 multi thread 를 지원해주므로 주로 게임프로그래밍에서 사용한다.
// StringBuilder 는 multi thread 를 지원해주지 않기에 주로 웹프로그래밍에서 사용한다.
// 그런데 StringBuffer 는 StringBuilder 보다 무거워서 빨리 동작하지 못한다. 
// 그래서 웹프로그래밍이라면  StringBuilder 를 더 선호한다.


[String Builder 초기화]

1. sb = new StringBuilder();
2. sb.setLength(0); // 길이를 0으로 하면 된다.

* 배열에서 길이가 1이면 0번째 호실에 값이 있는거고, 길이가 0이면 null인 것이다.

=====================================================
06월 30일 오후수업

1. Calendar
2. 객체지향개념

▷두 가지(자격증공부 & 국비지원공부)를 동시에 하면 가장 좋은데, 힘들다면 취   업쪽에 우선순위를 둔다.
▷조금 힘들다면 필기만 보고, 실기는 수료한 다음에 구직활동하면서 도전한다.
▷취업은 뒤로하고, 자격증을 따려고 하면 절대 안 된다.


[Calendar] 

★ 캘린더는 암기하기 힘드니, 필요할 때마다 꺼내서 보면 된다.	

====================================================
★ [객체지향개념]

  ※ OOP 의 4가지 특징(!!!!필수암기!!!!) ★★★★★
  --> 1. 상속성(Inheritance) : 클래스의 재사용과 소스 코드의 중복제거를 목적으로 하는 기술 
  --> 2. 추상화(Abstraction) : 프로그램이 필요로 하는 실제 데이터들을 모델링하는 기술 
  --> 3. 캡슐화(EnCapsulation == 은닉화) : 객체지향의 가장 중요한 데이터 보호 기술   
  --> 4. 다형성(Polymorphism) : 상속을 이용하여 여러 클래스 타입을 하나의 클래스 타입으로 다루는 기술 

★ [추상화]

구인구직프로그램을 만드는데 혈액형, 신장 등은 필요가 없다. 필요한 것만 뽑는게 '추상화'이다.

* 기본생성자는 생략되어있다.
* 파라미터 생성자를 만들면 기본생성자는 사라진다.


1. 주민번호 검사용 메소드를 만든다. (올바르게 숫자를 넣었는지, 뒷자리 첫번째가 1,2,3,4 외에 숫자를 넣었는지, null값 넣었는지 등 ) ==> 유효성 검사



★ 메인에서는 웬만하면 코드를 안 짜는 것이 좋다. 메인은 실행만 하는게 좋고, 코드를 짜는 것은 다른 class에서 하는 것이 좋다.
>> 취업하고선 분업화해서 A는 구직자, B는 구인회사, C는 채용 등을 나눠서 만들게 하고, 다 만들고나선 메인메소드에서 호출만하게 한다.


1. 주민번호 검사 메소드 만들기
2. 구직자 회원가입 메소드 만들기



[개선된 for문]

String [] strArr = {"일순신", "이순신", "삼순신"};

for(int i=0; i<strArr.length; i++){
	system.out.println(strArr[i]);
}


for(String s : strArr){ // 얘는 자동적으로 이 배열의 갯수만큼 반복해서 s에 n번째 값을 넣어준다.

	system.out.println(s);
}




		