6월 22일 

(오전)
* 학번 같은 경우에는 맨 앞에 0이 나올 수 있기때문에 int를 쓰면 못 넣을 수도 있으니 String으로 만든다.
=======================================================
[스캐너]

Scanner sc = new Scanner(System.in);
				
sc.close();

기본적인 스캐너 형태

Byte.parseByte : String 타입을 byte 타입으로 바꿔준다.
Integer.parseInt : String 타입을 int 타입으로 바꿔준다.

boolean checkJumsu(byte jumsu) 메소드는 경우의 수가 점수 범위에 맞는지, 틀린지만 있기 때문에 boolean 타입을 준다.

일단 지역변수로 국어점수를 받은 다음에, 국어점수가 범위에 맞는지 검사해야한다.
sj.checkJumsu(kor);에 지역변수 국어점수를 넣어서 검사식을 돌린다.

★ main()메소드내에서  return; 은  main()메소드에서 작업중인 것을 종료해라는 말이다. 즉, 프로그램을 종료해라는 말이다.

어차피 sj.checkJumsu(kor); 자체가 boolean 타입의 결과물이 나오므로, boolean 변수에 넣어줄 필요가 없다.

parseByte는 numberformatexception 오류를 유발 시킬 수 있다.

* 들여쓰기, 내어쓰기 신경써서 코드 작성해야 한다.

점수가 0 ~ 100점 사이로 들어왔는지 확인하는 메소드 만들기
나이가 20 ~ 50 사이로 들어왔는지 확인하는 메소드 만들기
점수나 나이에 문자열이 들어오면 에러 메세지를 나타내게 하기
점수에서 문제인지 나이에서 문제인지 파악해서 알맞은 메세지 나타내게 하기
성적 출력 메소드 만들기

★ total을 필드로 만든다면, 작동하기는 하지만 내가 직접 값을 넣어줘야 하기 때문에 지역변수로 선언한 것이다.
★ 국어 영어 수학 이 3과목 점수만 알면 총점, 평균, 학점이 다 자동적으로 나오니 굳이 필드로 만들어줄 이유가 없다. (추상화 필요한 것만 뽑는다.)
★ 필드에 쓸 때 없는 것을 굳이 만들어줄 필요는 없다.

* void showInfo()는 그냥 결과물만 찍어주면 return 시켜줄 필요가 없다.

* sungjuk을 파라미터있는 생성자를 이용하여 안 한 이유는 스캐너를 이용해서 데이터를 입력받자 찍어내줘야 하는 코드들도 섞어서 써야하기 때문에 번거로워서 파라미터가 없는 생성자를 이용한다.

매개변수 생성자의 주 목적은 Main에서 인스턴스를 만들자마자 매개변수에 임의의 값을 넣어서 field를 초기화 하는 것, 허나 스캐너를 이용한 SungjukMain은 사용자가 키보드 입력을 한 값을 field에 넘겨서 출력하는 class지, 각 사람 별로(이순신, 엄정화) 인스턴스를 만들지 않기에 기본생성자를 사용한다.

=======================================================
[Wrapper]

------------------------------------------------
기본자료형(원시형, primitive)     wrapper 클래스
------------------------------------------------
byte                           Byte 
short                          Short
int                            Integer  *
long                           Long
char                           Character *
float                          Float
double                         Double
boolean                        Boolean 
------------------------------------------------

기본자료형은 데이터 값만 저장하는 저장소 역할!
wrapper 클래스는 데이터 값 저장하는 저장소 역할 + 클래스이기 때문에 클래스 역할도 한다. (ex. Integer.parseInt, Double.parseDouble)

wrapper 클래스는 char 등이 하는 일은 다하면서, 스태틱 클래스가 아주 많다.
- 대문자로 만드는 스태틱 메소드, 소문자로 만드는 스태틱 메소드
- 대문자인지 소문자인지, 숫자(Digit)인지 감별해주는 스태틱 메소드

if( 65 <= ch2 && ch2 <= 90) 이거 보다는 if(Character.isUpperCase(ch2)) 이게 더 쉽다!


★ 위치값을 알려주는 index가 있는데 index는 0부터 시작한다.
★ DataBase는 1부터 시작한다.
=======================================================
(오후)

[wrapper class auto boxing, unboxing]


=======================================================
[Math 클래스 반올림]

double을 Math.round하면 long 타입이 나온다.
float를 Math.round하면 int 타입이 나온다.

* round는 소수부 첫번째 자리를 반올림한다. 
=======================================================
[Math 클래스 올림, 내림]
ceil = 올림
소수부가 0이면 절삭, 소수부가 0이 아니면 올림
54.0 ==> 54.0  ,  54.1 ==> 55.0

floor = 내림

* 소수부 절삭하기 : (int)Math.ceil(db3)
=======================================================
[Math 클래스 절대값]

음수건, 양수건 무조건 양수로 만든다.
=======================================================
[equals]

* 웹에선 String 타입을 가장 많이 쓴다.
★ String은 다양한 데이터타입들과 호환이 잘된다.

★ if(name7 != null && name7.equals(name8))  이렇게 쓰는 연습을 해서 NULLPOINT를 예방하자.

★ 혹은 상수와 변수를 비교한다면 상수를 앞에다가 변수를 뒤에다가 놓자!!

* if속에 if문을 또 넣을 수 있다.

★★ 유저가 말을 안 듣는 다는 것을 베이스로 깔고 코딩을 해야한다.

삼항연산자 : (조건식)?참이면:거짓이면;

계산기메인 클래스 경우의 수
1. 첫번째 정수 제대로 안 넣었을 때
2. 두번째 정수 제대로 안 넣었을 때
3. 사칙연산자 제대로 안 넣었을 때
4. 분모에 0을 넣었을 때


내일은 switch문, while문, do ~ while문


메인클래스 : 실행시켜주는곳
일반클래스 : 부품들을 만들어주는곳, 메인클래스에서 부품들 끌어와서 실행시키는데 도움줌

메인에만 코드를 짜면 너무 복잡해져서 
일반에 나눠서 짜놓고 일반꺼를 메인에서 호출시켜서 실행시키는 식으로 하는 것이다.




