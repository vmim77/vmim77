06월 29일 오전수업

[배열]
BubbleSortMain.java

[버블정렬 Bubble Sort]
버블정렬은 정렬 대상 리스트(배열)의 항목을 수평방향으로 나열했다고 가정했을 때,
왼쪽 끝에서부터 시작해서 인접하는 두 항목의 값을 비교하여
올바른 순서(오름차순 또는 내림차순)로 되어있지 않으면 서로 위치를 교환하는 정렬방법이다.

이렇게 인접하는 항목의 값을 비교해서 위치를 교환하는 과정을
리스트(배열)의 마지막 항목까지 반복해서 제일 큰(또는 작은) 값이 끝에 오도록 한다.

각 회전(Pass)과정이 끝날때마다 정렬은 뒤에서부터 하나씩 완료된다.


int[] numArr = {9, 7, 3, 5, 1};

1. 오름차순 정렬하기

for(int i=0;i<numArr.length-1;i++){            // 9, 7, 3, 5만 비교하면 끝나기 때문에 4번만 뽑는다.

      for(int j=0; j<numArr.length-1-i; j++){  // 여기에서 하나씩 비교한다.
             if(numArr[j]>numArr[j+1]){ // 만약 앞에있는 값이 뒤에있는 값보다 크다면
                   int temp = numArr[j]; // 임시저장소에 잠시 앞에 값을 넣어놓고
                   numArr[j] = numArr[j+1]; //뒤에있는 작은 값을 앞으로 보낸다.
                   numArr[j+1] = temp;
                  }
        }

}


2. 내림차순 정렬하기

안쪽 for문의 if절만 달라진다.

if(numArr[j]<numArr[j+1]){ // 만약 앞에있는 값이 뒤에 값보다 작다면  ex. 3과 5
int temp = numArr[j];
numArr[j] = numArr[j+1]; // 3을 임시저장소에 넣고, 5를 앞으로 보낸다.
numArr[j+1] = temp;


======================================
[2차원 배열]
TwoDimensionArrayMain.java

좌표값 찍기와 비슷하다.

2차원배열명.length => 행의 길이가 나온다.
2차원배열명[행의인덱스].length => 그 행에 존재하는 열의 길이가 나온다.

int[][] pointArr = new int[4][3]; // 4행 3열
		 
---------------------------
| [0][0] | [0][1] | [0][2] |
 ---------------------------
| [1][0] | [1][1] | [1][2] |
 ---------------------------
| [2][0] | [2][1] | [2][2] |
---------------------------
| [3][0] | [3][1] | [3][2] |
---------------------------

printf : %2d => 두 자리를 주는데 오른쪽부터 채워나간다.
예시 == >  0, 0, 0


★ Math.round 다시보기

1. 배열로 인원별 국어, 영어, 수학 점수를 넣는다.
2. 사람별 각 점수를 찍고, 총합을 찍어준다.

======================================

06월 29일 오후수업

[2차원 배열 유의사항]
TwoDimensionArrayMain.java




======================================
[String]
StringMain.java

1. "문자열".charAt(int index) 
"안녕하세요".charAt(2); ==> "하"
index => 0 1 2 3 4 


2. 글자 거꾸로 찍기

String str = "안녕하세요";
String reverse ="";

for(int i=str.length()-1; i>=0; i--){
     reverse += str.charAt(i)
// charAt(4) => "요"
// sum = "요", "세", "하", "녕", "안"
}

>> 가감식을 이용하여 인덱스 끝번호부터 불러와서 거꾸로  찍기

3. "문자열".toCharArray( )
"안녕하세요".toCharArray( ) ==> char 타입의 배열로 만들어준다.

char chArr[ ] = str.toCharArray( );

chArr[ ] = {'안','녕','하','세','요'};

chArr[0] = '안'
chArr[1] = '녕'
~
chArr[4] = '요'

4. "문자열".substring(int 시작인덱스, int 끝인덱스)
"안녕하세요".substring(1, 4); ==> 1번 인덱스인 "녕" 부터 4번 인덱스 앞에까지인 "세" 까지만 뽑아온다.
// index => 01234
! 끝자리 앞까지만 나오는 것을 주의하자


4-1. "문자열".substring(int 시작인덱스)
시작인덱스값만 적으면 시작인덱스값부터 끝까지 다 뽑아온다.

"안녕하세요".substring(2);
==> "하세요"

5. "문자열".indexOf("찾을문자열")
"문자열"에서 최초로 나오는 "찾을문자열"의 인덱스(int)를 알려준다.

String str = "시작하라 안녕하세요 건강하세요";
int index = str.indexOf("하");
index ==> 2

★ 찾을문자열이 없으면 -1을 반환한다.

6. "문자열".lastIndexOf("찾을문자열")
"문자열"에서 마지막으로 나오는 "찾을문자열"의 인덱스(int)를 알려준다.

str = "시작하라 안녕하세요 건강하세요";
index = str.lastIndexOf("하");
index => 13

★ 마찬가지로 찾을문자열이 없으면 -1을 반환한다.



★ 한 번 딱 배우고 다 알 수는 없다. 반복학습을 해야한다.
★ 실패하고 또 실패해야 잘 할 수 있다.
★ 주석문을 잘 적어놔야 한다. 복습할 때 이해하는데 도움이 된다.

======================================
[문자열 돈에서 콤마 제거하기]


public static long deleteComma(String str) { // "2,000,000"이나 "700" 등이 들어온다.

     do  {
               int commaIndex = str.indexOf(",");
               // 2,000,000 이라면 1이 나온다.

               if(commaIndex == -1) {
                    break; // 문장 내에 콤마가 없는 것이니 끝낸다.
               }
               else  {
                        str = str.substring(0, commaIndex)   +   str.substring(commaIndex+1);
                                  // 2,000,000이라면 "2"만 출력
                                                                         // 콤마 이후부터 모두 출력
                                                                         // "000,000"
                      }
                        // 1회차 결과물은 "2" + "000,000"
         }while(true);

// 이 과정을 문장 내에 콤마가 없을 때까지 반복한다.
// 2회차에서는 "2000,000"이니 commaIndex는 4, substring(0, 4)를 하면 "2000"만 출력
// str.substring(4+1);를 하면 "000"을 출력 이제 둘을 더하면 "2000"+"000" => "2000000"이 된다.



내일 배울 것 
1. String 클래스에 대해서 더 알아본다. ( 스플리트, 조인, String 빌드, 버퍼)
2. 캘린더 포맷
3. OOP 개념(상속성, 캡슐화, 다형성, 추상화)
