07월 13일 오전수업
io.day1.FileOutputStream1_7
io.day1.FileOutputStream2_8
io.day1.FileCopy1_9
io.day1.FileCopy2_10
io.day2.a.File_Main / FileCopy


[FileOutputStream]

키보드에서 입력한 내용을 파일에 출력하기

Stream : 개울가에 물이 흘러가는 것; 순차적으로 입력받거나, 출력하는 것 

Windows는 경로에서 역슬래시(\)를 쓰는데, 리눅스나 유닉스는 슬래시(/)로 쓴다.
Windows는 슬래시도 인식을 하니 경로에는 슬래시를 쓰는 것을 권장한다.
>> "C:/iotestdata/result.txt";

new FileOutputStream(filename, append);
* filename : 주소 / 파일명
* append : true면 원래있던 내용에 추가하고, false면 원래있던 내용을 지우고 새로 쓴다.

* read( )는 int로 반환한다.
==============================================================
[파일에서 파일로 쓰기] = 파일 내용 복사 & 붙여넣기

문자기반 스트림은 char만 읽어들일 수 있다. ( char : 2 byte)

System.in.read( ) >> 키보드로 입력한 것을 읽어 들인다.
fist.read( ) >> 파일에 입력된 것을 읽어 들인다.
* FileInputStream fist = new FileInputStream(srcFileName);

파일인풋스트림으로 파일을 읽어오고,
파일아웃풋스트림으로 파일을 복사 붙여넣기 해준다.
==============================================================
[복사할 파일 크기 제한 설정하기]

10MB로 제한을 두기

long srcFileSize = srcFile.length(); // 파일의 크기를 알려준다.
System.out.println(">> 원본 파일 크기 : "+ srcFileSize + " byte");
			
long maxSize = 1024*1024*10; // 10mb
			
if(srcFileSize > maxSize) {
				
System.out.println(">> 원본 파일의 크기가 10mb 초과했으므로 복사할 수 없습니다. <<");
sc.close();

System.exit(0); // 프로그램 종료     0 은 정상적인 종료를 뜻하는 것이다.
	      // 0 이 아닌, 1 또는 2 또는 10 또는 -1 을 넣어주더라도 동일하게 프로그램이 종료되지만 그 뜻은 비정상적인 종료라는 뜻이다.
				
}
==============================================================
[File 객체]

* 파일의 절대 경로 ==> getAbsolutePath( );
* 파일의 경로 ==> getPath( ); 
==> 둘이 똑같다.
==============================================================
[디렉토리(폴더) 만들기]

File dir = new File("C:/iotestdata/MyDir");
dir.exists(); 저런 폴더가 존재하면 true, 없으면 false
dir.mkdir(); 폴더를 만드는 메소드, 만들면 true를 반환한다.
==============================================================
[파일객체 파일인지 디렉토리인지 구별하기]

dir.isDirectory() => 디렉토리면 true 반환
dir.isFile() => 파일이면 true 반환
==============================================================
[파일 만들기]

★ FileOutputStream은 입력받은 내용을 파일에 출력해주는 것이다.
★ File객체를 이용한 파일 만들기는 아예 없는 것을 생성하는 것이다.

file2.createNewFile(); // 파일 생성하기 // 생성완료하면 true 반환
==============================================================
[파일 삭제하기]

file2.delete(); // 삭제가 완료되면 true 반환
==============================================================
[File.seperator]

운영체제별 구분자를 송출해준다.

String sp = File.separator;  // 운영체제가 Windows 이라면 File.separator; 은 "\" 이고		                                 // 운영체제가 Linux, UNIX 이라면 File.separator; 은 "/" 이고
==============================================================
[디렉토리(폴더) 삭제하기]

dir.delete(); 폴더삭제하기
==============================================================


07월 13일 오후수업
io.day2.a.File_Main / FileCopy
io.day2.b.BufferedInputStream1_1
io.day2.b.BufferedInputStream2copy_2
io.day2.c.FileReader_1
io.day2.c.FileReader_2
io.util.FileManager
io.day2.c.FileReaderWriter_3

[내용물이 있는 디렉토리(폴더) 삭제하기]

폴더 속에 내용물이 있으면, dir.delete(); 로는 삭제가 안 된다.
>> 폴더가 텅 비어져있어야 delete(); 가 가능하다.

파일을 싹 다 지우고 => 그 다음에 폴더를 지우도록 로직 만들어야 한다.

1. listFiles( ) 로 내용물을 파악한다. ==> 리턴값은 File 타입의 배열로 반환한다.
2. for문을 이용해서 배열속의 값을 하나하나 씩 꺼내와서 fileArr[i].delete() 로 모든 파일들을 없앤다.

==============================================================
[Filter Stream == 보조스트림]

보조스트림은 없더라도, FileInputStream, FileOutputStream은 정상적으로 작동한다.
보조스트림은 무엇이냐? '속도향상'을 위해서 쓴다. = 오리발
>> 없어도 되지만, 있으면 속도가 향상된다.

** 노드 = 빨대 // 키보드에 빨대를 꽂아서 입력값을 받아오고, 모니터에 빨대를 꽂아서 입력값을 내보내준다.

자주 쓰는 것 : BufferedInputStream / BufferedOutputStream

==============================================================

[BufferedInputStream]

★ 단독 사용 불가 / 노드스트림에 장착되어 사용해야만 한다!! ( ※ FileInputStream, FileOutputStream, System.in, System.out 등이 존재해야만 한다)

[방식]
읽고 => 쓰고 => 읽고 => 쓰고 방식이 아니라,
한꺼번에 쭉 읽어둔 다음에 => 메모리 버퍼에 모아두고 => 한방에 쓰기를 한다.

BufferedInputStream bist = new BufferedInputStream(System.in, size)
>> (노드, 사이즈)
>> 사이즈를 안 달면 자동으로 512byte가 적용된다.

* FileOutputStream 은 익셉션을 유발한다.


==============================================================
FileOutputStream 생성 : 접속점이 파일인 것으로 특정 파일에 빨대를 꽂아 파일의 내용물을 1byte 기반으로 기록해주는(써주는) 출력노드 스트림이다.(★ 내용물을 입력함/ 폴더는 X)

자바에서 File 클래스의 객체라 함은 파일 및 폴더(디렉토리)를 다 포함한다.(★ 얘는 생성/ 삭제만 / 파일이랑 폴더 둘다)
==============================================================

* System.in = 키보드 + BufferedInputStream
* System.out = 모니터 + BufferedOutputStream



==============================================================

[보조스트림을 이용해 파일 복사하기] 파일 to 파일


읽어올 때 배열크기만큼 읽어와서, 버퍼드스트림에 저장을 쭉쭉 해둔다.
버퍼드스트림이 꽉 차면 그때서야 쓰기 시작

==============================================================

[문자기반 스트림[2byte]]

char 타입, 원본 파일이 글자로만 이뤄진 것 (이미지, 음악 X) 은 문자기반 스트림을 쓴다.
=> 속도가 1바이트 기반 스트림보다 좀 빠르다.
=> 근데 쓸 경우가 거의 없다.

==============================================================

[FileReader]

메인메소드에 파라미터에 있는 String 타입의 배열 한 번 써보기

** 목요일쯤 Oracle 시작할 예정 
** 오라클 배울 때 자바 정리해둔거 꾸준히 복습하기

문자로만 이루어진 특정 파일명을 읽어서 그 내용물(문자들)을 리턴시켜주는 메소드 생성하기
==============================================================

[FileReader & FileWriter] == 파일 복사(단 문자로만 이루어진 파일만 // 이미지X, 음악X)

★ 문자로만 이루어진 원본파일이라면 문자기반 스트림을 쓸 수가 있다.

★ 그냥 파일 복사 & 붙여넣기만 할거면 FileOutputStream으로만 하면 되는데, 용량이 얼마냐 / 확장자는 뭐냐 등등을 알려면 File로 객체화 시켜야 한다.
