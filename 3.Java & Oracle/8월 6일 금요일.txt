08월 06일 금요일 오전수업

[ 게시판 만들기 ]

--> 수동커밋 추가
--> 로그인하면 전용 메뉴 등장 ( 게시판 메뉴 )
--> 관리자 로그인 시 전용 메뉴 추가 ( 모든회원정보 조회하기 )
--> 일반유저 '글쓰기' 메뉴 선택 시, 작성자명은 자동적으로 자신의 이름이 나오도록한다.
--> 글쓰기를 하면 포인트가 올라가게 함 (트랜잭션 처리)
--> Check 제약 -- 포인트는 < 30
     └> 글은 2개까지만 쓸 수 있다. // 모든게 맞을때만 commit, 한개라도 틀렸다 rollback
--> 글목록보기에서 글제목이 길면 ..처리 / substr( ) || '...'
--> 댓글쓰기 // 댓글내용없으면 '>> 댓글 내용 없음 <<'
--> 글목록보기에서 댓글이 있는 글은 댓글 갯수가 표시된다.
--> 조회수 기능 추가 ( 내 글말고 다른 사람 글을 봤을때만 올라감 )
--> 내가 쓴 글만 수정가능
--> 글 제목, 글 내용 변경하지 않으려면 엔터
--> 글 삭제도 내가 쓴 글만 삭제가능
     └>  글 수정 및 삭제는 글암호가 맞을 때만 가능
--> 최근 1주일간 일자별 게시글 작성건수 ( 날짜별 그룹 )
     └>  그룹핑으로 총계, 날짜별 소계'


==================================================================

[ DB 모델링 ] 

한 회원은 여러 개의 글을 쓸 수 있다. (일 대 다 관계)

[ 회원과 게시판의 테이블 관계 ]
우리 회원만 글을 쓸 수 있고, 읽기는 아무나 읽을 수 있다.
한 회원은 가입하고 글을 아예 안 쓸 수 있고, 하나만 쓸 수 있고, 여러 개 쓸 수 있다.( 0, 1, 多 )

게시판에는 Foreign Key로 '회원.회원아이디'를 사용하고자 한다.

※ 자식테이블에 유니크키를 넘겨주고 싶다면 [속성] -> [ 관계(외래 키) ] 로 보내준다.

※ 식별형식
-    식별 : 실선, Foreign Key가 자식테이블에 Foreign Key이자 Primary Key로 넘어간다.
- 비식별 : 점선, Foreign Key로 자식테이블에 넘어간다.

[ 게시판과 댓글의 테이블 관계 ]

한 게시글에 대해 여러 개의 댓글이 있다. ( 일 대 다 )
이 댓글은 누가 썼느냐도 중요하다. ==> 회원 게시판에서 회원 아이디가 넘어와야 한다.
==> 우리 회원만 댓글을 달 수 있다.

회원이 반드시 댓글을 쓰라는 법도 없고, 1개 혹은 여러 개 쓸 수 있다. ( 0, 1, 多 )
어떤 게시판 글에 댓글이 없을 수도 있고, 1개 혹은 여러 개 있을 수도 있다. ( 0, 1, 多 )



on delete cascade --> 원글이 삭제되면 댓글도 삭제된다.

★on delete cascad 의 의미는
부모 테이블인 tbl_board_a 테이블에서 행을 delete 할 시
자식 테이블인 tbl_board_a_add 테이블에 fk_writeno 컬럼에 삭제하려는 tbl_board_a 부모 테이블의 writeno 컬럼값을
가지는 행이 있다라면 자동적으로 자식 테이블에서 먼저 행을 삭제하고서
그 다음에 부모 테이블인 tbl_board_a에서 행을 삭제해주는 것이다.

==================================================================

[ 게시판 구현하기 ]

1. DTO 구현
BoardDTO, BoardCommentDTO를 만들어야 한다.
foreign key가 있는 오라클 테이블의 DTO를 만들땐 주의해야 한다.

** BoardCommentDTO에서 fk_boardno는 원래 오라클에선 number타입이라 int타입으로 선언해야 하는데, String의 호환성을 보여주고자 String으로 선언했다.

※ DTO는 insert, select 해줄 '운반 단위'(1개의 행)이다.
※ insert가 가장 먼저 되어야 select든 update든 할 수 있다.

------------------------------------------------------------------------------------------------------------

2. DAO 구현
운반 단위를 오라클(DB)에 보내줄 DAO를 만들어야 한다.

------------------------------------------------------------------------------------------------------------

3. Controller 구현 ( DTO, DAO를 총괄한다. )
TotalController.java ==> 회원 / 게시판 / 댓글 모두를 컨트롤한다. ( 메소드들을 구현 )

★★★★★ 필드를 다른 패키지에있는 클래스에서 복사해올때는 주의해야 한다.
★★★★★ 그냥 복사 붙여넣기하면 자동으로 'import jdbc.day03.MemberDAO;' 식으로 import가 되어서 구현이 이상하게 된다.
==> 단순하게 글자만 Copy를 하려는데, 이클립스는 자동으로 소속이 어딘지도 카피를 해온다.
==> day04에 MemberDAO를 타겟해야하는데, import를 자동으로 해버려서 day03을 타겟으로 한다.

------------------------------------------------------------------------------------------------------------

4. 실행부 Main method 생성
Main은 실행만 해주는 곳이다. 
메소드 구현 등 모든 것은 다른 클래스에서 하고, Main은 만들어진 메소드를 호출하기만 한다.

==================================================================

[ 회원가입 메소드 ]

수동 COMMIT이여서, memberRegister( ) 메소드는 스캐너값을 파라미터로 해야지, 커밋할지 롤백할지를 사용자가 정하게 할 수 있다.

userseq는 시퀀스라 중복되어질 일이 없다.

userid가 중복되어 진다면 익셉션 처리를 시켜줄 것이다. (Unique 제약조건 위배)
- 제약조건에 위배됐을 때의 catch를 만들어 준다.
- catch(SQLIntegrityConstraintViolationException e) 
- 문법은 다 맞지만, 제약조건에 위배되었을 때 이곳으로 빠진다.

==> 제약조건이 위배되면 memberRegister는 -1을 반환
==> SQL구문 오류면 -2를 반환

==================================================================

[ 로그인 메소드 ]

컨트롤러에서 사용자의 아이디와 비밀번호 스캐너로 받은 다음에,
해쉬맵에 넣어주고 이것을 DAO로 넘긴다. 그래서 DAO에서는 이 받은걸 sql 구문에 where절에 넣어서 select한다.
★ 복사 붙여넣기 할 때에는 항상 import를 확인하자, 이클립스가 자동으로 타겟을 설정해주니

==================================================================

[ 내정보보기 ]

case "4": // 내정보보기 ==> 로그인을 했을때에만 작동되도록 해야 한다.
if(member != null) {
System.out.println(member);
break;
}

로그인을 안 하면(member == null) break를 만날 수 없어서 default로 내려간다.

로그인을하면 DAO에서 SELECT를 해서 정보를 읽어온 다음에 DTO에 정보를 다 넣어준다.
그러면 내정보보기는 로그인을 한 후에 사용할 수 있으니, 지금 로그인된 정보를 가져오도록하면 된다.(MemberDTO에서 toString() 을 재정의해서 회원정보를 보여주게 한다.)
==> 이러면 System.out.println(member); 이것만치면 알아서 정보를 보여주게 한다.

member == member.toString( ) ==> 둘 다 원래는 객체가 올라간 메모리주소를 보여준다.
==================================================================

[ 게시판가기 ]

게시판가서도 메뉴를 선택해야하니깐 스캐너를 넘겨받아야 한다.
~~님 로그인중을 구현하기 위해서 또 member(MemberDTO 객체) 도 받아준다.
==> 요기에는 현재 로그인된 사람의 이름이 담겨져 있다.

==================================================================

08월 06일 오후수업
+ 관리자 전용 메뉴 추가하기
+ 각 게시판 메뉴 구현하기

[ 게시판가기 ]

아이디가 'admin'은 관리자로 보겠다.
관리자로 로그인 후 --> 게시판으로 가서 --> 10.모든회원정보조회를 보여지도록 해야한다.
(※ 관리자만 보여야 한다.)

게시판에 들어왔다는 것 자체가 로그인을 했다는 것이니 null 걱정은 안해도 된다.

==================================================================

[ 글쓰기(insert) ] 

>>트랜잭션 처리를 한다.
글쓰기는 jdbc_board 테이블에 insert가 성공되어지면,
jdbc_member 테이블에서 글을 쓴 작성자의 point 컬럼의 값을 10 씩 증가(update) 한다.


※ 트랜잭션 
트랜잭션은 관련된 일련의 DML로 이루어진 한 꾸러미(한 세트)를 말한다.
트랜잭션은 데이터베이스의 상태를 변환시키기 위하여 논리적 기능을 수행하는 하나의 작업단위를 말한다.
★ 가장 중요한 것은 모든 DML문이 성공해야만 최종적으로 모두 commit을 해주고,
★ DML문중에 1개라도 실패하면 모두 rollback 을 해줘야 한다.


** 유저아이디는 고유하니 포인트 업데이트를 하면 1이 반환될 것이다.


==================================================================

[ 프로젝트 ] 

★ 대분류 / 중분류 / 소분류 테이블 추가
문학 / 비문학 --> 시/소설 --> 추리, 스릴러, 범죄, 로맨스
★ ISBN --> 전세계 고유한 책의 번호
★ 바코드 --> 도서관에서 고유한 책의 번호











