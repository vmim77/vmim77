08월 03일 오전수업

[ 오라클 & 자바 결합하기 ]

.jar == .class를 모아둔 것 (== 압축파일)

JRE System Library 에는 .jar 압축파일들이 있다. 
==> 그 안에는 class 파일들이 있는데 여기에는 자바에서 기본적으로 제공하는 기능들을 가지고 있다.(java.util.date 등)
==> 여러가지 필요한 .class 파일들을 모아 놓은 곳이 바로 .jar 파일이다.

문제는 오라클과 자바를 결합하여 써야 하는데 기본적으로 JDK에는 필요한 Library(기본 Library만 있음)가 없어서, 별도로 넣어줘야 한다.

JDBC : java database connection 

==> 자바에서 오라클 DB와 연결을 하려면 거기에 필요한 Library가 있어야 하는데, 오라클 폴더 -> 서버 -> JDBC -> lib 폴더에 있는 jar 파일들을 이클립스에서 추가시켜줘야 한다. 

ojdbc6.jar 추가해야 한다. --> 이제부터 자바와 오라클을 쓸 수가 있다.

[ 이클립스에서 sqldeveloper 실행되게 만들기 ]

file 생성 - open with -> orther -> external programs -> browse -> sqldeveloper 선택
==> 이제 이클립스에서 .sql 파일을 실행할 때 마다 sqldeveloper 가 실행된다.

==================================================================

[ 자바에서 오라클에 테이블 insert 하기 ]


[ 사전작업 ]

1. 오라클 데이터베이스 서버와 연결을 맺어주는 객체가 필요하다.
-- 원격지(강의장 서버)와 연결을 시켜줄 객체가 필요하다.
-- Connection 이 그 역할을 해준다.

Connection conn = null;

2. 원격지에 SQL문을 전송시켜줄 객체가 필요하다.

PreparedStatement 이 Connection conn(특정 오라클 서버)에 전송할 SQL문(편지)을 전송해주는 객체(우편배달부)이다. 

★ 항상 위의 두개가 필요하다.
==> Connection은 어느 오라클 서버에..
==> PreparedStatement는 어떤 SQL문을 전송하겠다..
==================================================================

1. Driver loading

- DB와 Program의 연결을 관리하는 Driver를 메모리상에 적재시킨다.

2. Connection

- 적재된 Driver를 이용하여 DB와 Program을 연결한다. (url과 계정정보 필요)

3. Statement/PreparedStatement

- 실행할 query의 내용을 지정/ 실행한다.

4. ResultSet(select의 경우..)

- 쿼리문의 결과를 받아낸다.

5. close(Connection, Statement, ResultSet)

- 모든 작업이 끝나면 데이터베이스 연결과 관련된 자원들을 반납해준다.



[ 공식 ]

1. 오라클 드라이버 로딩
--> Vector는 List의 한 종류이다.

Class.forname("oracle.jdbc.driver.OracleDriver");
==> 자동적으로 오라클 드라이버가 올라간다.

==================================================================
2. 어떤 오라클 서버에 연결할 것인지 설정한다.

DriverManager.getConnection("jdbc:oracle:thin:@"+ip+":1521:xe", user, password);
==> SQL Exception 처리가 필요하다.
==> username 혹은 password, ip 를 잘못 쓸 수 있기 때문이다.

==> 1번째는 url, 2번째는 유저명, 3번째는 패스워드
==> Return type 은 Connection (실제 오라클 서버)

conn.setAutoCommit(false); 을 써야 DML이 수동 commit으로 전환된다.
==> ROLLBACK, COMMIT 가능해짐

==================================================================
3. SQL문을 작성한다.

"insert into jdbc_tbl_memo(no, name, msg) values(jdbc_seq_memo.nextval, '호호', '하하하')";
==> sqldeveloper에서 미리 써본 다음에 잘 작동하는지 확인해보고 복붙하면 좋다.
==> ★ 세미콜론은 쌍따옴표 밖에 있어야 한다!
==> SQL문 맨 뒤에 ; 을 넣어주면 오류이다.

==> 위와 같이 하지 말고 아래와 같이 위치홀더를 써야한다. (보안상 아주 취약하다.)
==> 해킹 위험성↑
==> 사용자가 입력한 데이터가 보여져서 위험하다.

** 위치홀더를 사용하여 SQL문을 작성한다.

3번 SQL 작성에 ? 식으로 위치 홀더를 쓴다.
4번에서 만든 PreparedStatment 객체를 이용해 위치홀더에 값을 넣어준다.

==> 위치홀더를 쓰면 무슨 값을 넣었는지 전혀 안 보인다.


==================================================================

4. 연결한 오라클서버(conn)에 SQL문(편지)을 전달해줄 PreparedStatement 객체(우편배달부) 생성하기

==================================================================
5. PreparedStatement pstmt 객체(우편배달부)는 작성한 SQL문(편지)을 오라클 서버에 보내서 실행이 되도록 해야 한다.

.executeUpdate(); 은 SQL문이 DML문(insert, update, delete, merge) 이거나, SQL문이 DDL문(create, drop, alter, truncate) 일 경우에 사용된다. 

* 만약 select문이라면 executeQuery( ); 를 써야 한다.
==================================================================
6. 자원을 반납해야하는데, SQL문이 성공이든 실패하든 무조건 반납해야하니깐 finally 구문을 사용한다.
==> 반납의 순서는 생성 순서의 역순으로 한다.

==> PreparedStatement --> Connection 순으로 한다.
** 중요한 것은 초기값으로 null을 줬기 때문에 if문으로 '변수 != null' 조건을 준다. 
==> 또한 이 .close( )구문은 SQLException 를 유발하기 때문에 try & catch를 한다.

==================================================================

[ 자바에서 오라클에 테이블 select 하기 ]

DML과 거의 흡사하다.

select는 select가 된 결과물이 저장될 곳이 필요하다.
==> ResultSet 

select는 입력할 게 없으니 위치홀더가 필요 없다.

ResultSet 객체.next( ) 를 이용하여 다음 행에 select 되어진 결과물이 있나 없나를 알 수 있다.
==> 행이 있다면 각 컬럼별 값을 읽어와야 한다.

그래서 while문을 이용하여 true이면 계속해서 내용을 StringBuilder에 넣도록 한다.

==================================================================

08월 03일 오후수업


[ 자바로 where절이 있는 select 하기 ]

★ 컬럼명 또는 테이블명은 위치홀더인 ? 를 쓰면 안되고 변수로 처리해야 한다.
★ 오로지 데이터값만 위치홀더인 ? 를 써야 한다.
==> 만약 위치홀더로 컬럼명 또는 테이블명을 나타내면 오류가 발생한다.

where no = 2 와 where no = '2' 는 똑같다! 왜냐하면 String 타입이여도 순수 숫자라면 자동으로 변환되기 때문이다.
==> 그래서 String 타입은 전부 다 호환된다.


없는 내용으로 검색을 했다면 어떻게 처리하는가?
==> rs.next( ) 는 select 된 행이 있다면 계속해서 돌린다.
이 점을 이용해서 

int cnt = 0;
while(rs.next()) {
cnt++;


}
cnt 를 이용해서 파악한다.
select된 행이 아무 것도 없다면 cnt = 0 일 것이다 그것은 없는 내용으로 검색했다는 뜻이다.

==================================================================


[ 자바로 update 하기 ]


==================================================================


[ 자바로 delete 하기 ]


내일 : DDL, 프로시저