08월 05일 오전수업

[ DAO, DTO ]

회원가입 - insert (아이디, 암호, 회원명, 연락처)
==> 회원 한 행(row)을 Member의 한 객체로 만든다.

객체를 DB로 전송해야 한다.
==> Data Transfer Object(DTO)

데이터베이스에 접근을 하는 객체 
==> Data Access Object
==> 오라클 DB에 연결해서 메소드들을 실행해주는 클래스
==> insert, select 메소드들을 만듦

MemberDTO - jdbc_member 테이블의 필드들 정의 됨 / insert, select가 실행됨
MemberDAO - insert, select 메소드들이 정의된 곳이다. / DB Access
Member_Main - 실행부
MemberCtrl - 제어부

콘솔프로그래밍에서 Main은 단지 실행만 해준다.
==> 메소드 만들기 등은 다른 클래스에서 한다.

==================================================================

[ 회원가입 메소드 만들기 ]

회원가입 : 스캐너 필요
시작메뉴 : 스캐너값 넘겨서 메뉴선택하면 다른 메뉴를 불러오게 한다.

* 회원가입할때 받는 스캐너 변수명은 DB에 넘겨야 하니 DTO의 필드명과 똑같이 해주는 것이 좋다
==> 일관성 유지

DB의 컬럼명 = DTO 필드명

>> MemberCtrl에서 스캐너 값으로 받은 회원정보들을 DB에 보내야하니깐 DTO에 담아서 보낸다.
>> 이제 set 메소드로 담아준 정보를 DB에 보내줘야 한다.

>> 또 insert를 해주는 메소드를 DAO에서 불러준다. 
** DTO는 DB로 넘길 정보들(1개의 행)이 있는 곳
** DAO는 INSERT, SELECT 등 메소드들이 있는 곳
>> Ctrl이 DTO에 정보를 담아주고 --> DAO가 DB에 insert 해주는 메소드로 DB로 정보를 넘긴다.

>> Connection은 insert, select 등 여러 번 쓰이니깐, DAO 클래스에서 필드로 만든다.
>> userid 는 unique 제약이니깐, 익셉션 처리를 해준다.
>> e.getErrorCode == 1 

>> 자원반납 또한 insert, select들도 다 사용해야하니 메소드로 만든다.

>> Ctrl은 DAO 필드가 필요하다.
==> InterMemberDAO mdao = new MemberDAO();
==> 회원가입 메소드(insert)뿐만 아니라 select에도 써야하니 필드로 만든다.

=================================================================
[ 로그인 메소드 만들기 ]

로그인 완료시 회원의 정보를 받아온다. (select)

리턴값은 MemberDTO --> 이걸 DAO에게 보내서 조회한다.

로그인 처리는 파라미터에 HashMap으로 넘긴다.

Ctrl에서 로그인메소드가 --> MemberDAO의 로그인메소드를 호출한다.

맵에는 사용자가 입력한 유저ID와 패스워드를 넣고선 MemberDAO 로그인메소드에 파라미터로 넣어서 넘겨주고, MemberDAO의 로그인 메소드를 호출한다.
==> 그냥 유저아이디와 비밀번호를  파라미터로 넘겨줄 수도 있지만, 나중에 Spring에서 Map을 써서 사용하기에 익숙해지려고 미리 사용해본다.

insert 할 때도 DTO에 담아서 보내고 
seleect 할 때도 DB가 DTO에 담아서 보내준다.


스캐너로 id,passwd 입력받고 --> 해시맵에 넣는다. --> MemberDAO에 있는 로그인 메소드 호출한다 -->  selec sql를 쳐서 DB에서 입력받은 아이디와 패스워드를 where절에 넣어서 조회해본다.
--> select된게 있다면 이 행의 정보를 MemberDTO 객체를 하나 만들어서 거기에 넣는다. --> 이 MemberDTO를 다시 ctrl에 넘긴다


MemberDTO member = login(sc); 얘가 null이냐 null이 아니냐에 따라서 시작메뉴가 바뀌면 된다.
>> MemberDTO member = null; 얘를 do~while밖에다 둬야지 계속 do~while이 시작되면서 처음에 null이 넣어지는걸 방지한다.
------------------------------------------------------------------------------------------------------------
MemberDTO member = null;

do {
			
String loginName = (member==null)?"":member.getName();
------------------------------------------------------------------------------------------------------------
case "2": // 로그인 또는 로그아웃
	if("로그인".equals(login_logout))
	  member = login(sc); // 로그인 시도하기
	else {
	  member = null; // 로그아웃
	  System.out.println(">>> 로그아웃 되었습니다. <<< \n");
	}
				
	break;
------------------------------------------------------------------------------------------------------------

=================================================================

[ 게시판 만들기 ]

--> 수동커밋 추가
--> 로그인하면 전용 메뉴 등장 ( 게시판 메뉴 )
--> 관리자 로그인 시 전용 메뉴 추가 ( 모든회원정보 조회하기 )
--> 일반유저 '글쓰기' 메뉴 선택 시, 작성자명은 자동적으로 자신의 이름이 나오도록한다.
--> 글쓰기를 하면 포인트가 올라가게 함 (트랜잭션 처리)
--> Check 제약 -- 포인트는 < 30
     └> 글은 2개까지만 쓸 수 있다. // 모든게 맞을때만 commit, 한개라도 틀렸다 rollback
--> 글목록보기에서 글제목이 길면 ..처리 / substr( ) || '...'
--> 댓글쓰기 // 댓글내용없으면 '>> 댓글 내용 없음 <<'
--> 글목록보기에서 댓글이 있는 글은 댓글 갯수가 표시된다.
--> 조회수 기능 추가 ( 내 글말고 다른 사람 글을 봤을때만 올라감 )
--> 내가 쓴 글만 수정가능
--> 글 제목, 글 내용 변경하지 않으려면 엔터
--> 글 삭제도 내가 쓴 글만 삭제가능
     └>  글 수정 및 삭제는 글암호가 맞을 때만 가능
--> 최근 1주일간 일자별 게시글 작성건수 ( 날짜별 그룹 )
     └>  그룹핑으로 총계, 날짜별 소계'


=================================================================


08월 05일 오후수업 


[ 싱글톤 패턴기법을 이용하여 Connection 만들기 ]

게시판 만들기에 앞서 싱글톤 패턴기법을 알아야 한다.
==> 이것을 알은 다음에 Connection을 싱글톤 패턴기법의 Connection으로 바꾼다.

singleton pattern은 인스턴스가 사용될 때에 매번 새로운 인스턴스를 만들어 내는 것이 아니라, 
동일 인스턴스 1개만을 사용하도록 하는 것이다. 

★ 매번 객체를 만들더라도 처음에 만들어진 객체를 똑같이 쓰겠다는 말이다.
==> 생성자가 여러 차례 호출되더라도 실제로 생성되는 객체는 딱 하나이다.

객체를 한 번만 만든 다음에 계속해서 똑같은 객체를 쓰는 것이다.
==> 실제로 쓰이는 곳은 어디?
==> Connection 객체를 만들때 쓰면 좋다.


insert 때 conn 만들고, 닫고 / 근데 또 select 때 똑같은 conn을 또 만들고 닫고...
==> 되긴 되는데 Connection이 매번 바뀌는게 아닌데 이러면 비효율적이다.
==> pstmt나 rs는 매 번 바껴질 것이다. 
==> SQL문과 select되어진 행들이 달라지니깐..

그러니깐 Connection의 객체는 싱글톤 패턴으로 만든다.

싱글톤으로 Connection을 딱 한번만 만들어서, memberDAO든 BoardDAO든 똑같은 커넥션을 쓰게 한다. ( 또 만들고, 또 닫고, 또 만들고, ....  이런 반복 작업을 없앤다. )

=================================================================

[ 미니 프로젝트 ]

프로젝트 주제 : "도서대여"
발표순서 : 8번

콘솔 프로그래밍, 소스 양이 적기때문에 굳이 GitHub까진 필요없다.

밑그림(청사진) 만들기 == Story Board
 