10월 25일 수업

[ 스프링 설치 및 설정 ]

STS - 스프링툴슈트 다운로드
https://spring.io/tools
https://spring.io/tools#suite-three

- 스프링은 이클립스 기반으로 만들어져서 이클립스와 비슷하다.
- workspace(spring) 디렉토리를 생성해서 작업폴더로 잡아준다.

▶ 이전까지는 라이브러리 파일(.jar)을 직접 다운로드해서 썼으나, 이제는 Maven 방식으로 사용한다.
**** 라이브러리 검색사이트
http://search.maven.org  
https://mvnrepository.com/
==> STS는 Maven 방식을 자주 사용한다.

★ Ctrl + Alt + Shift + L : 찾기(검색) 기능 (== Ctrl + F)

★ Maven 방식
- XML로 되어져있어서 직접 다운로드가 아닌 XML 태그들을 복사하여 붙여넣기하면 알아서 다운로드가 되어지는 방식이다.
(추가설명) Maven은 필요한 라이브러리를 특정 문서(pom.xml)에 정의해 놓으면 내가 사용할 라이브러리 뿐만 아니라 해당 라이브러리가 작동하는데에 필요한 다른 라이브러리들까지 관리하여 네트워크를 통해서 자동으로 다운받아 준다.

Mavne 세팅은 설치 경로만 확인할 것
- Window > Preferences > Maven > User Settings > User Settings : Local Repository 경로(C:\Users\사용자\.m2\repository : 메이븐이 다운로드 받은 라이브러리가 저장되는 폴더)

▶ STS를 UTF-8 상태로 변경한다. (이전에 이클립스에서 한것과 동일하다.)

▶ Spring 프로젝트 생성
- STS는 Spring Framwork 관련 프로젝트 템플릿이 몇 종류가 준비되어 있다. 크게 나누면 "Spring Legacy Project"와 "Spring Starter Project"로 분류가 가능하다.

===> Spring Legacy Project: 일반적인 Spring Framework 프로젝트이다. 필요에 따라 Spring Framework의 라이브러리를 내장하여 이용한다.
- 필요한 라이브러리를 개발자가 직접 넣는 것이다.
- 세팅이 까다롭다
- 대부분의 전자정부를 사용하는 공공기관에서는 Spring Legacy Project를 사용한다.

===> Spring Starter Project: Spring Boot라는 응용 프로그램의 빠른 개발 프레임워크를 이용한 프로젝트이다. 간단한 라이브러리를 추가하는 것만으로 필요한 프레임워크들이 모두 포함될 수 있도록 되어 있다.
- 레거시 프로젝트가 세팅이 까다로운것에 대해 대안으로 나온 것이다.
- 일반 사기업은 빠른 개발을 위하여 Spring boot를 쓰는 스타터 프로젝트를 주로 사용한다.

▶ "Board" 프로젝트 생성하기
- 탬플릿은 "Spring MVC Project"
- 3단계 이상의 탑레벨 패키지를 설정해야한다. (주로 회사도메인명.컨텍스트명으로 한다.)
==> com.spring.board
==> kr.co.sist.board (예시) - 도메인이 역순으로 나온다.

그 전까지는 프로젝트명이 컨텍스트명이였지만, 이제는 가장 마지막의 패키지명이 컨텍스트 명이된다. ( 탑레펠 패키지에서 com.spring.board이니깐 board가 컨텍스트명이 된다. )

▶ 처음에는 프로젝트에 에러표시가 나오는데 기본적인 라이브러리 파일(.jar)를 다운받는데 시간이 걸려서 그렇다. 1~2분정도 기다리면 에러표시가 사라진다.

▶ 기본 설치된 VMware WAS를 지우고 톰캣으로 다시 설치한다.
Preferences -> Server -> Server Runtime Environments -> 아파치 디렉토리 선택
- JRE도 Java 폴더에 있는 JDK 폴더를 선택해준다.

▶ Spring MVC 프로젝트 버전3 에서 버전4 로 마이그레이션 하기
- Spring MVC 프로젝트의 Spring Framework 버전의 기본값은 3.1.1 이다. 이것을 4.3.4 버전으로 변경하도록 한다.

 ==> 기본 환경                   ==> 변경 될 환경

  - Spring Framework 3.1.1        - Spring Framework 4.3.4
  - java version 1.6                  - java version 1.8  (JDK 1.8.0_x 을 사용하므로)
  - Maven compiler                 - Maven compiler
    source 1.6                         source 1.8
    target 1.6                         target 1.8
  - servlet-api 2.5                   - servlet-api 3.1.0   (apache-tomcat-8.5.x 을 사용하므로)  
  - jsp-api 2.1                        - jsp-api 2.3.1       (apache-tomcat-8.5.x 을 사용하므로)


▶ 프로젝트(Board)를 열면 아래에 보이는 pom.xml 파일을 열어서 설정을 변경한다.

POM(Project Object Model)은 프로젝트(우리의 프로젝트는 Board임)의 구조와 내용을 설명하고 있는 것으로써, pom.xml 파일에 프로젝트 관리 및 빌드(build)에 필요한 환경 설정, 의존성 관리 등의 정보들을 기술해둔다.

- 빌드(Build)란?
소스코드 파일을 컴퓨터에서 실행할 수 있는 독립 소프트웨어 가공물로 변환하는 과정 또는 그에 대한 결과물이다.
우리가 작성한 소스코드(java)와 프로젝트에서 사용되는 각각의 파일 및 자원 등(.js, .css, .jpg, .xml, .jar, .properties)을 JVM(Java Virtual Machine)이나 톰캣같은 WAS가 인식할 수 있는 구조로 변환하여 패키징하는 과정 및 결과물을 빌드(Build)라고 부른다.

- 빌드 도구란?
프로젝트 생성, 테스트 빌드, 배포 등의 작업을 위한 전용 프로그램이다.

- 빌드 도구의 등장배경
짧은 기간동안 계속해서 늘어나는 라이브러리의 추가 및 프로젝트를 진행하는 동안 라이브러리 버전 동기화의 어려움을 해소하고자 등장함.

- 빌드 도구의 종류
초기의 java 빌드도구로 Ant를 많이 사용하였으나 이후로 많은 빌드 도구들이 생겨났으나 그 중에서 Maven(메이븐)을 가장 많이 사용한다. 현재는 Gradle을 사용하기도 한다.

이 pom.xml 파일은 빌드 도구인 Maven을 사용해서 프로젝트 관리해주는 환경설정 파일이다. 특히 pom.xml 파일은 Maven을 통해서 라이브러리(*.jar)를 프로젝트에 다운로드 하는 것이 가장 큰 목적이다. 프로젝트에 필요한 라이브러리의 관리는 모두 pom.xml에서 관리한다.
Maven 관련 웹사이트에 가보면 라이브러리(*.jar)들은 xml 태그 형태 "<dependency></dependency>"로 라이브러리(*.jar)들을 추가할 수 있도록 되어있다.
프로젝트를 운용하는데 필요한 각종 라이브러리(*.jar)를 <dependency> 태그를 사용해서 pom.xml에 붙여 넣으면 자동으로 Maven Dependencies에 *.jar 라이브러리들을 추가해준다.
이 라이브러리(*.jar)들은 기본적으로 C:\Users\사용자\.m2\repository 에 저장되어진다.

만약에 pom.xml 파일에 <dependency></dependency> 태그를 붙여 라이브러리(*.jar)들을 다운받으려 하는데 
인터넷에서 다운로드가 제대로 안되어 에러가 발생하면 "무조건 STS 를 종료" 한 후 
탐색기에 가서 C:\Users\사용자\.m2\repository 내의 모든 폴더(파일)를 삭제하고서 STS 를 다시 실행하면 된다.

▶ 이후에 설정방법이 적혀진 "_STS설치및Spring버전3을 버전4로 업그레이드하기.txt"를 읽으면서 'Spring MVC 프로젝트 버전3 에서 버전 4로 마이그레이션 하기'를 한다.

--------------------------------------------------------------------------------------------------------------

 <Dynamic Web Project 구조> --▶ 지난 금요일까지 이클립스를 이용해서 했던 방식
 1. src	- 자바 리소스

 2. WebContent(웹 리소스 루트 폴더)
	- 웹 리소스
	- 브라우저로 접근 가능 루트 디렉토리


 <Spring MVC Project 구조> --▶ STS를 이용하여 새롭게할 방식
 1. src/main/java - 자바 리소스

 2. src > main > webapp(웹 리소스 루트 폴더)
	- 웹 리소스
	- 브라우저로 접근 가능 루트 디렉토리


--------------------------------------------------------------------------------------------------------------
▶ pom.xml에 다음과 같은 라이브러리를 추가한다.

1. ojdbc.jar --> 오라클과 연동을 위해서

2. 네이버 스마트 에디터에서 사진첨부 관련하여 이미지의 크기를 구하기위한 라이브러리

▶ 이후에 MyBatis 를 추가한다. (이제는 rs, conn, PrepareStatement 등을 사용 안해도 된다)
==> MyBatis를 미들웨어(Middle Ware)라고 한다.

Spring ------------ MyBatis ------------ Oracle

★ 파이널때는 한 팀원의 pom.xml을 몽땅 붙여넣기 하면 안된다. 
==> 왜냐하면 groupId나 artifactId, name이 다를 수 있기 때문이다!
==> 프로젝트 이름이 다르기 때문에 pom.xml을 그대로 붙여넣기해서는 안된다.
==> 붙이기 전에 groupId, artifactId, groupId 등을 확인하고 붙여넣기해야한다.

※ Spring TX - Transaction 처리
※ View 페이지 표시는 Tiles를 사용한다.

-------------------------------------------------------------------------------------------------------------- 
[ 이클립스 배치서술자 ]

<servlet>
   <servlet-name>02_postMethod</servlet-name>
   <servlet-class>chap02.PostMethod_02</servlet-class>
</servlet>
<servlet-mapping>
   <servlet-name>02_postMethod</servlet-name>
   <url-pattern>/02_postMethod.do</url-pattern>
</servlet-mapping> 

▶ URL 패턴이 "/02_postMethod.do" 식으로 들어오면 "02_postMethod" 서블릿이 응답을 하는데, 그 서블릿은 chap02.PostMethod_02에 있다.
-------------------------------------------------------------------------------------------------------------- 
 [ 스프링 배치서술자 ]

<servlet>
   <servlet-name>appServlet</servlet-name>
   <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
   <init-param>
       <param-name>contextConfigLocation</param-name>
       <param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
   </init-param>
   <load-on-startup>1</load-on-startup>
</servlet>
		
<servlet-mapping>
   <servlet-name>appServlet</servlet-name>
   <!-- === #13. URL 패턴에서 확장자 .action 인 것으로 요청을 하면 appServlet 서블릿이 받아서 처리를 해준다. === -->
   <url-pattern>*.action</url-pattern>
</servlet-mapping>
-------------------------------------------------------------------------------------------------------------- 
==> 보통 <url-pattern>의 "*.action" 자리에는 회사이니셜을 사용한다.
==> MyMVC의 FrontController.java와 비슷하다.
==> 스프링은 org.springframework.web.servlet.DispatcherServlet 이 응답해준다.
==> 이전처럼 우리가 직접 FrontController.java를 직접 만들어줄 필요가 없다.

▶ 서블릿의 환경설정은 /WEB-INF/spring/appServlet/servlet-context.xml 의 파일을 사용하면 된다.

▶ web.xml에 POST 방식으로 요청시 데이터가 한글이면 깨지니깐 UTF-8 인코딩 필터를 추가해준다.
==> 이렇게 스프링은 FrontController.java나 필터들이 이미 다 구축되어있어서 끌어다 쓰기만 하면 된다.

▶ web.xml에 시작 웹페이지를 등록한다.

<welcome-file-list>
   <welcome-file>index.action</welcome-file>
</welcome-file-list>

★ WAS(톰캣)가 구동되어지면 항상 web.xml(배치서술자)이 먼저 움직인다.
==> 그리고 web.xml에 써진 파라미터 파일이 움직인다.( root-context.xml )

▶ 웹과 콘솔에 관련된 설정은 root-context.xml에서, 오로지 웹에 대한 설정은 servlet-context.xml에서 설정한다.
==> DB는 root-context.xml에서 설정을 한다.
=================================================================================================

오후수업

▶ DB와 관련되어진 설정은 web.xml에서 읽어들이는 파라미터 파일인 root-context.xml에서 설정을 해준다.

dataSource(== dbcp)도 기본적으로 다 제공을 해준다.

★ bean == 객체

<jsp:userBean id="mbr3" class="chap03.MemberDTO"> 는 chap03.MemberDTO mbr3 = new chap03.MemberDTO( ); 와 같다.

▶ 앞으로 생성되어질 이미지, 동영상, js, css 파일등은 내 마음대로 아무곳에나 생성해서는 안 된다.
(webapp가 Web Contents와 동일하게 그 안에있는 html, jsp 외의 파일들은 실행이 안 된다.)

★ webapp - resources 밑에 이미지, 동영상, js, css 파일들을 생성해야한다.
<mvc:resources mapping="/resources/**" location="/resources/" />

▶ 다음과 같이하면 이제 자바 클래스나 소스들은 해당 패키지 안에만 만들어야 한다.
<context:component-scan base-package="com.spring.board" />

그래서 다음과 같이해야 패키지를 자유자재로 생성할 수 있다.

항상 패키지를 만들땐 com.spring.* 로 이어져야한다.
<context:component-scan base-package="com.spring.*" />


▶ view 페이지 나타내기
* prefix: 접두어, suffix: 접미어

<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	<beans:property name="prefix" value="/WEB-INF/views/" />
	<beans:property name="suffix" value=".jsp" />
</beans:bean>
우리가 컨트롤러에서 view 페이지를 나타내어줄때 return "member"; 로 하면, 자동적으로 접두어와 접미어가 붙는다.

return "member"; --> return "/WEB-INF/views/member.jsp"; 가 되어진다.

그래서 뷰페이지는 항상 webapp - WEB-INF - views에 만들면 된다.

Controller 에서  return "product/prodview"; 로 하면 자동적으로 view단 페이지는   "/WEB-INF/views/product/prodview.jsp"; 가 되어진다. 

19. 엑셀파일다운로드를 위해 BeanNameViewResolver 추가하기

20. 전자정부 프레임워크를 위한 TilesViewResolver 추가하기

21. 파일업로드 및 파일다운로드에 필요한 의존객체 설정하기
==> 파일 다운로드시 파일명이 깨지지 않기위한 UTF-8 인코딩이 들어가있다.

=================================================================================================

[ 구동순서 ]

사용자가 URL을 입력한다.(http://...  *.action)  --> DispatcherServlet 이 응답을 한다.(이 서블릿의 환경설정은 servlet-context.xml 에서 이뤄진다.)
DispatcherServlet 은 @Controller 클래스 파일을 탐색한다.( @Controller 어노테이션을 자바 파일에 쓰면 컨트롤러가 된다. )
==> 항상 스프링은 모든 클래스가 Bean(객체)로 올라가야 쓸 수 있다.

<context:component-scan base-package="com.spring.*" /> 이렇게 servlet-context.xml에 서술했으니 저 패키지 아래에 있는 모든 클래스는 bean으로 생성한다.
==> bean으로 올릴 클래스에 @Component  어노테이션을 추가해야한다.
★ 원래는 xml에서 빈을 만들었는데, 대신에 자바를 쓰되 클래스명 앞에 @Component 어노테이션을 적어주면 해당 클래스는 bean으로 자동 등록된다. ★ 허나 조건은 항상 com.spring.* 의 패키지 안에 있어야 한다.

※ 컨텍스트패스명은 이제 프로젝트명이 아니라, 패키지 가장 마지막이 이름이다. ==> com.spring."board"


@RequestMapping(value="/test3.action")
public String test3() {
		
	return "redirect:/test/test2.action";
}
==> /test3.action url을 치면 바로 test2.action으로 이동한다.

*.action을 치면 DispatcherServlet 이 먼저 응답하는데, 얘의 환경설정은 servlet-context.xml에 있다.

-------------------------------------------------------------------------------------------------------------- 
▶ Tiles
벽면에 긴 타일을 하나 붙이고(Header),
또 하나 붙이고(Contents),
마지막으로 하나를 더 붙인다(Footer)
==> view페이지는 tiles를 많이 쓴다.

<beans:bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
     <beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView" />
     <beans:property name="order" value="1"/>
</beans:bean>

타일즈가 우선순위(order)가 높기때문에 먼저 작동한다.

★ XML이 바뀌면 무조건 WAS 재구동해야한다.
-------------------------------------------------------------------------------------------------------------- 
view단의 1순위는 tiles --> 2순위는 기본 jsp(접두어, 접미어)
먼저 WEB-INF/tiles/tiles-layout.xml에 간다.

   <definition name="*.tiles1" extends="layout-tiles1">
      <put-attribute name="content" value="/WEB-INF/views/tiles1/{1}.jsp"/>
   </definition>
   <definition name="*/*.tiles1" extends="layout-tiles1">
      <put-attribute name="content" value="/WEB-INF/views/tiles1/{1}/{2}.jsp"/>
   </definition>
   <definition name="*/*/*.tiles1" extends="layout-tiles1">
      <put-attribute name="content" value="/WEB-INF/views/tiles1/{1}/{2}/{3}.jsp"/>
   </definition>

-------------------------------------------------------------------------------------------------------------- 
return "test4.tiles1"; 얘는 ---> <definition name="*.tiles1" extends="layout-tiles1"> 얘를 가리키고 --> <definition name="layout-tiles1"  template="/WEB-INF/tiles/layout/layout-tiles1.jsp">  또 얘를 가리킨다.
==> 여기에서 URL 패턴에 맞는 tiles 패턴을 찾아간다.
*.tiles1이니깐 <definition name="*.tiles1" extends="layout-tiles1"> 얘가 선택된다.


-------------------------------------------------------------------------------------------------------------- 
layout-tiles1.jsp --> 탬플릿은 다음과 같이 구성된다
-------------------
         H
-------------------
         C
-------------------
         F
-------------------

※ 부트스트랩, 이미지, 동영상, js, css는 항상 /resuorces 밑에 나와야 한다.
==> webapp - resources - bootstrap-4.6.0-dist

ajax로 파일을 업로드할때 가장 널리 사용하는 방법 ==> ajaxForm
src="<%= ctxPath%>/resources/js/jquery.form.min.js"
-------------------------------------------------------------------------------------------------------------- 
   <definition name="layout-tiles1"  template="/WEB-INF/tiles/layout/layout-tiles1.jsp"> 
      <put-attribute name="header"  value="/WEB-INF/tiles/tile1/header.jsp" />
      <put-attribute name="content" value="" />
      <put-attribute name="footer"  value="/WEB-INF/tiles/tile1/footer.jsp" />
   </definition>

==> tiles1의 패턴들에서, header와 content, footer에는 value에 적혀진 파일들이 들어간다.
-------------------------------------------------------------------------------------------------------------- 

만약 return이 "test4.tiles1"이라면, 
{1}.jsp 자리에는 *.tiles1 에서 * 이 {1} 에 들어간다.
(예시) "test4.tiles1" 이니깐 test4 가 {1} 에 들어간다 ==> test4.jsp / 탬플릿은 *.tiles1 이 선택됨
-------------------------------------------------------------------------------------------------------------- 
<tiles:insertAttribute name="header" />
<tiles:insertAttribute name="footer" />

여기에는 이제 
<put-attribute name="header"  value="/WEB-INF/tiles/tile1/header.jsp" />
<put-attribute name="footer"  value="/WEB-INF/tiles/tile1/footer.jsp" />

얘네가 들어간다.
-------------------------------------------------------------------------------------------------------------- 

★ 스프링은 인클루드가 없다. 이미 tiles에 다 들어와져있다.

즉, Controller에서 test4.tiles1 식으로 리턴을 준다면, tiles1의 탬플릿을 쓰겠다는 뜻이다.

★ WEB-INF 밑에는 .jsp 파일만 들어와야한다. 이외의 파일들을 WEB-INF 위에 놔야한다.

★ CSS float이 적용된 태그 다음에 나오는 태그는 CSS에서 clear를 해줘야한다.

-------------------------------------------------------------------------------------------------------------- 

layout-tiles2.jsp --> 탬플릿은 다음과 같이 구성된다
-------------------
         H
-------------------
  C      |       S
-------------------
         F
-------------------


★★ 외우지 말고 이해할 것

사용자가 URL 입력한다.(※ 컨트롤러에서 리턴타입이 Tiles의 패턴인 경우) -> 서블릿으로 이동 -> 서블릿의 환경설정으로 이동 -> URL 우선순위 1순위인 Tiles 패턴의 설정으로 이동 -> URL 패턴 확인 후 대응되는 패턴을 찾는다. -> 그 Tiles의 탬플릿과 설정을 가져온다 -> 그리고 View페이지 내용과 합쳐서 출력해준다.

컨트롤러에서 Tiles의 패턴이 아닌 경우에는 우선순위 2순위인 기본 URL로 이동해서 접두어와 접미어를 붙여서 해당 View 페이지의 .jsp 파일을 호출해준다. 
※ 리다이렉트면 해당 .jsp 파일로 보내준다.