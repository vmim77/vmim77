10월 27일 수업

[ 게시판 글쓰기 ]

스프링은 컨트롤러의 리턴타입으로 ModelAndView를 많이 쓴다.

▶ #51 글쓰기 폼 생성

지금은 단순한 글쓰기 페이지로 만든다. 추후에 파일첨부, 답변 글쓰기 기능을 추가할 것이다. 

※ 부모 태그에 "display: flex"를 주고, 가운데에 위치시키려는 태그에는 "margin: auto;" 를 주면 가운데에 위치한다.

★ XML이 바꼈다면 WAS를 껏다 켜야하고, 그외에는 껏다 킬 필요가 없다.

★ 확장자가 .jsp, .html인 파일에서 URL 경로를 나타낼 땐 맨 앞에 "/"가 오면 그 앞에는 "http://ip주소:포트번호"가 자동으로 붙는다.

★ 확장자가 .xml, .java인 파일에서 URL 경로를 나타낼 땐 맨 앞에 "/"가 오면 그 앞에는 "http://ip주소:포트번호/컨텍스트패스명"가 자동으로 붙는다.

-------------------------------------------------------------------------------------------------------------------------------------

▶ #52 BoardVO 생성하기

(예시)
프로젝트시 팀원별로 게시판, 인사관리를 나눠서 개발하기로함
- com.spring.board.controller
- com.spring.employees.controller

각자의 서비스를 만든다.
- com.spring.board.service
- com.spring.employees.service

각자의 모델을 만든다.
- com.spring.board.model
- com.spring.employees.model

게시판 - 목록보기(로그인 불필요), 글쓰기(로그인 필요)
인사관리 - 직원목록(로그인 필요), 통계차트(로그인 필요)

이전과 다르게 게시판(BoardController)과 직원관리(EmpController)는 서로 부모/자식관계가 없다. (이전에는 AbstractController가 있었다.) 
하지만 서로 공통의 관심사는 "로그인 유/무"이다. 이럴땐 AOP를 사용한다.

▶ 팀원 6명이 모두 "로그인을 해야 할 수 있다." 라는 코딩을 다 할 필요없고 AOP를 이용해서 한 번만 코딩하고 다 끌어다 쓰면 된다.

▶ selectList --> 이미 DAO에서 sqlsession3.selectList("hr.empList")로 메소드를 선언했으니(List로 반환될 것을 안다.), mapper에서는 List의 제네릭 타입을 resultType에 적어준다.

★ mapper.xml(hr.xml, board.xml)에서 리턴타입이 String이나 VO는 resultType=""에 적으면 되고, 리턴타입이 Map이면 resultMap="" 을 쓰면 된다. 

▶ 이제 List에 들어갈 HashMap에 키값과 벨류값들을 매핑시켜줘야한다.

▶ <select id="empList" resultMap="empDeptMap"> 
==> resultMap이란 Select 되어져 나온 값을 id가 empDeptMap인 HashMap에 넣겠다는 뜻이다.

▶ resultMap
<resultMap type="HashMap" id="empDeptMap">
	<result property="" column="" javaType="" />
</resultMap>

- property: 맵의 키값
- column: 맵의 벨류값
- javaType: 데이터타입 (※ 벨류의 데이터타입이다. 현재 예제에서는 String이다) 
==> 컬럼 값을 특정 자바 객체로 변환할때 사용

====================================================================================

[ AOP ]

▶ 다시 돌아가서 게시판 글쓰기와 인사관리의 모든 기능들은 "로그인을 해야 볼 수 있다"는 기능을 똑같이 코딩해야한다. 
- 하지만 게시판 컨트롤러와 인사관리 컨트롤러는 부모 클래스가 없어서 연결점이 없는 서로 남남이다.
- 이때 AOP를 써서 효율적으로 코딩을 할 수 있다.

▶ 게시판컨트롤러에 requiredLogin_add 처럼 로그인이 필요한 것은 "requiredLogin_"을 붙여야한다고 팀원끼리 약속을 해야한다.
==> 그래서 인사관리컨트롤러에도 requiredLogin_empList 처럼 쓴다.

▣ 공통관심사 클래스(== Aspect 클래스)

- 빈으로 올라가야 한다.
- 일반클래스를 Aspect 클래스로 만드려면, @Aspect 어노테이션을 추가한다.

포인트컷(<예: 글쓰기, 글수정, 댓글쓰기 등등>)을 실행하기 앞서서 이러한 포인트컷들은 먼저 로그인을 해야만 사용가능한 작업이므로 포인트컷에 대한 어드바이스(<예: 로그인 유무검사>) 객체로 로그인 여부를 체크하는 관심 클래스(Aspect 클래스)를 생성하여 포인트컷과 어디바이스를 생성하여 동작하게 한다.
-------------------------------------------------------------------------------------------------------------------------------------
▶ 포인트컷
포인트컷이란 공통관심사(<예: 로그인 유무검사>)를 필요로 하는 메소드를 말한다.

- 가져오려는 포인트컷이 어느 클래스에 있는 어느 메소드인지를 밝혀줘야한다.

@Pointcut("execution(public * com.spring..*Controller.requiredLogin_*(..) )")
- 접근제한자(public만 가능), 리턴타입, 메소드위치(패키지명까지).메소드명
- ..(점 2개)는 그 사이에 아무거나 들어온다는 것을 뜻한다. (공통인 부분만 솎아내야한다)
- 메소드의 (..) 도 파라미터가 있을 수도, 한 개만 있을 수도, 여러 개 있을 수도 있다는 뜻이다.

==> 이제 이렇게 쓰면 게시판컨트롤러의 requiredLogin_add와 인사관리컨트롤러의 requiredLogin_empList를 잡아온다.

(예시)
execution(public double com.jdjhaha.test.TestPojo.*(double, ..))

이 표현식은 메서드 시그니처 패턴이며, 접근제한자는 public, 반환타입은 double, TestPojo 클래스(또는 인터페이스)의 모든메서드명 중 첫번째 인수가 double 이고 두 번째 이후는 개수와 타입에 관계없이 매칭하겠다는 의미의 포인트컷 표현식입니다.
-------------------------------------------------------------------------------------------------------------------------------------
▶ 어드바이스
어드바이스는 포인트컷이 실행되기 전이나 후에 진행될 공통관심사(<예:로그인 유무검사>)이다.

@Before - 포인트컷을 하기 전 먼저 진행될 어드바이스
@After - 포인트컷을 한 후 실행될 어드바이스
@Around - 포인트컷을 하면서(Before와 After를 합친 것) 실행될 어드바이스

로그인 유무를 확인하기 위해서는 request를 통해 session 을 얻어와야 한다.
--> 그래서 포인트컷되어질 메소드들은 파라미터에 request가 있어야 한다.

★ JoinPoint joinPoint 는 포인트컷 되어진 주업무의 메소드이다.
즉 joinPoint는 required_add()와 required_empList()를 가리킨다.

joinPoint.getArgs(); // 포인트컷에 있던 메소드의 파라미터를 가져온다.
==> requiredLogin_add면 request와 mav를 뜻한다.

어드바이스가 있는 클래스는 @Controller가 아니여서 return ""; 이나 mav.setViewName 등으로 페이지를 이동시킬 순 없다.
그래서 Dispatcher를 이용해서 forward를 시켜줘야한다.

★ 허나 forward를 시키기 위해선 반드시 request와 response가 있어야한다. 그래서 포인트컷에 잡히는 메소드들의 파라미터에 response를 추가해줘야한다.
-------------------------------------------------------------------------------------------------------------------------------------

"AOP설명하려는것.txt" 읽어보기

★ 어드바이스는 Aspect 클래스에서 정의를 해줘야한다.
* Aspect: 관심사

AOP는 Aspect Oriented Programming을 뜻한다. (==관심지향프로그래밍)
* OOP는 Object Oriented Programming

AOP는 "OOP의 상속성"과 비슷하다.
-> 부모/자식 관계는 아니지만 공통 기능(공통 관심사)가 있는 것에 착안하여 포인트컷으로 그 기능이 필요한 메소드들을 짤라오고, 얘네가 필요한 공통 기능(공통 관심사)을 설정해준다.
====================================================================================

오후수업

====================================================================================

<goBackURL의 구조>

홈페이지 -> 게시판 글쓰기 클릭(로그인X 상태) -> 보조업무(Advice)가 있기 때문에 Aspect 클래스로 먼저 이동한다. -> Advice가 @before 이니깐 먼저 실행한다. -> 포인트컷의 파라미터 request 를 이용해서 session에 loginuser가 비었나 안 비었나 확인함 -> 비어있다면 로그인을 하라는 alert를 띄우는 기능이 실행됨 -> 포인트컷의 파라미터 request를 이용해서 현재 URL이 뭔지 알아본다. (※ 게시판 글쓰기를 클릭했으니 현재 /add.action 이다.) (해당 request가 있는 메소드의 매핑 URL이 들어온다.) ->  그 URL을 세션에 넣어주고 alert를 띄우도록 시킨다.

[ 게시판 글쓰기 - 마무리 ]

전통적인 방식은 컨트롤러에서 폼에 입력된 input 들의 name을 request.getParameter로 다 받아와야 했었다.

(전통적인 방식)
String fk_userid = request.getParameter("fk_userid");
String pw = request.getParameter("pw");
...

이후에 BoardVO에 Set을 하고선 service -> DAO 로 넘겨서 DB에 insert를 한다.

-------------------------------------------------------------------------------------------------------------------------------------
(스프링 방식)
@RequestMapping(value="/addEnd.action", method= {RequestMethod.POST})
public ModelAndView addEnd(ModelAndView mav, BoardVO boardvo) {
			
   return mav;
}

저렇게 컨트롤러 메소드의 파라미터에 VO를 써두면 BoardVO의 필드명과 form 태그의 input 태그들의 name이 똑같은 것끼리 알아서 set이 되어진다.
★ 중요한 것은 필드명과 form 태그의 name 명이 대소문자 모두 똑같아야 한다.

★ 개발 다하고선 체크용으로 써둔 System.out.println은 꼭 지워야 한다. --> 보기에 되게 지저분해 보임

★ form 태그의 name == VO의 필드명 == DB의 컬럼명이 다 똑같다면 스프링 컨테이너가 알아서 다 넣어준다.
-------------------------------------------------------------------------------------------------------------------------------------


■ board.xml

★ mapper.xml -  SQL에 VO 안에 Set된 값을 불러올때는? (※ 그래서 VO의 필드명 == select의 컬럼명 == form name 을 똑같이 하자)
==> ${필드명} 을 적어주면 된다!

<insert id="add" parameterType="com.spring.board.model.BoardVO">
   insert into tbl_board(seq, fk_userid, name, subject, content, pw, readCount, regDate, status)
   values (boardSeq.nextval, #{fk_userid}, #{name}, #{subject}, #{content}, #{pw}, default, default, default)
</insert>
-------------------------------------------------------------------------------------------------------------------------------------

글쓰기가 완료되었다면 BoardController에서는 글목록(list.action)으로 redirect를 해준다.

▣ 스프링 작동원리: https://starkying.tistory.com/entry/Spring-MVC-%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC-%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C

====================================================================================

[ 글 조회하기 ]

▶ 조회수는 로그인을 했으며, 내가 작성한 글이 아니면 올려준다.

글 제목을 클릭 -> 글 상세내용을 조회 + 조회수 처리 

글을 조회해온 다음에는 로그인을 했고, 조회된 글이 있고(유효한 글번호 / GET 방식이여서), 내가 쓴 글이 아니라면 조회수 처리를 해준다. 

★ 이렇게 DAO는 단순히 SQL문을 하나씩만 돌리고, Service 단에서는 여러 개의 SQL문(메소드)들을 엮어서 트랜잭션 처리를 한다.

★ DAO는 각각 SQL 하나씩 부르는게 끝이고, Service는 여러 DAO를 합쳐서 트랜잭션 처리를 한다.
-------------------------------------------------------------------------------------------------------------------------------------
▣ Service, DAO - https://ysyapr91.tistory.com/4

Service는 사용자가 요청한 작업을 처리하는 과정을 하나의 작업으로 묶은 것이고,

dao는 CRUD작업을 하나씩 분할해 놓은 것이다.

사용자가 한 번의 요청으로 단순히 페이지 이동이 필요하다면 select와 같은 단순히 하나의 dao만 작동하기 때문에 Service와 dao가 나눌 필요가 없는 것처럼 보이지만,

사용자가 글을 작성하거나 수정하는 것과 동시에 페이지가 이동한다면 update, select가 작동하기 때문에 여러 dao를 Service안에 조립하는 로직을 갖게된다.
-------------------------------------------------------------------------------------------------------------------------------------

▶ #51 ~ #67까지 복습할 것