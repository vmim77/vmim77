10월 29일 수업

[ 댓글쓰기 트랜잭션 처리하기 ]

▶ #86 댓글쓰기(tbl_comment 테이블에 insert)

<insert id="addComment" parameterType="com.spring.board.model.CommentVO">
   insert into tbl_comment(seq, fk_userid, name, content, regDate, parentSeq, status)
   values(commentSeq.nextval, #{fk_userid}, #{name}, #{content}, default, #{parentSeq}, default)
</insert>

▶ #87-1 tbl_board 테이블에 commentCount 컬럼의 값을 1증가(update)

<update id="updateCommentCount" parameterType="String">
   update tbl_board set commentCount = commentCount + 1
   where seq = #{parentSeq}
</update>

▶ #87-2 tbl_member 테이블에 point 컬럼의 값을 50증가(update)
<update id="updateMemberPoint" parameterType="HashMap">
   update tbl_member set point = point + to_number(#{point})
   where userid = #{userid}
</update>

to_number(#{point}) ◀ -- 숫자를 컬럼에 그냥 넣을땐 String으로 넣어도 되지만, 연산을 한다면 이렇게 숫자형으로 바꿔준다.

▶ 서비스에서는 트랜잭션을 하니깐 Exception이 발생할 수 있다. 그래서 throws로 던져서 컨트롤러에서 Exception 처리를 해줘야 한다.
- DB는 rollbackFor= {Throwable.class} 으로 인해서 무언가 오류나 예외처리가 나면 rollback이 된다.
- Throwable는 Exception과 Error의 최상위 부모이다.

public int addComment(CommentVO commentvo) throws Throwable { }  
- 이 댓글쓰기 메소드는 무언가 오류가 발생할 수도 있다고 명기해준다.
- 컨트롤러로 throws를 해서 Exception 처리를 하게 해준다.

▶ 무언가 실패되어지면 서비스에서는 롤백을 해주고, 컨트롤러에서 catch를 해서 어떤 오류인지 console에 알려준다. 또한 n은 그대로 0이 될 것이다.

■ BoardController.java

이제 트랜잭션이 성공했다면 다시 view.jsp에 JSON 형식으로 결과값을 보내줘야 한다.

JSONObject jsonObj = new JSONObject();
jsonObj.put("n", n);
jsonObj.put("name", commentvo.getName());
		
return jsonObj.toString();

★ 그리고 메소드 위에 @ResponseBody 를 적어준다. (스프링 기능)
==> 이것만 넣어주면 return jsonObj.toString(); 결과물이 그대로 웹페이지에 찍혀서 나온다.

@ResponseBody
@RequestMapping(value="/addComment.action", method= {RequestMethod.POST})
public String addComment(CommentVO commentvo) { }

▶ 얘는 결과물을 다시 view.jsp로 되돌려보내야 하니깐 접두어, 접미어나 tiles가 필요없고 @ResponseBody로 view.jsp에 되돌려보내면 된다.

▶ 만약 @ResponseBody를 쓰지않으면 /WEB-INF/views/{"name":"이순신","n":0}.jsp 으로 접두어, 접미어를 붙여서 페이지 이동을 시킨다.

즉 @ResponseBody는 "결과물을 그대로 웹에 보여라"는 뜻이다.

또한 한글이 깨져나오는 것을 막기위해서 @RequestMapping에 produces="text/plain;charset=UTF-8" 를 추가해서 UTF-8로 바꿔줘야 한다.

@RequestMapping(value="/addComment.action", method= {RequestMethod.GET}, produces="text/plain;charset=UTF-8")

★ Ajax면 이제 컨트롤러에서 @ResponseBody 와 @RequestMapping(value="/addComment.action", method= {RequestMethod.GET}, produces="text/plain;charset=UTF-8") 를 쓴다.

---------------------------------------------------------------------------------------------------------------------------------------------

▶ 성공이라면 그냥 보여주지만, 회원의 포인트가 300이 넘어있으면 댓글을 달 수 없다고 alert를 띄워준다.

==== Transaction 처리를 위한 시나리오 만들기 ====
회원들이 게시판에 글쓰기를 하면 글작성 1건당 POINT 를 100점을 준다.
회원들이 게시판에서 댓글쓰기를 하면 댓글작성 1건당 POINT 를 50점을 준다.
그런데  일부러 POINT 는 300을 초과할 수 없다.

▶ tbl_member 테이블에 POINT 컬럼에 Check 제약을 추가한다.
alter table tbl_member
add constraint CK_tbl_member_point check( point between 0 and 300 );
-- Table TBL_MEMBER이(가) 변경되었습니다.

update tbl_member set point = 301
where userid = 'vmim77';
-- ORA-02290: check constraint (MYMVC_USER.CK_TBL_MEMBER_POINT) violated


====================================================================================

[ 댓글 조회해오기 ] 

▶ #90 ~ #94

List<CommentVO>
selectList 

▶ #94 - view.jsp에 댓글목록을 쏴줄 곳을 추가한다.

====================================================================================

[ 글 목록에 댓글 개수 표시하기 ]

▶ #95 

list.jsp 에서 처리를 한다.

mapper.xml에서 commentCount 컬럼을 추가해준다.

그리고 list.jsp에서 commentCount를 제목을 반복문으로 찍어주는 곳에 추가를 한다.

====================================================================================

[ 글쓰기를 하면 포인트 100씩 올린다 ]

먼저 300포인트 제약조건을 지운다.

alter table tbl_member
drop constraint CK_tbl_member_point;

▶ #54. 게시판 글쓰기 완료 요청  작업에 추가를 한다.

어떤 작업이 끝나면 "포인트를 올려준다" 

"포인트를 올려준다"는 공통관심사가 될 수 있다. 그러므로 Advice로 설정해준다.

- 댓글쓰기, 글쓰기에 공통적으로 들어가니 매번 코딩을 하는게 아니라 공통관심사로 설정해서 끌어다 쓴다.

▶ #96. After Advice(보조업무) 만들기

주업무(<예: 글쓰기, 제품구매 등등>)를 실행한 다음에  
회원의 포인트를 특정점수(예: 100점, 200점, 300점) 증가해 주는 것이 공통의 관심사(보조업무)라고 보자.
관심 클래스(Aspect 클래스)를 생성하여 포인트컷(주업무)과 어드바이스(보조업무)를 생성하여
동작하도록 만들겠다.


▶ 글쓰기를 한 사람이 누구인지를 알아야 포인트를 올려줄 수 있다.
▶ 또한 기능마다 올려줄 포인트 값이 다르다.
- 글쓰기는 100
- 댓글쓰기는 50

그래서 우리는 주업무(Pointcut)에 있는 어떤 파라미터에 값을 담아서 보조업무(Advice)에 보내준다.
joinPoint.getArgs()[0]; 식으로 이용하면 된다.

▶ 그래서 Pointcut으로 지정되는 pointPlust_* 메소드들은 똑같이 첫번째 파라미터에 Map<String, String> paraMap을 추가한다.

■ CommonAOP.java 


@Autowired
private InterBoardService service; // 서비스로 포인트 Update를 위해서 보내줘야하는데 CommonAOP에는 service가 빈으로 없기 때문에 하나 만들어준다.

@SuppressWarnings("unchecked") // 앞으로는 노란줄 경고 표시를 하지 말라는 뜻이다.
@After("pointPlus()")
public void pointUp(JoinPoint joinPoint) { 

Map<String, String> paraMap =  (Map<String, String>) joinPoint.getArgs()[0]; 
// 주업무에 있는 첫번째 파라미터를 .getArgs()[0]; 이 땡겨온다.
// 이 Map에는 작성자와 얼마의 포인트를 줄 지가 들어가 있다.

}
=========================================================================================
오후수업
=========================================================================================

[ StarUML ]

▶ UML이란?

Unified Modeling Language

1997년 OMG(Object Management Group)에서 표준으로 채택한 통합모델링언어 이다.

- 프로그램을 말로 설명하기 힘드니, 도식화한 것이다.
- 우리가 만든 프로그램을 그림으로 보여주는 것이다.

프로그램을 다 짜고나서 납품을 할때 UML을 넣어주면 유지보수를 할 때 프로그램에 대한 전체적인 파악이 쉬워지니 편하다.

마치 건축물의 설계도면과 같다.

=========================================================================================

▶ 유스케이스 다이어그램

※ 유스케이스 = 행위, 기능

★ 프로그램 속에 어떤 기능이 있나 알아보는 것이다.

※ Actor = 사용자(회원, 비회원)

▶ 로그인한다(전제조건) <--<<include>> -- 글을등록한다
==> 글을 등록하기 위한 전제조건은 "로그인하기" 라는 뜻이다.

▶ 파일을 첨부한다 -- <<extends>> --> 글을 등록한다.
==> 글작성에 있어서 파일첨부는 있어도 되고 없어도 되는 뜻이다.

▶ Generalization은 어떤 기능을 하기위한 방법이다.
글을 조회한다. <------- Generalization ------- 글쓴이로 조회한다. <------- Generalization ------- 날짜로 조회한다.

▶ 사용자에서 기능을 이을땐 Association 으로 줄은 친다.

▶ 도식을 없앨때는 model Explorer에서 오른쪽 클릭 -> delete from model로 지워야한다.
그냥 도식에서 delete키로 지워도 남아있다.

▶ file - export diagram으로 jpg로 다이어그램을 저장할 수 있다.
==> 이미지파일로 저장한 것은 포트폴리오에 꼭 게재해야한다.

=========================================================================================

▶ 시퀀스 다이어그램

★ 프로그램에서 어떤 기능의 실행순서를 알아보는 것이다.

※ 점선: 생명선 ( 이 클래스가 살 수 있는 시간 )

▶ 시퀀스 다이어그램은 analysisModel에 생성을 한다.

예시로 "회원가입"이 어떻게 이루어지는지 그 실행순서를 도식화한 것이다.

※ Object: 객체, 클래스

Object의 이름은 풀패키지명으로 써야한다. --> member.controller.MemberRegisterAction

※ 설명은 Annotation -> Text 로 쓴다.

[ 회원가입 ] 

1. 처음에 들어오면 form이 있는 view 페이지로 이동

2. 회원ID 중복검사하기 버튼 클릭

3. Ajax로 IdDuplicateCheckAction으로 전송한다.
※ Annotation을 클릭해서 Sequece가 안보이면 다른 탭을 눌렀다 돌아오면 생긴다.

4. 입력받은 ID를 DAO로 전송해서 중복확인을 한다.
- Sequence -> Stimulus
- Stimulus를 이으면 제어사각형이 생기는데 해당 객체가 제어권을 가지고 있음을 나타낸다
- 다시 MemberRegisterAction 에서 IdDuplicateCheckAction 으로 Stimulus로 이어준다.
- idDuplicateCheck(userid) 식으로 쓰면 괄호 안에 userid는 사라지고 클릭해보면 arguments에 들어가 있다.
- return 타입에는 해당 메소드의 리턴값을 써준다.

5. DB(Oracle)에서 select where 로 검사를 한다. -> Annotation -> Rectangle 로 DB를 표현해준다.
- 호출은 Stimulus의 속성에서 ActionKind를 CALL로 하고, 리턴되는 것은 RETURN으로 바꿔준다.

★ UML은 정답이 있는 것은 아니다. 단지 개발자간의 의사소통을 위한 것이다.


★ 포트폴리오PPT에 StarUML을 넣어주면, 입사할때 다이어그램을 그릴 줄 안다고 생각해서 도움이 된다.
==> 실제 실무에서는 그렇게 자세히 그리진 않는다.
==> 세미프로젝트 도식화 반드시 추가할 것!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

★ 다음주 파이널에 먼저 어떤 기능들을 만들지 회의로 정한 다음에 --> 유스케이스 다이어그램으로 먼저 기능들을 그리고 --> 시퀀스 다이어그램으로 그 기능의 절차를 그려준다. --> 그리고 이 도식을 바탕으로 코딩을 한다.
(※ 거꾸로 해도 ㄱㅊ다)


=========================================================================================

▶ 클래스 다이어그램

★ 프로그램에 어떤 클래스들이 있으며 그 클래스들을 설명해주는 다이어그램이다.
- 클래스에 있는 필드(속성), 메소드 들을 표시해준다.

★ 클래스는 보통 3개의 compartment(구획)으로 나누어 클래스의이름, 속성, 기능을 표기한다. 속성과 기능은 옵션으로 생략이 가능하지만 클래스의 이름은 필수로 명시해야 한다.

▶ 클래스 다이어그램은 Design Model에서 그린다.

[ Class 도식 설명 ]
-------------------------------------------
	      클래스명
-------------------------------------------
                  필드(Attribute)
-------------------------------------------
                  메소드(Operation)
-------------------------------------------

▶ 클래스를 하나 그리고 오른쪽 클릭 -> Attribute로 필드를 추가할 수 있다.

추가한 필드 userid 를 클릭하고 Visibility에서 접근제한자를 설정한다. 
- public은 + 모양
- private는 - 모양
- protected는 # 모양
- default는 package로 적혀있으며 ~ 모양이다.

Type에 자료형을 적어준다.

즉, "-userid: String" 은 private String userid 와 같다.

▶ 클래스를 오른쪽 클릭 -> Operation으로 메소드를 추가할 수 있다.

isRequirePwdChage( ) 를 예제로 만든다.
- 파라미터 없음
- 리턴타입은 boolean

★ 리턴타입은 일단 오퍼레이션 오른쪽 클릭 -> 파라미터를 하나 만들고 name(이름)을 없앤다. 그리고 type(리턴타입)에는 boolean을 주고, DirectionKind를 리턴으로 바꿔준다.

+isRequirePwdChange():boolean == public boolean isRequirePwdChange()

▶ 파라미터가 있는 경우에는?

오퍼레이션 오른쪽 클릭 - 파라미터 생성 
DirectionKind는 in으로 하고, Name에는 파라미터 이름, Type에는 파라미터 데이터타입을 적어주고, 
그리고 이름이 없는 파라미터를 하나 더 만들고 DirectionKind를 return으로 바꿔서 써준다.

+setRequirePwdChange(requirePwdChange:boolean): void (※ void여도 꼭 적어줘야 한다) == public void setRequirePwdChange(boolean requirePwdChange)

★ 일반적으로 getter, setter 메소드는 기술하지 않는 편이며, getter, setter가 아닌 메소드만 기술하도록 한다.
( 해주면 좋지만, 필드가 많아서 메소드도 많아지니깐 복잡해보여서 잘 안 쓴다. )


만약 인터페이스를 만드려면 일단 클래스로 만들고, 스테레오 타입(Stereotype)에 interface로 적어준다.

※ 《, 》 는 길러멧이라고 부른다.

◈ Stereotype : interface
- 일반 클래스가 아닌 인터페이스임을 알려준다.
- 인터페이스에는 public Abstract 가 빠져있다 (미완성 메소드이니깐)
★ 그래서 Visibility를 public으로 하고, IsAbstract를 체크해준다!
--> 그러면 메소드이름이 이탤릭처럼 기울어져서 보인다.

registerMember의 파라미터 타입은 MemberVO인데 직접 적어도 괜찮지만, Type에 ...을 눌러서 클래스를 선택해줘도 된다.



▣ 미완성 클래스를 그리는법 - AbstractController

마찬가지로 클래스를 클릭하고 IsAbstract에 체크를 해준다.

InitialValue는 초기치를 뜻한다. AbstractController에서 isRedirect는 초기치가 false이니깐 false를 적어준다.

-isRedirect:boolean=false == private boolean isRedirect = false;



▶ 클래스별 관계는 다음 시간에

...........▷ 은 인터페이스 관계

------▷ 은 부모/자식 관계
=========================================================================================

파이널 프로젝트 회의

등원은 조별로 나올거에요, 전체X


