10월 28일 수업

[ 조회수 중복제거 ]

▶ #68, #69

글 목록에서 클릭해서 글을 봤을 때만 조회수가 올라가게 해준다.
글 상세보기에서 새로고침을 했을 때는 조회수가 올라가지 않게 막는다.

이것을 하기 위해서는 session 을 사용하여 처리하면 된다.

"#58. 글목록 보기 페이지 요청"에서 처리를 한다.

HttpSession session = request.getSession();
session.setAttribute("readCountPermission", "yes");
- 글목록에서 글제목을 누르고 들어와야 세션에 readCountPermission이 yes로 들어간다.

"#62. 글 1개를 보여주는 페이지 요청"에서 session에 저장된 readCountPermission이 yes이라면 Service에서 update문도 같이 돌려주고, 아니라면 select만 하게 해준다.

if( "yes".equals(session.getAttribute("readCountPermission") ) ) {
   boardvo = service.getView(paraMap, login_userid);
   session.removeAttribute("readCountPermission");
}
else {
   // 웹브라우저에서 새로고침(F5)을 클릭한 경우이다.			
   boardvo = service.getViewWithNoAddCount(paraMap);
   // 글조회수 증가는 없고 단순히 글1개 조회만을 해주는 것이다.
}

▶ 글목록보기를 클릭한 다음에 특정글을 조회해온 경우 조회수를 올려준다.

====================================================================================

[ 이전글, 다음글 기능 ]

오라클에서 lag, lead 함수를 사용한다.

▶ lag(seq, 1) over(order by seq asc) - seq를 오름차순으로 정렬했을때 한 칸 위의 seq를 가져와준다. (★ 자기보다 위에있는 행)
▶ lead(seq, 1) over(order by seq asc) as nextseq - seq를 오름차순으로 정렬했을때 한 칸 아래의 seq를 가져와준다.(★ 자기보다 아래있는 행)

select lag(seq, 1) over(order by seq desc) AS previousseq
     , lag(subject, 1) over(order by seq desc) AS previoussubject
     
     , seq, fk_userid, name, subject, content, readCount
     , to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') AS regDate -- 여기까지는 자기글
     
     , lead(seq, 1) over(order by seq desc) as nextseq
     , lead(subject, 1) over(order by seq desc) as nextsubject 
from tbl_board
where status = 1 and seq = 3

==> 이러면 메모리에 한 개의 행만 올라가서 앞과 뒤가 나오질 않는다.


select previousseq, previoussubject, seq, fk_userid, name, subject, content, readCount, regDate, nextseq, nextsubject
from
(
    select lag(seq, 1) over(order by seq desc) AS previousseq
         , lag(subject, 1) over(order by seq desc) AS previoussubject
         
         , seq, fk_userid, name, subject, content, readCount
         , to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') AS regDate -- 여기까지는 자기글
         
         , lead(seq, 1) over(order by seq desc) as nextseq
         , lead(subject, 1) over(order by seq desc) as nextsubject 
    from tbl_board
    where status = 1
) V
where seq = 3;
==> 이렇게 한번 inline view로 감싼다음에 해야 먼저 모든 글을 메모리에 올리고 거기서 3번 글만 조회한다.

▶ #66. 글 1개를 조회하기의 SQL문을 다음과 같이 바꾼다.

※ 현재 BoardVO에는 이전글 번호, 이전글 제목, 다음글 번호, 다음글 제목은 없는 필드(멤버변수)여서 추가해줘야 한다.
→ 글번호는 String으로 다 호환되니깐 String 타입의 필드(멤버변수)로 만들어준다.

★ returntype에 모델에 있는 VO를 타입으로 써주면(resultType="com.spring.board.model.MemberVO"), MemberVO와 select에서 컬럼명이 똑같다면 자동적으로 set이 된다.
→ select된걸 VO에 저장할땐 필드 이름을 기준으로 한다.

★ ${boardvo.name} 처럼 EL(표현언어)에서는 VO의 getter에서 get 다음에 글자를 써주면(getName이면 name(첫글자 소문자로!)) 리퀘스트에 저장된 VO에서 필드값을 뽑아온다.
→ 리퀘스트에 저장된걸 꺼낼땐 getter의 이름을 기준으로 한다.

====================================================================================

[ 글 목록보기, 글 수정하기, 글 삭제하기 ]

글 수정과 삭제는 반드시 로그인이 필요하다 → advice가 있어야 한다.
또한 로그인한 사람이 누구인지를 알아야한다. → (로그인한 사람 == 작성자) 조건이 맞아야 가능하게 한다. 


글 목록보기는 onclick="javascript:location.href='<%= request.getContextPath()%>/list.action'" 으로 처리한다.


▶ #71 글 수정하기
- 로그인 유무검사가 필요하니 Pointcut에 패턴에 맞게 만들어준다.
- 메소드명은 "requiredLogin_" 이 앞에 붙어야한다.
- 파라미터는 첫번째는 request, 두번째는 response여야 한다.

@RequestMapping(value="/edit.action")
public ModelAndView requiredLogin_edit(HttpServletRequest request, HttpServletResponse response, ModelAndView mav) {
		
   return mav;
}


- 일단 먼저 기존 글 내용을 보여준 다음에 바꾸게 해준다.

// 글 수정해야 할 글번호 가져오기
String seq = request.getParameter("seq");

// 글 수정해야할 글1개 내용 가져오기
Map<String, String> paraMap = new HashMap<>(); 
paraMap.put("seq", seq);

BoardVO boardvo = service.getViewWithNoAddCount(paraMap); 
// 글조회수 증가는 없고 단순히 글1개 조회만을 해주는 것이다.

- 그 다음에 글작성자 = 로그인한 사람이 같은 지 확인해준다. (※ 로그인 했는지는 advice에서 검사해줬음)


[퀴즈]
비로그인 상태에서 글목록보기로 이동 --> 글목록보기 페이지에서 로그인을 해도 index.action가 아닌 list.action으로 가야한다.
마찬가지로 로그인한 상태로 글목록보기 페이지로 이동 --> 여기서 로그아웃을해도 index.action이 아닌 list.action으로 가야한다.
(※ 로그인이 필요한 페이지에서는 index.action으로 이동시킨다.)

BoardController

	////////////////////////////////////////////////////////////////////////////////
	//  === 로그인 또는 로그아웃을 했을 때 현재 보이던 그 페이지로 그대로 돌아가기 위한 메소드 생성 ===    
	public void getCurrentURL(HttpServletRequest request) {
		HttpSession session = request.getSession();
		session.setAttribute("goBackURL", MyUtil.getCurrentURL(request));
	}
	////////////////////////////////////////////////////////////////////////////////

==> 이 메소드만 부르면 goBackURL을 session에 설정해준다.
==> 글목록 보기에서 저 메소드를 먼저 호출해주면 일단 글목록보기 URL을 세션에 저장시켜준다.

// === #50. 로그아웃 처리하기 === //
	   @RequestMapping(value="/logout.action")
	   public ModelAndView logout(ModelAndView mav, HttpServletRequest request) {
	      
	      HttpSession session = request.getSession();
	      
	      String goBackURL = (String) session.getAttribute("goBackURL");
	      
	      session.invalidate();
	      
	      String message = "로그아웃 되었습니다.";
	      
	      String loc = "";
	      if(goBackURL != null) {
	         loc = request.getContextPath()+goBackURL;
	      }
	      else {
	         loc = request.getContextPath()+"/index.action";
	      }
	      
	      mav.addObject("message", message); 
	      mav.addObject("loc", loc);         
	      mav.setViewName("msg");
	      
	      return mav;
	   }

goBackURL의 값이 세션에 있다면 그 곳으로 보내고, 없으면 index.action으로 보낸다.

▶ 로그인이 필요한 기능들은 goBackURL을 설정해놓지 않는다.

이제는 어떤 페이지를 만들 때 getCurrentURL(request); 만 넣어주면 돌아갈 페이지를 설정해준다.
==> 허나, 로그인 기능이 필요한 곳에서는 쓰지 않는게 좋다.

-------------------------------------------------------------------------------------------------------------------------------------

▶ # 72. 글수정 페이지 완료하기

★ 수정한 글내용을 이제 컨트롤러에서 다시 받아서 처리를 해야하는데, 이제는 request.getParameter로 폼에서 전송해준 내용을 받을 필요없이, 스프링에서는 메소드 파라미터에 VO만 넣어주면 알아서 다 set 되어진다.

★ mapper.xml 에서 where seq = #{seq} and pw = #{pw} 식으로 쓸때 저 #{ } 안에 들어가는 값은 VO의 필드명이다.

★ update, insert, delete를 할 때는 resultType이 없고, 적용된 행의 개수가 알아서 DAO로 넘어가진다.

====================================================================================
오후수업
====================================================================================

리턴된 int값에 따라서 페이지 이동을 처리해준다.
→ 변경되어진 글을 다시 보여준다. (/view.action)

mav.addObject("loc", request.getContextPath() + "/view.action?seq="+boardvo.getSeq());

====================================================================================

▶ #76. 글 삭제 - #80

글 상세보기에서 글 삭제하기 클릭 -> del.action 으로 이동 -> View 페이지로 이동시켜서 암호입력받게함 -> 삭제버튼 누르면 삭제시키기 (delete from tbl_board where seq =  and pw = )

※ 글 삭제는 로그인을 해야하며 내가 쓴 글만 삭제할 수 있게한다.

requireLogin_del( )로 명명하여 advice가 작동하게 한다.

글상세보기에서 글 삭제하기를 클릭하면 글번호를 GET으로 보내주니 request.getParameter("seq")로 삭제할 글번호를 뽑아온다.

그리고 그 글번호의 글을 가져와서 작성자와 로그인한 사람을 비교한다.

SQL에서도 글번호는 있는거여도 비번이 틀리면 삭제되는 행이 없다. 
--> 이를 통해서 리턴값이 0이면 글암호가 틀려서 삭제 실패라고 띄워주고, 1이뜨면 성공이라고 띄워준다.

★★★ 스프링은 두 개 이상 변수를 넘겨야 하면 Map으로 넘겨야 한다.
-> 왜냐하면 DAO에서 mapper의 메소드를 부를때 select, update, insert, delete 모두 parameter를 넣을 수 있는 칸이 한 곳뿐이다. 
-> 그래서 한 개라면 바로 넘겨도 괜찮지만, 두 개 이상이라면 VO 혹은 Map에 담아서 넣어준다.

※ 배열이 아닌 컬렉션으로 넘기면 되지만, 배열은 길이제한이 있기 때문에 제외된 것이다!

====================================================================================

[ 댓글쓰기 ]

▶ #81부터 시작

댓글이 하나도 없다면 표시를 안해주고, 1개 이상이라면 글 목록에서 제목 옆에 보여준다.

어떤 글이 삭제되면 그 글에 따린 댓글을 모두 삭제시켜야한다. 그래서 댓글 테이블에 parentSeq에는 참조키가 걸려있고, on delete cascade 옵션이 설정되어 있다.

- 댓글테이블, 댓글시퀀스, 댓글VO 생성

■ view.jsp

▶ #83
댓글쓰기 폼을 추가한다. -- 로그인을 해야만 보여준다.

※ type="reset"은 폼태그 안에 있어야 먹힌다.

댓글쓰기는 ajax로 처리해서 페이지 이동이 없어야 한다.

▶ #84
ajax를 쓸 때는 Controller에서 메소드의 리턴타입은 String이다.

★ ajax에서 전송해준 data의 키값이랑 VO의 필드명이 똑같다면 그냥 메소드 파라미터에 CommentVO만 써놔주면 .getParameter 해 줄 필요없이 자동적으로 set이 다 되어진다!

▶ Service는 댓글 테이블에 insert가 성공되면, 게시글 테이블에 댓글 개수를 update 해주는 트랜잭션 처리를 해야한다.

★ Transaction(트랜잭션) 처리
--> Transaction(트랜잭션)이라 함은 관련된 일련의 DML로 이루어지 한꾸러미(한세트)를 말한다.
--> Transaction(트랜잭션)이라 함은 DB의 상태를 변환시키기 위하여 논리적 기능을 수행하는 하나의 작업단위를 말한다.

★ 가장 중요한 것은 모든 DML문이 성공해야만 최종적으로 모두 commit을 해주고,

★ DML문중 1개라도 실패하면 모두 rollback을 시켜줘야 한다.


★ Service에서 트랜잭션처리를 할 메소드에 @Transational 어노테이션을 추가해준다.
★ 트랜잭션 처리는 Service에서 해준다!
- DAO는 단순히 insert, update를 불러오기만 한다.

Exception들의 최상위 부모는? - Exception
Exception의 최상위 부모는? - Throwable
Error의 최상위 부모는? - Throwable

Throwable.class 은 error 및 exception 을 포함한 최상위 루트이다.

★ rollbackFor= {Throwable.class} 의 뜻은 무언가 잘못되기만하면 무조건 rollback 하겠다는 뜻이다.


	@Override
	@Transactional(propagation=Propagation.REQUIRED, isolation=Isolation.READ_COMMITTED, rollbackFor= {Throwable.class})
	public int addComment(CommentVO commentvo) {
		
		int n=0, m=0, result=0;
		
		// 댓글쓰기(tbl_comment 테이블에 insert)
		n = dao.addComment(commentvo);
		
		if(n==1) {
			// tbl_board 테이블에 commentCount 컬럼이 1증가(update)
			m = dao.updateCommentCount(commentvo.getParentSeq());
		}
		if(m==1) {
			// tbl_member 테이블에 point 컬럼의 값을 50증가(update)
			result = dao.updateMemberPoint(commentvo.getFk_userid());
		}
		
		return result;
	}


★ 스프링에서 여러개의 파라미터를 Map으로 넘기는 이유! 
bandicam 2021-10-28 17-39-00-562.mp4 를 참고할 것!