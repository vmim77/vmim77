11월 10일 수업

[ 파일첨부 글 삭제하기 ]

파일이 첨부된 글을 삭제하면 자동으로 첨부된 파일도 삭제되야한다.

#77. 글삭제 페이지 완료하기 - /delEnd.action으로 이동하여 추가를 한다.

▶ #164. 파일첨부가 된 글이라면 삭제시 먼저 첨부파일을 삭제해주어야 한다.
→ 먼저 seq를 이용하여 해당 글에 파일이 있는지 없는지를 파악해야 한다.
→ getViewWithNoAddCount(paraMap) 메소드를 이용한다.

getViewWithNoAddCount(paraMap) 메소드는 paraMap에 seq, searchType, searchWord가 들어있어야 한다.
→ searchType과 searchWord는 현재 필요가 없으나, 문법때문에 ""를 넣어줘서 조건절이 작동안하게 해준다.

서비스에 path(파일경로), fileName(실제파일명)을 넘겨서 삭제를 진행한다.
→ 어떤 글을 지우는데 해당 글에 첨부파일이 있으면 이 단계가 진행된다.

▶ #165. 파일첨부가 된 글이라면 DB에서 글삭제가 성공된 후 첨부파일을 삭제해주어야 한다.
int n = dao.del(paraMap);
n이 1이라면, paraMap에서 첨부파일이 있는지 없는지 꺼내보고 있다면 파일도 삭제해준다.
→ 서비스에 FileManager 의존객체를 생성하고, doFileDelete(fileName, path); 메소드를 호출한다.

■ FileManager.java

public void doFileDelete(String fileName, String path) {}
→ 경로를 이용하여 파일 객체생성
→ 파일이 실제로 존재하면 삭제 
=======================================================================

▶ 글 삭제를 할때 암호를 틀리면 1페이지로 이동이 되는데 이를 고친다.

■ delEnd.action에서 if(n==0) 조건절을 수정한다.

글삭제를 실패하고 목록보기로가면 index로 이동하는 것을 수정한다.
글수정하기에서도 암호를 잘못누르고 목록보기를 하면 index로 이동한다.
→ gobackURL을 넘겨넘겨줘야한다.

=======================================================================

[ 스마트에디터 ]

■ add.jsp

스마트 에디터를 사용하면 글내용 유효성검사가 필요없다.
→ 자동으로 유효성검사를 해준다.

스크립트절에 스마트에디터 구현부를 추가하고, 쓰기버튼 클릭시에 글내용 유효성검사 부분을 주석처리한다.

스마트 에디터를 사용하면 내용물을 아무것도 안써도 자동적으로 <p>&nbsp;</p>가 들어가져 버린다.
그래서 if(contentval == "" || contentval == "<p>&nbsp;</p>") { } 이렇게 내용이 들어갔나 안들어갔나 확인해야 한다.

★ 글서식에 대한 적용은 되지만, 스마트에디터의 사진 첨부하기 Mapping을 해줘야한다.

=======================================================================

■ edit.jsp

스마트에디터를 사용하여 글작성후 글수정을 누르면 HTML문자들이 그대로 표기되니 수정해준다.

마찬가지로 스마트에디터 스크립트 코드들을 넣어주고, 글내용 유효성 검사부분을 주석처리해준다.

=======================================================================

[ 스마트에디터 사진첨부하기 ]

★ Spring MVC 에서 스마트 에디터 구현하기.txt 를 참고하면서 설정을 한다.

1번 - 스프링 환경구축에서 이미 함
2번 - 스프링 환경구축에서 이미 함

3번 & 4번 - add.jsp와 edit.jsp 스크립트단에 스마트에디터 소스를 추가한다.

★ 주의사항 - textarea 태그에서 required="required" 속성을 사용하면 스마트 에디터에 오류가 발생한다.

--------------------------------------------------------------------------------------------------------------------

▶ 5번 사진첨부 시작하기

■ photo_uploader.html

/webapp/resources/smarteditor/sample/photo_uploader/photo_uploader.html
→ 기본값에는 action에 php로 되어있다. 우리의 개발환경과 맞지 않아서 action 부분을 삭제한다.

--------------------------------------------------------------------------------------------------------------------

▶ 6번

■ attach_photo.js

/webapp/resources/smarteditor/sample/photo_uploader/attach_photo.js

▶ callFileUploader() 함수 - 단일사진첨부

원래는 sUrl이 비어져있지만 지금은 /board/image/photoUpload.action 으로 예제에 미리 셋팅을 되어있다.
→ 프로젝트에서는 우리가 직접 코딩한 URL로 바꿔놔야한다.


==> 479번째 줄의 callFileUploader () 함수(단일사진첨부함수)를 보면 

sUrl  : location.href.replace(/\/[^\/]*$/, '') + '/file_uploader.php',  //샘플 URL입니다.
sCallback : location.href.replace(/\/[^\/]*$/, '') + '/callback.html',  //업로드 이후에 iframe이 redirect될 콜백페이지의 주소

위코드를 아래처럼 재정의 해주도록 합니다.

sUrl  : '/board/image/photoUpload.action',	  // 파일업로드시 동작되는 컨트롤러 URL
sCallback : location.href.replace(/\/[^\/]*$/, '') + '/callback.html',	//업로드 이후  redirect 페이지 URL

--------------------------------------------------------------------------------------------------------------------

★ 예제에서는 단일사진첨부를 아예 사용하지 않고 다중사진첨부를 사용한다.

html5Upload 함수 - 다중파일업로드

★ 파이널프로젝트에서는 해당 함수의 sUploadURL을 우리꺼에 맞춰서 설정해줘야한다.

▶ #168. 스마트에디터. 드래그앤드롭을 사용한 다중 사진 파일업로드

파일을 첨부하기때문에 오로지 POST 방식만 허락해줘야한다. 
→ 스마트에디터.js에서도 POST로 전송을 하고있다.
→ @RequestMapping(value="/image/multiplePhotoUpload.action", method={RequestMethod.POST})

메소드의 파라미터로 request, response를 설정한다.
→ public void multiplePhotoUpload(HttpServletRequest request, HttpServletResponse response) {}

어제는 파일을 첨부할때 폼태그 속에 담아서 보내준다.
지금 스마트에디터의 사진첨부는 내용물 속에 담아서 보내는 것이다.
→ 스마트에디터는 파일명을 Header 속에 담아서 전송시킨다.
→ request.getHeader("file-name");

★ 원래는 폼속에 파일첨부를 넣어서 보내오지만 스마트에디터는 name없이 본문(Body)의 내용물속에 끼어들어오기 때문에 request.getParameter("name")이 아닌 request.getInputStream( ) 이나 request.getReader( )로 꺼내와야한다.
→ 이러한 형태의 값을 'payload body'라고 한다.

InputStream is 에는 이진파일인 파일이 들어가져있다.
→ 텍스트가 아닌 이진바이너리파일이다.
→ 얘가 실제 사진파일의 내용물임
→ 얘의 파일명은 filename 이다.

오버로딩을 이용하여 메소드명은 같지만 파라미터가 다른 메소드를 다시 생성함!
오버로딩
오버라이딩 

■ FileManager.java

FileOutputStream fos = new FileOutputStream(pathname); // 이렇게 FileOutputStream(주소)만 적어도 일단 깡통인 파일이 하나 생성된다.
→ 이후 while문을 이용하여 .read( ) 메소드로 내용물을 채워준다.
→ is는 아까 컨트롤러에서 넘겨준 것으로 바디의 내용물에 섞여서 들어온 이미지 파일이 지정되어 있다.

※ 원래는 .write()가 있으면 .flush()가 있어야한다.
→ 내부적으로 autoflush가 되어서 안써도 괜찮다.

★ 스마트에디터 오픈소스 가이드
https://developers.naver.com/docs/smarteditor/tutorial/

★ 스마트에디터를 이용한 이미지 첨부는 파일명이 content 안에 코드로 들어가기 때문에 지정해서 삭제하기 까다롭다.

SQL문으로 content 안에 사진파일명을 끄집어내서 빼내야 .metadata에서 삭제할 수 있어서 까다롭다.

