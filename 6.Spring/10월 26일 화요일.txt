
10월 26일 수업


▶ 스프링 세팅은 "_STS설치및Spring버전3을 버전4로 업그레이드하기.txt"를 참고한다.


▶ Tiles 셋팅도 예제를 보면서 이해를 해야한다.


[ 구동순서 ]


WAS 구동 -> web.xml(배치서술자) -> 파라미터 파일 root-context.xml, servlet-context.xml (환경설정 파일) -> 특정 URL(*.action) 이라면 DispatcherServlet 이 작동한다. -> 사용자가 입력한 "~~.action"으로 선언된 Bean(객체)들 중에서 해당 URL과 매핑된 컨트롤러(@Controller)를 찾는다. -> Service단으로 이동한다(== 핵심업무 로직단, Business logic단, DB와 관련된 곳) -> Service단이 필요한 메소드를 Model(DAO, DTO)에서 불러온다. -> myBatis로 DB와 연결을 한다.


▶ DB에서 응답을 받았다면 다시 myBatis -> Model(DAO, DTO) -> Service -> Controller(request.setAttribute(key, value)) -> View 의 역순으로 넘긴다.


데이터베이스 설정: root-context.xml

웹 설정: servlet-context.xml


▶ 오라클의 객체 ID는"sqlsession"이고, 이 객체는 sqlSessionFactory를 참조한다. 이 sqlSessionFactory는 mapper 파일의 위치와 참조하는 dataSource(DBCP)를 나타내고, 해당 DBCP로 연결을 한다.


★ 오라클의 객체 ID인 sqlsession(2, 3)이 무엇이냐에 따라 어떤 DB서버에 연결될지가 결정된다.

(예시)

sqlsession -> local mymvc 서버

sqlsession2 -> remote 서버

sqlsession3 -> local hr 서버


▶ ViewResolver( 뷰단을 해석해주는 것이다. )

현재 servlet-context.xml에는 1순위가 Tiles, 2순위가 기본 ViewResolver이다.(접두어, 접미어)

- 전자정부 프레임워크에서는 Tiles를 많이 쓴다.


====================================================================================


[ myBatis 설정하기 ]


root-context.xml에서 설정한 myBatis(JDBC) mapper 파일 위치에 따라서 패키지를 생성한다.

==> <property name="mapperLocations" value="classpath*:com/spring/board/mapper/*.xml" />

==> com/spring/board/mapper 패키지를 생성한다.


※ 추후에 파이널 프로젝트에 들어가면 mapper에 들어가는 xml은 프로젝트 팀원별 각자 한 개씩 만들어야 한다.

==> 각 팀원의 "이름.xml" 식으로 여러 개를 만든다.

==> mapper 파일(*.xml)은 여러 개를 만들 수 있다.

==> 패키지는 동일하게 써야한다.


■ board.xml


- namespace를 설정해야한다. ( ※ 프로젝트 전체내에서 유일해야 한다. )

- 만약 board.xml도 namespace를 "board"를 주고, hr.xml도 namespace를 "board"를 주면 충돌이 일어난다.


<!-- ==== #29. mapper 기본설정 ==== -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- ==== #29. 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다.) ==== -->

<mapper namespace="board">


★ 그래서 mapper 파일의 namespace는 프로젝트 전체 내에서 고유해야 하니깐 주로 파일명을 사용한다.


▶ 원래는 클래스 파일을 만들면 객체를 생성해주기 위해서 servlet-context.xml에 직접 명기해서 Bean을 만들어야 하지만, <context:component-scan base-package="com.spring.*" /> 으로 인하여 클래스를 만들고 어노테이션을 써주면 자동적으로 스프링 컨테이너가 객체(Bean)로 생성해준다.

- 클래스명을 객체이름으로 한다.(첫글자만 소문자로)


▶ @Controller에는 이미 Bean으로 등록하는 기능(@Component)가 들어가 있으므로 굳이 @Component를 쓰지 않아도 된다.


-------------------------------------------------------------------------------------------------------------------------------------


이전까지는 DAO에서 수동커밋으로 만들고 SQL문을 적은 다음에 모든 트랜잭션이 성공하면 커밋, 하나라도 실패하면 롤백을 했었다.


그러나 스프링은 이제 DB 기능을 Service단에서 한다. DAO에서 서비스단에 트랜잭션을 요청한다.

- Service에서 트랜잭션 처리를 해준다.

- 에전처럼 if 조건절을 이용해 DAO에서 트랜잭션 처리를 할 필요가 없다.

- insert 메소드, update 메소드 등을 DAO에서 불러오기만 하면 스프링 컨테이너가 알아서 해준다.

- 전부 맞으면 커밋, 하나라도 틀리면 롤백(All or Nothing)


★ DAO는 단일 데이터 접근 로직이다. 말 그대로 SQL 하나 보내고 결과를 받는 것이 전부인 로직이다.

★ Service는 하나의 서비스를 위해 여러개의 DAO를 묶은 트랜잭션이다.


▶ Service를 만든다.

- 인터페이스 ( InterBoardService )

- 클래스 ( BoardService )


★ Service 클래스 파일을 일반 클래스파일과 구별하기 위해서는 @Service 어노테이션을 붙여줘서 일반 클래스가 아닌, 서비스 클래스임을 선언해준다.


★ Service -> 트랜잭션 처리를 담당하는 곳, 업무를 처리하는 곳, 비지니스(Business)단


▶ @Controller와 마찬가지로 @Service만 쓰면 알아서 Bean(객체)로 만들어져서 @Component를 쓸 필요가 없다.


▶ Model단을 다른 말로 Repository라고 부른다. (DAO, DTO)

- DAO 위에는 @Repository 어노테이션을 써서 Bean(객체)로 올라가게 한다.


★ 클래스 파일들은 Bean(객체)로 올라가야 스프링 컨테이너가 관리를 해준다.

====================================================================================

[ 스프링 컨테이너? 서블릿 컨테이너? ]


서블릿 : 서버 쪽에서 실행되며 클라이언트의 요청을 동적으로 처리할 수 있게끔 도와주는 자바 클래스입니다.


서블릿 컨테이너 - 서블릿 컨테이너는 서블릿의 생성부터 소멸까지 일련의 과정을 관리해주는 컨테이너


스프링 컨테이너 - 스프링 컨테이너는 자바 객체의 생명 주기를 관리하며, 생성된 자바 객체들에게 추가적인 기능을 제공하는 역할을 합니다.


▣ 참조: https://wan-blog.tistory.com/16

====================================================================================


[ 의존객체 ]

# 휴대폰의 의존객체는 배터리이다. 배터리가 있어야 휴대폰은 제대로된 기능을 할 수 있다.


▶ DAO에서만 SQL문을 날려도 오라클과 연결해주는 객체가 존재해야 제 기능을 할 수 있다.


▶ sqlsession은 sqlSessionFactory를 참조하는데 SQL문은 com/spring/board/mapper/*.xml에 써야한다고 정의되어 있다.


그리고 sqlSessionFactory는 연결할 DB가 어딘지 알 수 있는 dataSource(DBCP)를 참조하고 있다.


즉, DAO에서는 sqlsession을 쓰면 DB에 연결할 수 있다. ( sqlsession 을 의존객체로 넣는다. )


※ DAO의 의존객체는 sqlsession 이다.


- 이전과 다르게 DAO에 Connection, SQL문, PrepareStatement, ResultSet 등을 쓰지 않는다.

- 단지 어떤 DML을 사용할지와 어떤 mapper.xml에 있는지를 알려주고(파라미터도 보내준다), 리턴값만 받는다.


-------------------------------------------------------------------------------------------------------------------------------------


[ 의존 객체 자동 주입방법 3가지 ]


1. @Autowired

- Spring Framework에서 지원하는 어노테이션

- Autowired를 쓰면 스프링 컨테이너가 Bean(객체)로 올라가있는 것을 다 뒤져서 그 중에서 클래스 타입(클래스명)이 동일한 것을 찾고 자동적으로 필드(멤버변수)에 연결(의존객체주입)한다.

- 만약 @Autowired를 빼고 private SqlSessionTemplate sqlsession; 만 쓰면 값은 null 이다.


(예시)


@Autowired

private SqlSessionTemplate abc;

==> Type 에 따라 Spring 컨테이너가 알아서 root-context.xml 에 생성된 org.mybatis.spring.SqlSessionTemplate 의 bean 을 abc 에 주입시켜준다.


★ 조심할 것은 만약에 root-context.xml에 연결할 DB가 한 개밖에 없다면 문제가 없지만, 연결할 DB가 여러개라면 "private SqlSessionTemplate 필드명"에는 이름을 내가 연결하고자하는 sqlsession의 아이디와 똑같이 써야한다.


(예시)

만약 mvmvc에 연결해주는 sqlsession에 연결해주려면 다음과 같이 만들어야 한다.


@Autowired

private SqlSessionTemplate sqlsession;

==> SQL세션템플릿이 여러 개 있다면 정확히 무엇을 쓸 지(어떤 DB서버에 연결할 지) 알려줘야 한다.

==> 만약 알려주지 않는다면 충돌이 일어난다.


※ DB서버가 root-context.xml에 한 개밖에 없다면 사용한다.


-------------------------------------------------------------------------------------------------------------------------------------


2. @Resource

- Java에서 지원하는 어노테이션이다.

- DB서버가 복수개라면 @Resource를 사용한다.

- 스프링 컨테이너에 담겨진 의존객체를 주입할때 필드명(이름)을 찾아서 연결(의존객체주입)한다.


@Resource

private SqlSessionTemplate sqlsession; // mymvc 서버


@Resource

private SqlSessionTemplate sqlsession2; // 원격지 서버


@Resource

private SqlSessionTemplate sqlsession3; // hr 서버


- @Resource라는 어노테이션을 적어주면 SqlSessionTemplate라는 클래스(빈) 중에서 객체 이름이 sqlsession(2 or 3)인 것을 찾아서 저기에 꽂아준다.

- 그러므로 이제 sqlsession ~ sqlsession3 은 null이 아니다.


-------------------------------------------------------------------------------------------------------------------------------------


3. @Inject


※ @Autowired 는 Spring에서 주는 기능이다.

※ @Resource 는 java에서 주는 기능이다.


@Autowired와 흡사하다. 허나, 얘는 java에서 주는 기능이다.


-------------------------------------------------------------------------------------------------------------------------------------


이전의 방식으로는 DAO에 한 메소드마다 Connection(DBCP), SQL문, PrepareStatement, ResultSet 등을 모두 적어야 했다.


▶ 스프링에서는 DAO는 단지 mapper.xml에 특정 SQL문을 호출하고 리턴값만 받아온다.

==> SQL문과 메소드가 분리되어져 있다.


★ 단 mapper.xml에는 예전의 String sql = ""; 처럼 따옴표 안에는 세미콜론을 포함시켜선 안 된다.


(예시)

<select id="getImgfilenameList" resultType="String">

select imgfilename

from tbl_main_image

order by imgno desc

</select>


★★★ 이미 얘는 DAO에서 .selectList()로 호출했기 때문에 복수 개인것을 안다. 그래서 select문에는 resultType(리턴타입)에 List의 제네릭타입(String)만 넣어주면 된다.

==> DAO에서는 다음과 같이 호출했다.

==> List<String> imgfilenameList = sqlsession.selectList("board.getImgfilenameList");


------------------------------------------------------------------------------------------------------------------------------------


■ BoardService.java


Service의 의존객체는 누구인가? --> DAO이다.

==> DAO는 @Repository로 Bean(객체)로 올렸기 때문에 의존객체주입을 할 수 있다.

==> 또한 고유하기 때문에 Service에서는 의존객체 주입을 @Autowired를 사용할 수 있다.


@Autowired

private InterBoardDAO dao;


▶ boardDAO는 한 개밖에 없으니 AutoWirde를 사용하면 된다.

==> Type 에 따라 Spring 컨테이너가 알아서 bean 으로 등록된 com.spring.model.BoardDAO 의 bean 을 dao 에 주입시켜준다.


------------------------------------------------------------------------------------------------------------------------------------

■ BoardController.java


@Autowired

private InterBoardService service;


------------------------------------------------------------------------------------------------------------------------------------


Controller의 의존객체는? --> Service

Service의 의존객체는? --> Model(DAO)

Model의 의존객체는? --> SqlSessionTemplate


[ 의존객체 주입하기 추가설명 ]


스프링 프레임워크는 객체를 관리해주는 컨테이너(== 스프링 컨테이너)를 제공해주고 있다.

스프링 컨테이너는 bean으로 등록되어진 BoardContoller 클래스 객체가 사용되어질때, BoardController 클래스의 인스턴스 객체변수(의존객체)인 BoardService service 에 자동적으로 bean 으로 등록되어 생성되어진 BoardService service 객체를 BoardController 클래스의 인스턴스 변수 객체로 사용되어지게끔 넣어주는 것을 의존객체주입(DI: Dependency Injection)이라고 부른다. 이것이 바로 IoC(Inversion of Control == 제어의 역전)인 것이다.


즉, 개발자가 인스턴스 변수 객체를 필요에 의해 생성해주던 것에서 탈피하여 스프링은 컨테이너에 객체를 담아 두고, 필요할 때에 컨테이너로부터 객체를 가져와 사용할 수 있도록 하고 있다.

스프링은 객체의 생성 및 생명주기를 관리할 수 있는 기능을 제공하고 있으므로, 더이상 개발자에 의해 객체를 생성 및 소멸하도록 하지 않고 객체 생성 및 관리를 스프링 프레임워크가 가지고 잇는 객체 관리기능을 사용하므로 Inversion of Control == 제어의 역전 이라고 부른다. 그래서 스프링 컨테이너를 IoC 컨테이너라고도 부른다.


▶ IOC(Inversion of Control) 란 ?

스프링 프레임워크는 사용하고자 하는 객체를 빈형태로 이미 만들어 두고서 컨테이너(Container)에 넣어둔후 필요한 객체사용시 컨테이너(Container)에서 꺼내어 사용하도록 되어있다.

이와같이 객체 생성 및 소멸에 대한 제어권을 개발자가 하는것이 아니라 스프링 Container 가 하게됨으로써 객체에 대한 제어역할이 개발자에게서 스프링 Container로 넘어가게 됨을 뜻하는 의미가 제어의 역전 즉, IoC(Inversion of Control)이라고 부른다.


▶ 느슨한 결합

스프링 컨테이너가 BoardController 클래스 객체에서 BoardService 클래스 객체를 사용할 수 있도록 만들어주는 것을 "느슨한 결합" 이라고 부른다.

느슨한 결합은 BoardController 객체가 메모리에서 삭제되더라도 BoardService service 객체는 메모리에서 동시에 삭제되는 것이 아니라 남아 있다.


▶ 단단한 결합(개발자가 인스턴스 변수 객체를 필요에 의해서 생성해주던 것)

private InterBoardService service = new BoardService();

==> BoardController 객체가 메모리에서 삭제 되어지면 BoardService service 객체는 멤버변수(필드)이므로 메모리에서 자동적으로 삭제되어진다.


------------------------------------------------------------------------------------------------------------------------------------


★★ [ 순서 정리 ] ★★


★ 항상 xml이 바뀌면 WAS 재구동 해준다.


0. 사용자가 URL(index.action) 을 입력하고 웹브라우저에 요청을 한다.


1. Controller는 Service에게 DB에 접근해서 carousel에 넣을 이미지들을 DB에서 꺼내와달라고 요청한다.

==> service.getImgfilenameList(); // @Autowired로 BoardService.java에 자동으로 연결됐기 때문에 해당 메소드를 쓸 수 있는 것이다.


2. Service는 DAO에게 SQL문을 달라고 요청한다.


3. DAO는 board.XML에서 ID가 "getImgfilenameList"인 SQL문을 불러와서 돌리고 결과물을 Service에 돌려준다.


4. Service는 DAO로 부터 받아온 결과물을 다시 Controller에 보내준다.


5. Controller는 View 페이지에 넘긴다. ( request영역에 imgfilenameList를 담아서 보내준다. )

- return "index.tiles1"; 으로 리턴값을 쓴다.


6. ViewResolver가 어떤 형식의 View 페이지인지 확인하고 알맞게 해석해준다.

- 리턴값에 .tiles1를 썼으니 tiles-layout.xml에 보내서 맞는 패턴을 찾게한다.


====================================================================================


※ 나중에 파이널 프로젝트 하실때 자기만의 컨트롤러 패키지 만들면 충돌 안 일어난다.


[ 로그인 구현하기 ]


■ header.jsp


<a class="dropdown-item" href="<%=ctxPath%>/login.action">로그인</a>


■ BoardController.java ( ※ 얘가 FrontController.java, 각각의 Action.java , Command.properties 등의 역할을 다 하고 있다. )


@RequestMapping(value="/login.action", method= {RequestMethod.GET})

public String login() {

return "login/loginform.tiles1";

}


▶ method= {RequestMethod.GET}는 GET 방식의 접근만 허락한다는 뜻이다.

- 적지 않으면 GET or POST 둘 다 가능하다.


■ loginform.jsp


아이디와 비밀번호를 입력받고 다시 "<%= ctxPath%>/loginEnd.action"; 로 전송한다.


■ BoardController.java


@RequestMapping(value="/loginEnd.action", method= {RequestMethod.POST})

public ModelAndView loginEnd(HttpServletRequest request, ModelAndView mav) { }


- POST만 허용

- 리턴타입은 ModelAndView


String userid = request.getParameter("userid");

String pwd = request.getParameter("pwd");


Map<String, String> paraMap = new HashMap<>();

paraMap.put("userid", userid);

paraMap.put("pwd", Sha256.encrypt(pwd));


MemberVO loginuser = service.getLoginMember(paraMap);


★ 스프링에서는 복수개의 파라미터를 넘기려면 반드시 Map으로 넘겨야한다.


- 암호는 SHA-256 암호화를 시켜서 DB에 넘겨야한다.


■ BoardService.java


DAO로 다시 넘겨준다.


■ BoardDAO.java


mapper인 board.xml에 아이디와 비밀번호를 DB에 가져가서 회원정보를 반환하는 SQL문을 호출한다.


MemberVO loginuser = sqlsession.selectOne("board.getLoginMember", paraMap);

return loginuser;


★ 자바클래스 파일을 사용하려면 Bean으로 올리려면 어노테이션(@Component, @Controller, ...)을 사용해야한다.


허나 실습예제에서는 AES256 클래스 파일에는 기본생성자가 없어서 어노테이션으로 Bean을 올리는게 아닌 XML에서 파라미터가 있는 생성자를 넣어줘서 Bean으로 올려준다.



■ servlet-context.xml


<beans:bean id="aes" class="com.spring.board.common.AES256"> --▶ 객체생성

<beans:constructor-arg> --▶ 생성자

<beans:value>abcd0070#cclass$</beans:value> --▶ 생성자에 파라미터를 넣어준다. ( 저 value는 aes의 키값이다. )

</beans:constructor-arg>

</beans:bean>


==> 이제 AES256 이라는 클래스타입의 객체를 만들고 Type 에 따라 Spring 컨테이너가 알아서 bean 으로 등록된 com.spring.board.common.AES256 의 bean 을 aes 에 주입시켜준다.


양방향 암호화 알고리즘인 AES256 암호화를 지원하는 클래스 생성하기 (기본생성자가 없으므로 @Componet 를 쓰면 오류가 발생한다. 그래서 servlet-context.xml 파일에 직접 파라미터가 있는 생성자로 bean 등록을 해주어야 한다.)


▶ 스프링은 우리가 직접 객체를 new 클래스명 ( ); 식으로 안 만들고, servlet-context.xml에서 이미 다 메모리에 올려놨으니 의존객체를 만들어서 매핑시키면 된다.


※ SHA256 클래스 파일은 기본생성자가 있기 때문에 알아서 Bean으로 올라간다.


------------------------------------------------------------------------------------------------------------------------------------


■ board.xml


▶ DAO에서 넘겨준 paraMap을 받으려면?


<select id="getLoginMember" parameterType="HashMap" resultType="com.spring.board.model.MemberVO" >

parameterType="HashMap" --▶ HashMap 임을 적어준다.


★ 옛날에는 위치홀더(?)를 사용했지만, 스프링은 아니다!


★★★★★ HashMap 타입으로 매개변수를 받아온 것을 꺼내서 사용할때

1. 데이터로 사용할때는 #{key명} 이고,

2. 식별자(테이블명, 컬럼명)로 사용할때는 ${key명} 이고,

3. myBatis 에서 제공하는 if 엘리먼트나 choose 엘리먼트 안에서 사용할때는 그냥 <if test="key명"> <when test="key명"> 으로 사용한다.



★ 위치홀더(?)는 테이블이나 컬럼명에는 사용할 수 없다.


★ resultType에서 우리가 만든 클래스를 리턴타입으로 쓰려면 패키지주소까지 다 써줘야 한다.

==> resultType="com.spring.board.model.MemberVO"


select 되어진 값을 이제 setter로 MemberVO에 넣어서 리턴시켜줘야한다.


★ 근데 returntype에 모델에 있는 VO를 타입으로 써주면(resultType="com.spring.board.model.MemberVO"), MemberVO와 select에서 컬럼명이 똑같다면 자동적으로 set이 된다.


★ 즉, VO의 필드명 == DB의 컬럼명 == selec 했을때 컬럼명 이 똑같아야한다.


▶ Model(DAO)는 단순히 select, update, delete, insert SQL문을 불러와서 데이터를 읽어오는 곳이다.


▶ Service단은 DB에서 조회된 데이터를 처리(가공)를 해주는 곳이다.

- 트랜잭션 처리, 업무를 처리해주는 곳이다.

- 최종 결과물을 컨트롤러에 넘겨줌


★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★


[ Bean 에 대한 설명 ]

https://juwonkim.tistory.com/156

[ myBatis란? ]

https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&blogId=wwwkang8&logNo=220989381100


★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★


------------------------------------------------------------------------------------------------------------------------------------


▶ mapper인 board.xml 등에서 select는 resultType을 쓰지만, update/insert/delete는 resultType을 쓰지 않는다.


[설명]

찾아보니 insert, update, delete에는 resultType이 없고


row의 개수를 반환한다고 한다.


insert의 경우는 삽입된 행의 개수를 반환


update의 경우는 수정에 성공한 행의 개수를 반환(실패시 0 반환)


delete의 경우는 삭제한 행의 개수를 반환


------------------------------------------------------------------------------------------------------------------------------------


■ BoardController.java


▶ 지금까지는 View 단을 표시해줄 때 리턴을 String 타입으로 나타냈다.


▶ 허나, 리턴타입으로 ModelAndView 도 나온다. ( 스프링에 있는 기능이다. )

==> public ModelAndView loginEnd(HttpServletRequest request)

==> select해온 결과물(model) 그리고 View단(view)


그 전까지는 request 영역에 message, loc를 담아서 보내줬다.

==> request.setAttribute("key", value);


▶ ModelAndView는 다음과 같이 한다.


public ModelAndView loginEnd(HttpServletRequest request, ModelAndView mav) --> 리턴타입을 선언한다.


mav.addObject("message", message); == request.setAttribute("message", message);


mav.setViewName("msg");

// return "msg"; --▶ 리턴타입이 String이었다면 이렇게 한다.

// alert만 띄워주면 끝이니 굳이 tiles가 필요없다.

// 그래서 2순위인 ViewResolver가 선택되서 접두어, 접미어가 붙을 것이다.

// /WEB-INF/views/msg.jsp 파일을 생성한다.


마지막에 mav 객체를 리턴해준다.


------------------------------------------------------------------------------------------------------------------------------------


※ 웹브라우저(웹클라이언트)가 WAS가 붙기만 하면 Session은 자동적으로 생성된다.

==> 그리고 그 세션을 request.getSession( ); 으로 불러온다.


▶ [ 세션(Session) ]


일정 시간동안 같은 사용자(브라우저)로부터 들어오는

일련의 요구를 하나의 상태로 보고, 그 상태를 일정하게 유지시키는 기술이다.


여기서 일정 시간은 방문자가 웹 브라우저를 통해

웹 서버에 접속한 시점으로부터 웹 브라우저를 종료하여 연결을 끝내는 시점을 말한다.


------------------------------------------------------------------------------------------------------------------------------------


※ 로그인이 성공했다면 redirect로 index.action(@RequestMapping(value="/index.action"))에 RequestMapping된 곳으로 보낸다.


★ 모든 페이지가 404 에러라면 XML이 깨졌을 경우가 크다 --> XML에서 오타를 찾아본다. (주로 mapper에서 발생)


====================================================================================


[ StarUML ]


C:\NCS\StarUML관련자료_요구사항정의서엑셀파일\StarUML관련자료\06UML실습(쇼핑몰)


예제파일을 보고 유스케이스 다이어그램 / 시퀀스 다이어그램 / 클래스 다이어그램을 그린다.


▶ UML이란?


Unified Modeling Language

1997년 OMG(Object Management Group)에서 표준으로 채택한 통합모델링언어 이다.


- 프로그램을 말로 설명하기 힘드니, 도식화한 것이다.

- 우리가 만든 프로그램을 그림으로 보여주는 것이다.


프로그램을 다 짜고나서 납품을 할때 UML을 넣어주면 유지보수를 할 때 프로그램에 대한 전체적인 파악이 쉬워지니 편하다.


마치 건축물의 설계도면과 같다.


▶ 유스케이스 = 행위, 기능

▶ Actor = 사용자(회원, 비회원)


로그인한다(전제조건) <--<<include>> -- 글을등록한다

==> 글을 등록하기 위한 전제조건은 "로그인하기" 라는 뜻이다.


파일을 첨부한다 -- <<extends>> --> 글을 등록한다.

==> 글작성에 있어서 파일첨부는 있어도 되고 없어도 되는 뜻이다.


Generalization은 어떤 기능을 하기위한 방법이다.


글을 조회한다. <------- Generalization ------- 글쓴이로 조회한다.

<------- Generalization ------- 날짜로 조회한다.



▶ 도식을 없앨때는 model Explorer에서 오른쪽 클릭 -> delete from model로 지워야한다.

그냥 도식에서 delete키로 지워도 남아있다.


▶ file - export diagram으로 jpg로 다이어그램을 저장할 수 있다.

==> 이미지파일로 저장한 것은 포트폴리오에 꼭 게재해야한다.

﻿