11월 15일 

[웹채팅]

▶ #170

스프링에서 웹채팅을 하려면 라이브러리가 필요한데, pom.xml에 웹소켓을 추가해놨다.

▶ #171

웹채팅을 하려면 또한 GSON이 필요하다.
- Google JSON
- 자바객체 → 자바스크립트객체 또는 자바스크립트객체 → 자바객체 식으로 변환이 가능하다.

▶ #172 - tiles1 - header.jsp

웹채팅을 하려면 또한 header.jsp에 서버 IP 주소를 알아와야한다. 
- 사용중인 IP주소가 유동IP 이라면 IP 주소를 알아와야 한다.
- 주소가 로컬호스트면 자기 아이피를 말하기 때문에 웹채팅이 되질 않는다.

이기종간 서로 로컬호스트라면 웹채팅이 불가능하고, 어떤 서버를 사용해야한다.
→ 원래는 도메인을 사용해야 한다.
→ 현재는 도메인이 없으니 아이피를 직접 알아와서 한다.

<%
InetAddress inet = InetAddress.getLocalHost(); 
String serverIP = inet.getHostAddress();
%>
★ JSP 안에 있지만 스크립틀릿 안에 있으니 자바의 기능이다.
★ 실무에 나가면 서버는 고정IP이지, 유동IP가 아니다. (그러므로 직접 IP를 적어주면 된다.)
→ 집에서 개인사용자라면 유동IP이다.

// String serverIP = "211.238.142.72"; 
// 만약에 사용중인 IP주소가 고정IP 이라면 IP주소를 직접 입력해주면 된다.


▶ 또한 서버의 포트번호를 알아와야 한다.

<%
InetAddress inet = InetAddress.getLocalHost(); 
String serverIP = inet.getHostAddress();

int portnumber = request.getServerPort();
%>

▶ serverName은 = "http://"+serverIP+":"portnumber; 이다.
→ serverName : http://192.168.0.225:9090

▶ <%= serverName%><%=ctxPath%>/chatting/multichat.action
→ 로컬호스트로하면 서로 간의 채팅이 안되기 때문에 로컬호스트가 아닌 WAS 서버의 IP로 가야한다.
→ http://192.168.0.225:9090/board/chatting/multichat.action


▶ #173. 컨트롤러에 메소드 생성 - /chatting/multichat.action
→ 누구인지 알아야 채팅을 할 수 있으니 "requiredLogin_" AOP를 추가한다.
→ 파라미터는 HttpServletRequest request, HttpServletResponse response 로 맞춰준다.
→ 원하는 결과물은 다중채팅, 1:1채팅을 구현할 것이다.


■ multichat.jsp

웹소켓: 아이피:포트번호 를 소켓이라고 한다.

웹소켓 통신 프로그래밍은 HTML5 표준으로써 ★ 자바스크립트로 작성한다.

웹소켓은 웹 서버로 소켓을 연결한 후 데이터를 주고 받을 수 있도록 만든 HTML5 표준이다.
그런데 이러한 웹소켓은 HTTP 프로토콜로 소켓 연결을 하기 때문에 웹 브라우저가 이 기능을 지원하지 않으면 사용할 수 없다.
→ 최신 브라우저들은 모두 지원한다.

▣ 소켓이란?
IP Address와 PORT 번호의 조합이다.

서버소켓: 우리가 System.out.println으로 찍었던 아이피+포트번호이다.

▣ 클라이언트는 서버에 연결을 할 때 자기의 아이피와 포트번호를 랜덤하게 생성하여 서버에 보내준다.
그러면 서버는 받아서 그 주소로 정보를 주고받는다.

클라이언트는 서버인 211.238.142.77:9090 소켓으로 클라이언트 자신의 정보인 211.238.142.70:7942 을 
보내어 연결을 시도하여 연결이 이루어지면 서버는 클라이언트의 소켓인 211.238.142.70:7942 으로 데이터를 보내면서 통신이 이루어진다.

★ 소켓(Socket)은 데이터를 통신할 수 있도록 해주는 연결점이기 때문에 통신할 두 프로그램(Client, Server) 모두에 소켓이 생성되야 한다.

▣ Server는 소켓을 통해 Cilent측 소켓의 연결 요청이 있을 때까지 기다리고 있다(Listening 한다 라고도 표현함).

▶ 스크립트에서 주소창의 아이피주소와 포트번호를 가져와야 한다.
→ window.location.host;
// url => 192.168.0.225:9090

▶ var pathname = window.location.pathname; - '/' 부터 오른쪽에 있는 모든 경로를 알아오고자 한다.
// pathname => /board/chatting/multichat.action

실제 채팅대화는 새로운 액션에서 이뤄지니 pathname에서 /board/chatting 만 추려와야 한다.
→ pathname.substring(0, pathname.lastIndexOf("/"));
→ appCtx => /board/chatting

웹소켓 채팅을 위해서는 HTTP 프로토콜이 아닌 WS 프로토콜을 사용해야 한다.
→ 웹소켓통신을 하기위해서는 http:// 을 사용하는 것이 아니라 ws:// 을 사용해야 한다.

웹소켓 통신은 전부 자바스크립트에서 이뤄줘야 한다.

▶ #175 웹소켓용 contextConfigLocation을 추가한다.

<param-value>/WEB-INF/spring/appServlet/servlet-context.xml,
	       /WEB-INF/spring/config/websocketContext.xml
</param-value>
→ appServlet의 환경설정 파일을 1개 더 추가한 것이다.

▶ #176 웹소켓 통신용 websocketContext.xml 파일을 생성한다.
※ 채팅관련 예제를 찾으려면 ctrl + alt + shift + L을 누르고 "웹채팅"으로 검색을 한다.
→ 통신을 하게 해주는 bean을 생성해야한다.

▶ #177 웹소켓용 bean이 될 자바클래스 파일을 생성한다.
→ com.spring.chatting.websockethandler.WebsocketEchoHandler

해당 클래스는 반드시 TextWebSocketHandler를 상속받아야 한다.
→ 해당 부모클래스에 웹채팅용 기능이 모두 구현되어있으니 상속받아서 사용만 하면 된다.

1. 사용자가 누구인지 알아야 한다.
→ 웹소켓서버에 연결한 클라이언트 사용자들을 저장하는 리스트 
→ 사용자가 몇명일지 모르니깐 길이에 한계가 있는 배열이 아닌, 리스트를 사용한다.

2. 웹소켓 통신이니 List의 제네릭은 WebSocketSession 을 쓴다.
사용자A - WebSocketSession
사용자B - WebSocketSession
사용자C - WebSocketSession
→ 연결된 사용자 하나하나마다 WebSocketSession을 다 준다.


■ multichat.jsp

★ 중요 ★
= 자바스크립트 웹소켓 이벤트 정리 =
1. onopen: 웹소켓 연결
2. onmessage: 메시지 수신
3. onerror: 전송 에러 발생
4. onclose: 웹소켓 연결해제

▣ 현재 multichatstart.action은 컨트롤러에 없으며, websocket이라는 객체의 주소는 http:// 가 아닌 ws:// 프로토콜 이다.

일반적인 컨트롤러는 HTTP 프로토콜만 담당하며, 웹소켓 통신을 위한 컨트롤러는 websocketContext.xml으로 사용해야한다.
→ 확장자가 xml이니 앞에 컨텍스트패스명을 생략해도 URL 주소앞에 / 이 붙어있으면 IP주소:포트번호/컨텍스트패스명이 붙여진다.
→ websocketContext.xml이 /chatting/multichatstart.action이란 URL 주소를 책임진다.
→ 해당 URL로 들어오면 WebsocketEchoHandler.java 파일이 처리를 한다.

▶ 형식을 맞추기 위해서 WebsocketEchoHandler.java 에 init 메소드를 생성해준다.

▶ #178. 채팅을 위해서는 VO가 필요하니 생성해준다.
→ com.spring.chatting.websockethandler.MessageVO
→ 자바스크립트에서는 이제 자바인 MessageVO를 사용해야 한다.

1. 웹소켓  연결이 성공하면 "웹소켓에 연결이 성공됨!!" 메시지를 띄운다.
2. 메시지객체에 MessageVO의 필드별로 값을 넣는다.
3. websocket.send(JSON.stringify(messageObj)); 로 객체를 JSON 형태로 바꿔서 웹소켓으로 보낸다.
★ JSON.stringify(자바객체) 는 자바객체를 JSON 표기법의 문자열(String)로 변환한다

▶ wsession 은 서버에 접속한 클라이언트인데, wsession에서 httlSession을 꺼내오면 누가 로그인을 했는지 알 수 있다.

웹소켓 URL이 ~이면 먼저 WebsocketEchoHandler.java이 응답을 해주는데, 환경설정 파일에 websocket:handshake-interceptors 를 넣어주면 클래스파일에서 HttpSession을 불러와서 쓸 수 있다.
★ WebSocketSession.webSocketSession.getAttributes(); 를 하면 해당 로그인 유저의 세션에 저장된 값들을 꺼내올 수 있다.


▶ 웹소켓 연결이 되면 웹소켓핸들러.java에서 접속자 명단을 sendMessage로 보내주는데, 이제 JSP 파일에서 메시지를 수신받으면 콜백함수로 처리를 해서 JSP에 출력을 해준다.

※ 웹소켓핸들러.java는 메시지 서버와 같은 개념이다.
