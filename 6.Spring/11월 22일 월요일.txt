11월 22일 수업

[ 스프링 스케쥴러 ]

예약 

시간만되면 자동적으로 움직이는 것이다.

■ servlet-context.xml

보통 대량메일같은 경우에는 심야시간에 보낸다.
→ 낮에는 WAS가 사용자들을 처리해주느라 바쁘기 때문이다.
→ 새벽 3시에 사람이 직접 메일보내라고 눌러주는게 아니다. 스케쥴러를 이용해서 자동으로 보내는 것이다.

▶ #179 스프링 스케쥴러를 쓰려면 servlet-context.xml에 <task:annotation-driven /> 을 추가해야 한다.

■ BoardController.java

▶ #180. 스프링스케쥴러를 사용하여 특정 URL 사이트로 연결하기

항상 12시 50분이 되면 컨트롤러의 branchTimeAlarm 메소드가 실행되게 한다.


※ 주의

스프링 스케쥴러는 서비스단에서 작성한다.

■ BoardService.java

▶ #181 스프링스케쥴러

※ 주의

스케쥴러로 사용되어지는 메소드는 반드시 파라미터가 없어야 한다.
→ void branchTimeAlram();


▶ #182 

스케쥴러를 사용할 서비스의 메소드는 @Scheduled(cron) 을 쓴다.


★★★★★ 스프링 스케줄러는 서비스 단에서 하는 것이다. ★★★★★
→ 서비스 단에서하는 처리 대표적인 것: 트랜잭션 처리, 스케줄러

스케줄의 종류는 3가지가 있다. cron, fixedDelay, fixedRate
→ fixedDelay와 fixedRate는 잘 사용하지 않는다.

▣ cron 표기법
- 유닉스 계열에서 나온 표기법이다.

초 / 분 / 시 / 일 / 월 / 요일명 / 년도 순으로 표기한다.

매일 12시 50분은 다음과 같이 표기한다.
@Scheduled(cron="0 50 12 * * *")


[ 크론 기호 ]
▣ * 는 모든 수를 의미한다.

▣ ? 는 해당 항목을 사용하지 않음


Desktop.getDesktop().browse(new URI("http://localhost:9090/board/branchTimeAlarm.action")); 
→ 특정 시간이 되면 웹브라우저를 켜서 해당 주소로 이동시킨다.
→ WAS 컴퓨터에서만 특정 웹페이지를 실행시켜주는 것이지, WAS에 접속한 다른 클라이언트 컴퓨터에서는 특정 웹사이트를 실행시켜주지 않는다.

※ 중요한 것은 URL에 http:// 를 꼭 붙여야한다.

@Scheduled(cron="0 * * * * *") 
→ 매 0초마다 즉, 1분마다 반복하라는 뜻이다(1분이 되면 00초가 되니깐)


@Scheduled(fixedDelay=1000)
→ 이전에 실행된 task의 종료시간으로부터 1초 뒤에 다시 실행해라. (단위는 밀리초임)

@Scheduled(fixedRate=1000)
→ 이전에 실행된 task의 시작 시간으로부터 정의된 시간만큼 지난 후 다음 task를 실행함 .(단위는 밀리초임)

========================================================================

[ 스케쥴러를 이용해 이메일 발송하기 ]

▶ #183 스프링 스케줄러를 사용한 email 발송하기

새벽 3시가 되면 예약자에게 메일을 발송시킨다.

▶ #184(MySMTPAuthenticator) 에는 Google SMTP를 사용하기위한 아이디와 비밀번호가 적혀져 있다.


▶ #183 하단부에 sendmail_Reservation 메소드를 생성한다.

▶ 오라클에서 예약 테이블을 생성한다.

★ 스케쥴러 메소드는 반드시 파라미터가 없어야 한다.

▶ #185 Service에 GoogleMail 의존객체를 생성한다.

▶ #186 Service에 매 새벽 04시마다 메일을 보내주는 메소드 생성한다.

@Override
@Scheduled(cron="0 0 04 * * *")
public void reservationEmailSending() throws Exception {}

※ map.putIfAbsent(ket, value); 는 이미 해당 key 값에 설정된 value 값이 있다면 덮어 씌우지 않고, 해당 key 값이 없으면 넣어준다.
